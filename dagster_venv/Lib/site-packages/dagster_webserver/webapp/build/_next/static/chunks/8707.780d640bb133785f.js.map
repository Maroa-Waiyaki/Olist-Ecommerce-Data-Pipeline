{"version":3,"file":"static/chunks/8707.780d640bb133785f.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/assets/auto-materialization/InstanceAutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/GlobalAutomaterializationContent.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/runs/useCursorAccumulatedQuery.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillLogsTab.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPartitionsTab.tsx","webpack://_N_E/../ui-core/src/instance/backfill/ExecutionTimeline.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillRunsTab.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedules.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensors.tsx","webpack://_N_E/../ui-core/src/runs/useHourWindow.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTimelineRoot.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/runs/HourlyDataCache/HourlyDataCache.tsx","webpack://_N_E/../ui-core/src/instance/NextTick.tsx","webpack://_N_E/../ui-core/src/runs/useRunsForTimeline.tsx"],"sourcesContent":["import {useCallback, useEffect, useMemo} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\ninterface Props {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}\n\nexport const InstanceAutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: Props) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n              InstigationTickStatus.SKIPPED,\n            ],\n      );\n    }, []),\n    encode: useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <AutomaterializationEvaluationHistoryTable\n      loading={queryResult.loading}\n      ticks={queryResult.data?.autoMaterializeTicks || []}\n      paginationProps={paginationProps}\n      setSelectedTick={setSelectedTick}\n      setStatuses={setStatuses}\n      setTableView={setTableView}\n      statuses={statuses}\n    />\n  );\n};\n","import {useLazyQuery} from '@apollo/client';\nimport {Alert, Box, Checkbox, Colors, Spinner, Subtitle2, Table} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {InstanceAutomaterializationEvaluationHistoryTable} from './InstanceAutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isStuckStartedTick} from '../../instigation/util';\nimport {useBlockTraceOnQueryResult} from '../../performance/TraceContext';\nimport {useAutomaterializeDaemonStatus} from '../useAutomaterializeDaemonStatus';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\nexport const GlobalAutomaterializationContent = () => {\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [isPaused, setIsPaused] = useState(false);\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const getVariables = useCallback(\n    (now = Date.now()) => {\n      if (timeRange || statuses) {\n        return {\n          afterTimestamp: timeRange?.[0],\n          beforeTimestamp: timeRange?.[1],\n          statuses,\n        };\n      }\n      return {\n        afterTimestamp: (now - TWENTY_MINUTES) / 1000,\n      };\n    },\n    [statuses, timeRange],\n  );\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n\n  const refresh = useCallback(\n    async () => await fetch({variables: getVariables()}),\n    [fetch, getVariables],\n  );\n\n  useBlockTraceOnQueryResult(queryResult, 'AssetDaemonTicksQuery');\n\n  useRefreshAtInterval({\n    refresh,\n    enabled: !isPaused && !timeRange && !statuses,\n    intervalMs: 2 * 1000,\n    leading: true,\n  });\n\n  const [selectedTick, setSelectedTick] = useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const allTicks = useMemo(() => {\n    return data?.autoMaterializeTicks || [];\n  }, [data]);\n\n  const ticks = useMemo(\n    () => {\n      return (\n        allTicks?.map((tick, index) => {\n          const nextTick = allTicks[index - 1];\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (nextTick && isStuckStartedTick(tick, index)) {\n            const copy = {...tick};\n            copy.endTimestamp = nextTick.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // The allTicks array changes every 2 seconds because we query every 2 seconds.\n    // This would cause everything to re-render, to avoid that we memoize the ticks array that we pass around\n    // using the ID and status of the ticks.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(allTicks.map((tick) => `${tick.id}:${tick.status}`))],\n  );\n\n  const onHoverTick = useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}} flex={{direction: 'column', gap: 12}}>\n        <Alert\n          intent=\"info\"\n          title=\"[Experimental] Dagster can automatically materialize assets when criteria are met.\"\n          description={\n            <>\n              Auto-materialization enables a declarative approach to asset scheduling – instead of\n              defining imperative workflows to materialize your assets, you just describe the\n              conditions under which they should be materialized.{' '}\n              <a\n                href=\"https://docs.dagster.io/concepts/assets/asset-auto-execution\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Learn more about auto-materialization here\n              </a>\n              .\n            </>\n          }\n        />\n      </Box>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box\n          padding={{vertical: 48}}\n          flex={{direction: 'row', justifyContent: 'center', gap: 12, alignItems: 'center'}}\n        >\n          <Spinner purpose=\"body-text\" />\n          <div style={{color: Colors.textLight()}}>Loading evaluations…</div>\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <InstanceAutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  CursorPaginationControls,\n  NonIdealState,\n  Spinner,\n} from '@dagster-io/ui-components';\n\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {BACKFILL_TABLE_FRAGMENT, BackfillTable} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {BulkActionStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {useFilters} from '../ui/Filters';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\n\nconst PAGE_SIZE = 10;\n\nconst labelForBackfillStatus = (key: BulkActionStatus) => {\n  switch (key) {\n    case BulkActionStatus.CANCELED:\n      return 'Canceled';\n    case BulkActionStatus.CANCELING:\n      return 'Canceling';\n    case BulkActionStatus.COMPLETED:\n      return 'Completed';\n    case BulkActionStatus.FAILED:\n      return 'Failed';\n    case BulkActionStatus.REQUESTED:\n      return 'In progress';\n  }\n};\n\nconst backfillStatusValues = Object.keys(BulkActionStatus).map((key) => {\n  const status = key as BulkActionStatus;\n  const label = labelForBackfillStatus(status);\n  return {\n    label,\n    value: status,\n    match: [status, label],\n  };\n});\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const [statusState, setStatusState] = useQueryPersistedState<Set<BulkActionStatus>>({\n    encode: (vals) => ({status: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.status?.split(',') as BulkActionStatus[]) || []),\n  });\n  const statusFilter = useStaticSetFilter<BulkActionStatus>({\n    name: 'Status',\n    icon: 'status',\n    allValues: backfillStatusValues,\n    allowMultipleSelections: false,\n    closeOnSelect: true,\n    renderLabel: ({value}) => <div>{labelForBackfillStatus(value)}</div>,\n    getStringValue: (status) => labelForBackfillStatus(status),\n    state: statusState,\n    onStateChanged: setStatusState,\n  });\n\n  const {button, activeFiltersJsx} = useFilters({filters: [statusFilter]});\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {\n      status: statusState.size > 0 ? Array.from(statusState)[0]! : undefined,\n    },\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n  useBlockTraceOnQueryResult(queryResult, 'InstanceBackfillsQuery'); // this is the main page content\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {loading, data} = queryResult;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading backfills…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const partitionBackfillsOrError = data?.partitionBackfillsOrError;\n    if (partitionBackfillsOrError?.__typename === 'PythonError') {\n      return <PythonErrorInfo error={partitionBackfillsOrError} />;\n    }\n\n    if (!partitionBackfillsOrError || !partitionBackfillsOrError?.results.length) {\n      if (statusState.size > 0) {\n        return (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"no-results\"\n              title=\"No matching backfills\"\n              description=\"No backfills were found for this filter.\"\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No backfills found\"\n            description=\"This instance does not have any backfill jobs.\"\n          />\n        </Box>\n      );\n    }\n\n    const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n    const backfillHealths = daemonHealths\n      .filter((daemon) => daemon.daemonType === 'BACKFILL')\n      .map((daemon) => daemon.required && daemon.healthy);\n    const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n\n    return (\n      <div>\n        {isBackfillHealthy ? null : (\n          <Box padding={{horizontal: 24, vertical: 16}}>\n            <DaemonNotRunningAlertBody />\n          </Box>\n        )}\n        <BackfillTable\n          backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n          refetch={queryResult.refetch}\n        />\n        {partitionBackfillsOrError.results.length > 0 ? (\n          <Box margin={{top: 16}}>\n            <CursorPaginationControls {...paginationProps} />\n          </Box>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 12, horizontal: 20}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>{button}</div>\n          {activeFiltersJsx}\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {content()}\n    </>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($status: BulkActionStatus, $cursor: String, $limit: Int) {\n    partitionBackfillsOrError(status: $status, cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {Box, Button, Dialog, DialogFooter, DialogHeader, Icon} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton = () => {\n  const {allRepos, visibleRepos, toggleVisible} = useContext(WorkspaceContext);\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        outlined\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {OperationVariables, useApolloClient} from '@apollo/client';\nimport {DocumentNode} from 'graphql';\nimport {useEffect, useMemo, useState} from 'react';\n\nimport {useRefreshAtInterval} from '../app/QueryRefresh';\n\ntype FetchResult<DataType, CursorType, ErrorType> = {\n  data: DataType[];\n  hasMore: boolean;\n  cursor: CursorType | undefined;\n  error: ErrorType | undefined;\n};\n\ntype FetcherFunction<DataType, CursorType, ErrorType> = (\n  cursor: CursorType | undefined,\n) => Promise<FetchResult<DataType, CursorType, ErrorType>>;\n\nclass AccumulatingDataFetcher<DataType, CursorType, ErrorType> {\n  private fetchData: FetcherFunction<DataType, CursorType, ErrorType>;\n  private onData: (data: DataType[]) => void;\n  private onError?: (error: ErrorType) => void;\n\n  private hasMoreData = true;\n  private dataSoFar: DataType[] = [];\n  private currentCursor: CursorType | undefined = undefined;\n  private fetchPromise?: Promise<void>;\n  private stopped: boolean = false;\n\n  constructor({\n    fetchData,\n    onData,\n    onError,\n  }: {\n    fetchData: FetcherFunction<DataType, CursorType, ErrorType>;\n    onData: (data: DataType[]) => void;\n    onError?: (error: ErrorType) => void;\n  }) {\n    this.fetchData = fetchData;\n    this.onData = onData;\n    this.onError = onError;\n  }\n\n  fetch = async () => {\n    if (this.fetchPromise) {\n      return await this.fetchPromise;\n    }\n    this.fetchPromise = new Promise(async (res) => {\n      // make at least one request\n      this.hasMoreData = true;\n\n      // continue requesting with updated cursors + accumulating data until\n      // stop() is called or hasMore=false.\n      while (this.hasMoreData && !this.stopped) {\n        const {cursor, hasMore, data, error} = await this.fetchData(this.currentCursor);\n        if (this.stopped) {\n          break;\n        }\n        if (error) {\n          this.onError?.(error);\n          break;\n        }\n        this.currentCursor = cursor;\n        this.hasMoreData = hasMore;\n        if (data.length > 0) {\n          this.dataSoFar = this.dataSoFar.concat(data);\n          this.onData(this.dataSoFar);\n        }\n      }\n      res();\n    });\n    const result = await this.fetchPromise!;\n    this.fetchPromise = undefined;\n    return result;\n  };\n\n  stop = () => {\n    this.stopped = true;\n  };\n}\n\nexport function useCursorAccumulatedQuery<\n  TQuery,\n  TVars extends OperationVariables & {cursor?: CursorType},\n  DataType,\n  ErrorType = unknown,\n  CursorType = TVars['cursor'],\n>({\n  query,\n  variables,\n  getResult,\n}: {\n  query: DocumentNode;\n  variables: Omit<TVars, 'cursor'>;\n  getResult: (responseData: TQuery) => FetchResult<DataType, CursorType, ErrorType>;\n}) {\n  const [fetched, setFetched] = useState<DataType[] | null>(null);\n  const [error, setError] = useState<ErrorType | null>(null);\n  const client = useApolloClient();\n\n  const {stop, fetch} = useMemo(() => {\n    return new AccumulatingDataFetcher({\n      fetchData: async (cursor) => {\n        const resp = await client.query<TQuery, TVars>({\n          variables: {...variables, cursor} as TVars,\n          query,\n        });\n        return getResult(resp.data);\n      },\n      onData: setFetched,\n      onError: setError,\n    });\n  }, [client, query, variables, getResult]);\n\n  useEffect(() => {\n    return stop;\n  }, [stop]);\n\n  const refreshState = useRefreshAtInterval({\n    refresh: fetch,\n    intervalMs: 10000,\n    leading: true,\n  });\n\n  return {fetched, error, refreshState};\n}\n","import {gql} from '@apollo/client';\nimport {Box, NonIdealState, Spinner} from '@dagster-io/ui-components';\nimport React, {useMemo} from 'react';\n\nimport {BackfillLogsPageQuery, BackfillLogsPageQueryVariables} from './types/BackfillLogsTab.types';\nimport {BackfillDetailsBackfillFragment} from './types/BackfillPage.types';\nimport {QueryRefreshCountdown} from '../../app/QueryRefresh';\nimport {useCursorAccumulatedQuery} from '../../runs/useCursorAccumulatedQuery';\nimport {\n  INSTIGATION_EVENT_LOG_FRAGMENT,\n  InstigationEventLogTable,\n} from '../../ticks/InstigationEventLogTable';\nimport {InstigationEventLogFragment} from '../../ticks/types/InstigationEventLogTable.types';\n\nconst getResultForBackfillLogsPage = (e: BackfillLogsPageQuery) => {\n  if (e.partitionBackfillOrError.__typename === 'PartitionBackfill') {\n    const {events, hasMore, cursor} = e.partitionBackfillOrError.logEvents;\n    return {data: events, hasMore, cursor, error: undefined};\n  } else {\n    return {data: [], hasMore: false, error: e.partitionBackfillOrError, cursor: undefined};\n  }\n};\n\nexport const BackfillLogsTab = ({backfill}: {backfill: BackfillDetailsBackfillFragment}) => {\n  const {\n    error,\n    fetched: events,\n    refreshState,\n  } = useCursorAccumulatedQuery<\n    BackfillLogsPageQuery,\n    BackfillLogsPageQueryVariables,\n    InstigationEventLogFragment,\n    {message: string}\n  >({\n    query: BACKFILL_LOGS_PAGE_QUERY,\n    variables: useMemo(() => ({backfillId: backfill.id}), [backfill]),\n    getResult: getResultForBackfillLogsPage,\n  });\n\n  const content = () => {\n    if (error) {\n      <Box flex={{justifyContent: 'center', alignItems: 'center'}} style={{flex: 1}}>\n        <NonIdealState title=\"Unable to fetch logs\" description={error.message} />\n      </Box>;\n    }\n    if (events === null) {\n      return (\n        <Box flex={{justifyContent: 'center', alignItems: 'center'}} style={{flex: 1}}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (events.length === 0) {\n      return (\n        <Box flex={{justifyContent: 'center', alignItems: 'center'}} style={{flex: 1}}>\n          <NonIdealState\n            title=\"No logs available\"\n            description=\"If backfill log storage is enabled, logs will appear as they are emitted by the backfill daemon.\"\n          />\n        </Box>\n      );\n    }\n    return <InstigationEventLogTable events={events} />;\n  };\n  return (\n    <>\n      <div style={{position: 'absolute', right: 16, top: -32}}>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </div>\n      {content()}\n    </>\n  );\n};\n\nexport const BACKFILL_LOGS_PAGE_QUERY = gql`\n  query BackfillLogsPageQuery($backfillId: String!, $cursor: String) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      __typename\n      ... on PythonError {\n        message\n      }\n      ... on BackfillNotFoundError {\n        message\n      }\n      ... on PartitionBackfill {\n        id\n        logEvents(cursor: $cursor) {\n          ... on InstigationEventConnection {\n            cursor\n            hasMore\n            events {\n              ...InstigationEventLog\n            }\n          }\n        }\n      }\n    }\n  }\n  ${INSTIGATION_EVENT_LOG_FRAGMENT}\n`;\n","import {gql, useApolloClient} from '@apollo/client';\nimport {Box, ButtonLink, Colors, NonIdealState, Table, Tag} from '@dagster-io/ui-components';\nimport React from 'react';\nimport {Link, useHistory} from 'react-router-dom';\n\nimport {BackfillDetailsBackfillFragment} from './types/BackfillPage.types';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {asAssetKeyInput} from '../../assets/asInput';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {AssetViewParams} from '../../assets/types';\nimport {AssetKey, RunStatus} from '../../graphql/types';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\nimport {\n  BackfillPartitionsForAssetKeyQuery,\n  BackfillPartitionsForAssetKeyQueryVariables,\n} from '../backfill/types/BackfillPage.types';\n\nexport const BackfillPartitionsTab = ({backfill}: {backfill: BackfillDetailsBackfillFragment}) => {\n  const client = useApolloClient();\n  const history = useHistory();\n\n  function getRunsUrl(status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n    const filters: RunFilterToken[] = [\n      {\n        token: 'tag',\n        value: `dagster/backfill=${backfill.id}`,\n      },\n    ];\n    switch (status) {\n      case 'inProgress':\n        filters.push(\n          {\n            token: 'status',\n            value: RunStatus.STARTED,\n          },\n          {\n            token: 'status',\n            value: RunStatus.QUEUED,\n          },\n          {\n            token: 'status',\n            value: RunStatus.STARTING,\n          },\n          {\n            token: 'status',\n            value: RunStatus.CANCELING,\n          },\n          {\n            token: 'status',\n            value: RunStatus.NOT_STARTED,\n          },\n        );\n        break;\n      case 'complete':\n        filters.push({\n          token: 'status',\n          value: RunStatus.SUCCESS,\n        });\n        break;\n      case 'failed':\n        filters.push({\n          token: 'status',\n          value: RunStatus.FAILURE,\n        });\n        filters.push({\n          token: 'status',\n          value: RunStatus.CANCELED,\n        });\n        break;\n    }\n    return runsPathWithFilters(filters);\n  }\n\n  const onShowAssetDetails = async (assetKey: AssetKey, isPartitioned: boolean) => {\n    let params: AssetViewParams = {};\n\n    if (isPartitioned) {\n      const resp = await client.query<\n        BackfillPartitionsForAssetKeyQuery,\n        BackfillPartitionsForAssetKeyQueryVariables\n      >({\n        query: BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY,\n        variables: {backfillId: backfill.id, assetKey: asAssetKeyInput(assetKey)},\n      });\n      const data =\n        resp.data.partitionBackfillOrError.__typename === 'PartitionBackfill'\n          ? resp.data.partitionBackfillOrError.partitionsTargetedForAssetKey\n          : null;\n\n      if (data && data.ranges?.length) {\n        params = {default_range: data.ranges.map((r) => `[${r.start}...${r.end}]`).join(',')};\n      }\n    }\n    return history.push(assetDetailsPathForKey(assetKey, params));\n  };\n\n  if (!backfill.assetBackfillData?.assetBackfillStatuses.length) {\n    return (\n      <Box margin={48}>\n        <NonIdealState\n          title=\"Partition statuses unavailable\"\n          description=\"Dagster was unable to load per-partition statuses. This may occur if the backfilled assets or jobs no longer exist in your loaded code locations.\"\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '50%'}}>Asset name</th>\n          <th>\n            <Link to={getRunsUrl('targeted')}>Partitions targeted</Link>\n          </th>\n          <th>\n            <Link to={getRunsUrl('inProgress')}>In progress</Link>\n          </th>\n          <th>\n            <Link to={getRunsUrl('complete')}>Completed</Link>\n          </th>\n          <th>\n            <Link to={getRunsUrl('failed')}>Failed</Link>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {backfill.assetBackfillData?.assetBackfillStatuses.map((asset) => {\n          let targeted;\n          let inProgress;\n          let completed;\n          let failed;\n          if (asset.__typename === 'AssetPartitionsStatusCounts') {\n            targeted = asset.numPartitionsTargeted;\n            inProgress = asset.numPartitionsInProgress;\n            completed = asset.numPartitionsMaterialized;\n            failed = asset.numPartitionsFailed;\n          } else {\n            targeted = 1;\n            failed = asset.failed ? 1 : 0;\n            inProgress = asset.inProgress ? 1 : 0;\n            completed = asset.materialized ? 1 : 0;\n          }\n          return (\n            <tr\n              key={tokenForAssetKey(asset.assetKey)}\n              data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n            >\n              <td>\n                <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                  <div>\n                    <ButtonLink\n                      onClick={() =>\n                        onShowAssetDetails(\n                          asset.assetKey,\n                          asset.__typename === 'AssetPartitionsStatusCounts',\n                        )\n                      }\n                    >\n                      {asset.assetKey.path.join('/')}\n                    </ButtonLink>\n                  </div>\n                  <div>\n                    <StatusBar\n                      targeted={targeted}\n                      inProgress={inProgress}\n                      completed={completed}\n                      failed={failed}\n                    />\n                  </div>\n                </Box>\n              </td>\n              {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n                <>\n                  <td>{targeted}</td>\n                  <td>{inProgress}</td>\n                  <td>{completed}</td>\n                  <td>{failed}</td>\n                </>\n              ) : (\n                <>\n                  <td>-</td>\n                  <td>\n                    {inProgress ? (\n                      <Tag icon=\"spinner\" intent=\"primary\">\n                        In progress\n                      </Tag>\n                    ) : (\n                      '-'\n                    )}\n                  </td>\n                  <td>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</td>\n                  <td>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</td>\n                </>\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n};\n\nexport const BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY = gql`\n  query BackfillPartitionsForAssetKey($backfillId: String!, $assetKey: AssetKeyInput!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionsTargetedForAssetKey(assetKey: $assetKey) {\n          partitionKeys\n          ranges {\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.backgroundLight(),\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.accentGreen()}} />\n      <div style={{background: Colors.accentRed()}} />\n      <div style={{background: Colors.accentBlue()}} />\n    </div>\n  );\n}\n","import {Box, useViewport} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {RunStatusDot} from '../../runs/RunStatusDots';\nimport {\n  CONSTANTS,\n  RunChunk,\n  RunChunks,\n  RunsEmptyOrLoading,\n  TimeDividers,\n  TimelineRowContainer,\n  TimelineRun,\n} from '../../runs/RunTimeline';\nimport {TimeElapsed} from '../../runs/TimeElapsed';\nimport {RunBatch, batchRunsForTimeline} from '../../runs/batchRunsForTimeline';\nimport {mergeStatusToBackground} from '../../runs/mergeStatusToBackground';\nimport {Container, Inner} from '../../ui/VirtualizedTable';\n\nconst {DATE_TIME_HEIGHT, ONE_HOUR_MSEC, EMPTY_STATE_HEIGHT, LEFT_SIDE_SPACE_ALLOTTED} = CONSTANTS;\n\ntype Props = {\n  loading?: boolean;\n  runs: TimelineRun[];\n  rangeMs: [number, number];\n  annotations: {label: string; ms: number}[];\n  now: number;\n};\n\nexport const ExecutionTimeline = (props: Props) => {\n  const {loading = false, runs, rangeMs, annotations, now} = props;\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const {\n    viewport: {width, height},\n    containerProps: {ref: measureRef},\n  } = useViewport();\n\n  const rowVirtualizer = useVirtualizer({\n    count: runs.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (_: number) => 32,\n    overscan: 40,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  if (!width) {\n    return <div style={{height: DATE_TIME_HEIGHT + EMPTY_STATE_HEIGHT}} ref={measureRef} />;\n  }\n\n  return (\n    <>\n      <Box\n        padding={{left: 24}}\n        border=\"bottom\"\n        flex={{direction: 'column', justifyContent: 'center'}}\n        style={{\n          fontSize: '16px',\n          flex: `0 0 ${DATE_TIME_HEIGHT}px`,\n        }}\n      />\n      <div style={{position: 'relative'}}>\n        <TimeDividers\n          now={now}\n          interval={rangeMs[1] - rangeMs[0] > ONE_HOUR_MSEC * 4 ? ONE_HOUR_MSEC : ONE_HOUR_MSEC / 6}\n          rangeMs={rangeMs}\n          annotations={annotations}\n          height={runs.length > 0 ? height : 0}\n        />\n      </div>\n      {runs.length ? (\n        <div ref={measureRef} style={{overflow: 'hidden', position: 'relative'}}>\n          <Container ref={parentRef}>\n            <Inner $totalHeight={totalHeight}>\n              {items.map(({index, key, size, start}) => (\n                <ExecutionTimelineRow\n                  key={key}\n                  run={runs[index]!}\n                  top={start}\n                  height={size}\n                  range={rangeMs}\n                  width={width}\n                />\n              ))}\n            </Inner>\n          </Container>\n        </div>\n      ) : (\n        <div ref={measureRef}>\n          <RunsEmptyOrLoading loading={loading} includesTicks={false} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport const ExecutionTimelineRow = ({\n  run,\n  top,\n  height,\n  range,\n  width: containerWidth,\n}: {\n  run: TimelineRun;\n  top: number;\n  height: number;\n  range: [number, number];\n  width: number;\n}) => {\n  const [start, end] = range;\n  const width = containerWidth - LEFT_SIDE_SPACE_ALLOTTED;\n\n  const chunk = React.useMemo(() => {\n    const batches: RunBatch<TimelineRun>[] = batchRunsForTimeline({\n      runs: [run],\n      start,\n      end,\n      width,\n      minChunkWidth: 4,\n      minMultipleWidth: 4,\n    });\n\n    return batches[0];\n  }, [run, start, end, width]);\n\n  return (\n    <TimelineRowContainer $height={height} $start={top}>\n      <Box\n        style={{width: LEFT_SIDE_SPACE_ALLOTTED}}\n        padding={{horizontal: 24}}\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n      >\n        <Box flex={{alignItems: 'center', gap: 4}}>\n          <RunStatusDot status={run.status} size={12} />\n          <Link to={`/runs/${run.id}`}>{run.id.slice(0, 8)}</Link>\n        </Box>\n        <TimeElapsed startUnix={run.startTime / 1000} endUnix={run.endTime / 1000} />\n      </Box>\n      <RunChunks>\n        {chunk && (\n          <RunChunk\n            $background={mergeStatusToBackground(chunk.runs)}\n            $multiple={false}\n            style={{\n              left: `${chunk.left}px`,\n              width: `${chunk.width}px`,\n            }}\n          />\n        )}\n      </RunChunks>\n    </TimelineRowContainer>\n  );\n};\n","import {\n  Box,\n  Button,\n  ButtonGroup,\n  Colors,\n  CursorHistoryControls,\n  ErrorBoundary,\n  NonIdealState,\n  Spinner,\n} from '@dagster-io/ui-components';\nimport React, {useDeferredValue, useMemo} from 'react';\n\nimport {ExecutionTimeline} from './ExecutionTimeline';\nimport {BackfillDetailsBackfillFragment} from './types/BackfillPage.types';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../../app/QueryRefresh';\nimport {RunsFilter} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useTimelineRange} from '../../overview/OverviewTimelineRoot';\nimport {RunTable} from '../../runs/RunTable';\nimport {DagsterTag} from '../../runs/RunTag';\nimport {usePaginatedRunsTableRuns} from '../../runs/RunsRoot';\nimport {HourWindow} from '../../runs/useHourWindow';\nimport {useRunsForTimeline} from '../../runs/useRunsForTimeline';\nimport {StickyTableContainer} from '../../ui/StickyTableContainer';\n\nconst BACKFILL_RUNS_HOUR_WINDOW_KEY = 'dagster.backfill-run-timeline-hour-window';\n\nexport const BackfillRunsTab = ({backfill}: {backfill: BackfillDetailsBackfillFragment}) => {\n  const [view, setView] = useQueryPersistedState<'timeline' | 'list'>({\n    defaults: {view: 'timeline'},\n    queryKey: 'view',\n  });\n\n  const {rangeMs, hourWindow, setHourWindow, onPageEarlier, onPageLater, onPageNow} =\n    useTimelineRange({\n      maxNowMs: backfill.endTimestamp ? backfill.endTimestamp * 1000 : undefined,\n      hourWindowStorageKey: BACKFILL_RUNS_HOUR_WINDOW_KEY,\n      lookaheadHours: 0.1, // no ticks, so miminal \"future\" needed\n    });\n\n  const filter: RunsFilter = useMemo(\n    () => ({tags: [{key: DagsterTag.Backfill, value: backfill.id}]}),\n    [backfill],\n  );\n\n  const annotations = useMemo(\n    () =>\n      backfill.endTimestamp\n        ? [\n            {ms: backfill.timestamp * 1000, label: 'Start'},\n            {ms: backfill.endTimestamp * 1000, label: 'End'},\n          ]\n        : [{ms: backfill.timestamp * 1000, label: 'Start'}],\n    [backfill.timestamp, backfill.endTimestamp],\n  );\n\n  const actionBarComponents = (\n    <Box flex={{direction: 'row', gap: 16}} style={{position: 'sticky', top: 0}}>\n      <ButtonGroup\n        activeItems={new Set([view])}\n        onClick={(id: 'timeline' | 'list') => {\n          setView(id);\n        }}\n        buttons={[\n          {id: 'timeline', icon: 'gantt_waterfall', label: 'Timeline'},\n          {id: 'list', icon: 'list', label: 'List'},\n        ]}\n      />\n      <div style={{flex: 1}} />\n      {view === 'timeline' && (\n        <ButtonGroup<HourWindow>\n          activeItems={new Set([hourWindow])}\n          buttons={[\n            {id: '1', label: '1hr'},\n            {id: '6', label: '6hr'},\n            {id: '12', label: '12hr'},\n            {id: '24', label: '24hr'},\n          ]}\n          onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n        />\n      )}\n      {view === 'timeline' && (\n        <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n          <Button onClick={onPageEarlier}>&larr;</Button>\n          <Button onClick={onPageNow}>{backfill.endTimestamp ? 'Jump to End' : 'Now'}</Button>\n          <Button onClick={onPageLater}>&rarr;</Button>\n        </Box>\n      )}\n    </Box>\n  );\n\n  return view === 'timeline' ? (\n    <ExecutionRunTimeline\n      filter={filter}\n      rangeMs={rangeMs}\n      annotations={annotations}\n      actionBarComponents={actionBarComponents}\n    />\n  ) : (\n    <ExecutionRunTable filter={filter} actionBarComponents={actionBarComponents} />\n  );\n};\n\nconst ExecutionRunTable = ({\n  filter,\n  actionBarComponents,\n}: {\n  filter: RunsFilter;\n  actionBarComponents: React.ReactNode;\n}) => {\n  const {queryResult, paginationProps} = usePaginatedRunsTableRuns(filter);\n  const pipelineRunsOrError = queryResult.data?.pipelineRunsOrError;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 15000);\n\n  if (!pipelineRunsOrError) {\n    return (\n      <Box padding={{vertical: 48}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n  if (pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState icon=\"error\" title=\"Query Error\" description={pipelineRunsOrError.message} />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'absolute', right: 16, top: -32}}>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </div>\n      <Box style={{flex: 1, overflowY: 'auto'}}>\n        <StickyTableContainer $top={56}>\n          <RunTable\n            runs={pipelineRunsOrError.results}\n            actionBarComponents={actionBarComponents}\n            actionBarSticky\n          />\n          {pipelineRunsOrError.results.length > 0 ? (\n            <Box margin={{vertical: 16}}>\n              <CursorHistoryControls {...paginationProps} />\n            </Box>\n          ) : null}\n        </StickyTableContainer>\n      </Box>\n    </>\n  );\n};\n\nconst ExecutionRunTimeline = ({\n  rangeMs,\n  annotations,\n  filter,\n  actionBarComponents,\n}: {\n  rangeMs: [number, number];\n  annotations: {label: string; ms: number}[];\n  filter: RunsFilter; // note: must be memoized\n  actionBarComponents: React.ReactNode;\n}) => {\n  const runsForTimelineRet = useRunsForTimeline({\n    refreshInterval: 2 * FIFTEEN_SECONDS,\n    showTicks: false,\n    rangeMs,\n    filter,\n  });\n\n  // Use deferred value to allow paginating quickly with the UI feeling more responsive.\n  const {jobs, loading} = useDeferredValue(runsForTimelineRet);\n\n  // Unwrap the timeline to show runs on separate rows, and sort them explicitly by\n  // newest => oldest so that they match what you see in the \"List\" tab.\n  const job = jobs[0];\n  const {runs, now} = React.useMemo(() => {\n    const now = Date.now();\n    return job\n      ? {runs: [...job.runs].sort((a, b) => b.startTime - a.startTime), now}\n      : {runs: [], now};\n  }, [job]);\n\n  return (\n    <>\n      <div style={{position: 'absolute', right: 16, top: -32}}>\n        <QueryRefreshCountdown refreshState={runsForTimelineRet.refreshState} />\n      </div>\n      <Box\n        padding={{horizontal: 24, vertical: 12}}\n        style={{position: 'sticky', top: 0, zIndex: 2, background: Colors.backgroundDefault()}}\n        border=\"bottom\"\n      >\n        {actionBarComponents}\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <ExecutionTimeline\n          loading={loading}\n          rangeMs={rangeMs}\n          annotations={annotations}\n          runs={runs}\n          now={now}\n        />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  Tab,\n  Tabs,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport {useContext, useEffect, useReducer} from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT, BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillLogsTab} from './BackfillLogsTab';\nimport {BackfillPartitionsTab} from './BackfillPartitionsTab';\nimport {BackfillRunsTab} from './BackfillRunsTab';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {TargetPartitionsDisplay} from './TargetPartitionsDisplay';\nimport {\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n} from './types/BackfillPage.types';\nimport {CloudOSSContext} from '../../app/CloudOSSContext';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {BulkActionStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useBlockTraceOnQueryResult} from '../../performance/TraceContext';\nimport {testId} from '../../testing/testId';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const {featureContext} = useContext(CloudOSSContext);\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'partitions' | 'logs' | 'runs'>({\n    queryKey: 'tab',\n    defaults: {tab: 'partitions'},\n  });\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {variables: {backfillId}},\n  );\n  useBlockTraceOnQueryResult(queryResult, 'BackfillStatusesByAssetQuery');\n\n  const {data, error} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition selection\"\n            detail={\n              <TargetPartitionsDisplay\n                targetPartitionCount={backfill.numPartitions || 0}\n                targetPartitions={backfill.assetBackfillData?.rootTargetedPartitions}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<BackfillStatusTagForPage backfill={backfill} />} />\n        </Box>\n        <Box padding={{left: 24}} border=\"bottom\">\n          <Tabs size=\"large\" selectedTabId={selectedTab}>\n            <Tab id=\"partitions\" title=\"Partitions\" onClick={() => setSelectedTab('partitions')} />\n            <Tab id=\"runs\" title=\"Runs\" onClick={() => setSelectedTab('runs')} />\n            {featureContext.canSeeBackfillCoordinatorLogs ? (\n              <Tab id=\"logs\" title=\"Coordinator logs\" onClick={() => setSelectedTab('logs')} />\n            ) : null}\n          </Tabs>\n        </Box>\n\n        {error?.graphQLErrors && (\n          <Alert intent=\"error\" title={error.graphQLErrors.map((err) => err.message)} />\n        )}\n        <Box\n          flex={{direction: 'column'}}\n          style={{flex: 1, position: 'relative', minHeight: 0, overflowY: 'scroll'}}\n        >\n          {selectedTab === 'partitions' && <BackfillPartitionsTab backfill={backfill} />}\n          {selectedTab === 'runs' && <BackfillRunsTab backfill={backfill} />}\n          {selectedTab === 'logs' && <BackfillLogsTab backfill={backfill} />}\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: Colors.textLight()}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Box>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nconst Label = styled.div`\n  color: ${Colors.textLight()};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = useReducer((s: number, _: any) => s + 1, 0);\n  useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...BackfillDetailsBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment BackfillDetailsBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    ...BackfillActionsBackfillFragment\n\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootTargetedPartitions {\n        partitionKeys\n        ranges {\n          start\n          end\n        }\n      }\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n\nexport const BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY = gql`\n  query BackfillPartitionsForAssetKey($backfillId: String!, $assetKey: AssetKeyInput!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionsTargetedForAssetKey(assetKey: $assetKey) {\n          partitionKeys\n          ranges {\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n} from './types/OverviewSchedules.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {WorkspaceLocationNodeFragment} from '../workspace/types/WorkspaceQueries.types';\n\nexport const OverviewSchedules = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n  useBlockTraceOnQueryResult(queryResultOverview, 'OverviewSchedulesQuery');\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, cachedData, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const loading = workspaceLoading && !repoCount && queryLoading && !data;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<\n        OverviewSchedulesQuery['workspaceOrError'],\n        {__typename: 'Workspace'}\n      >['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedSensorHeader checkbox={headerCheckbox} />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            if (type === 'header') {\n              return (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.sensorCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              );\n            }\n\n            const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n            return (\n              <VirtualizedSensorRow\n                key={key}\n                name={row.sensor.name}\n                sensorState={row.sensor.sensorState}\n                showCheckboxColumn={!!headerCheckbox}\n                checked={checkedKeys.has(sensorKey)}\n                onToggleChecked={onToggleCheckFactory(sensorKey)}\n                repoAddress={row.repoAddress}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewSensorsQuery, OverviewSensorsQueryVariables} from './types/OverviewSensors.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {SensorType} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {SENSOR_TYPE_META} from '../workspace/VirtualizedSensorRow';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {WorkspaceLocationNodeFragment} from '../workspace/types/WorkspaceQueries.types';\n\nfunction toSetFilterValue(type: SensorType) {\n  const label = SENSOR_TYPE_META[type].name;\n  return {\n    label,\n    value: {type, label},\n    match: [label],\n  };\n}\n\nconst SENSOR_TYPE_TO_FILTER: Partial<Record<SensorType, ReturnType<typeof toSetFilterValue>>> = {\n  [SensorType.ASSET]: toSetFilterValue(SensorType.ASSET),\n  [SensorType.AUTO_MATERIALIZE]: toSetFilterValue(SensorType.AUTO_MATERIALIZE),\n  [SensorType.AUTOMATION]: toSetFilterValue(SensorType.AUTOMATION),\n  [SensorType.FRESHNESS_POLICY]: toSetFilterValue(SensorType.FRESHNESS_POLICY),\n  [SensorType.MULTI_ASSET]: toSetFilterValue(SensorType.MULTI_ASSET),\n  [SensorType.RUN_STATUS]: toSetFilterValue(SensorType.RUN_STATUS),\n  [SensorType.STANDARD]: toSetFilterValue(SensorType.STANDARD),\n};\nconst ALL_SENSOR_TYPE_FILTERS = Object.values(SENSOR_TYPE_TO_FILTER);\n\nexport const OverviewSensors = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const [sensorTypes, setSensorTypes] = useQueryPersistedState<Set<SensorType>>({\n    encode: (vals) => ({sensorType: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.sensorType?.split(',') as SensorType[]) || []),\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n  const sensorTypeFilter = useStaticSetFilter({\n    name: 'Sensor type',\n    allValues: ALL_SENSOR_TYPE_FILTERS,\n    icon: 'sensors',\n    getStringValue: (value) => value.label,\n    state: useMemo(() => {\n      return new Set(Array.from(sensorTypes).map((type) => SENSOR_TYPE_TO_FILTER[type]!.value));\n    }, [sensorTypes]),\n\n    renderLabel: ({value}) => <span>{value.label}</span>,\n    onStateChanged: (state) => {\n      setSensorTypes(new Set(Array.from(state).map((value) => value.type)));\n    },\n  });\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n    [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n\n  useBlockTraceOnQueryResult(queryResultOverview, 'OverviewSensorsQuery');\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, cachedData, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: sensors.filter(({sensorState, sensorType}) => {\n          if (runningState.size && !runningState.has(sensorState.status)) {\n            return false;\n          }\n          if (sensorTypes.size && !sensorTypes.has(sensorType)) {\n            return false;\n          }\n          return true;\n        }),\n      };\n    });\n  }, [repoBuckets, runningState, sensorTypes]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const loading = workspaceLoading && queryLoading && !data;\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n          <Tooltip\n            content=\"You do not have permission to start or stop these schedules\"\n            canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n            placement=\"top-end\"\n            useDisabledButtonTooltipFix\n          >\n            <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n          </Tooltip>\n        </Box>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </>\n  );\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<\n        OverviewSensorsQuery['workspaceOrError'],\n        {__typename: 'Workspace'}\n      >['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n) => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {useCallback, useMemo} from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagster.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n  storageKey = HOUR_WINDOW_KEY,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(storageKey, validate);\n  const setHourWindowWithDefault = useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return useMemo(\n    () => [hourWindow, setHourWindowWithDefault],\n    [hourWindow, setHourWindowWithDefault],\n  );\n};\n","import {Box, Button, ButtonGroup, ErrorBoundary, TextInput} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {useDeferredValue} from 'react';\n\nimport {RefreshState} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {usePageLoadTrace} from '../performance';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {HourWindow, useHourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 30 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: RefreshState}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\n\nexport function useTimelineRange({\n  maxNowMs,\n  hourWindowStorageKey,\n  lookaheadHours = LOOKAHEAD_HOURS,\n}: {\n  maxNowMs?: number;\n  hourWindowStorageKey?: string;\n  lookaheadHours?: number;\n}) {\n  const [hourWindow, setHourWindow] = useHourWindow('12', hourWindowStorageKey);\n  const [now, setNow] = React.useState(() => maxNowMs || Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n\n  const rangeMs: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + lookaheadHours * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, lookaheadHours, offsetMsec],\n  );\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setNow(maxNowMs ? Math.min(maxNowMs, Date.now()) : Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow, maxNowMs]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  return {rangeMs, hourWindow, setHourWindow, onPageEarlier, onPageLater, onPageNow};\n}\n\nexport const OverviewTimelineRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n  const trace = usePageLoadTrace('OverviewTimelineRoot');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const {rangeMs, hourWindow, setHourWindow, onPageEarlier, onPageLater, onPageNow} =\n    useTimelineRange({});\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const runsForTimelineRet = useRunsForTimeline({rangeMs});\n\n  // Use deferred value to allow paginating quickly with the UI feeling more responsive.\n  const {jobs, loading, refreshState} = useDeferredValue(runsForTimelineRet);\n\n  React.useEffect(() => {\n    if (!loading) {\n      trace.endTrace();\n    }\n  }, [loading, trace]);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(\n    () => jobs.filter(({key}) => visibleJobKeys.has(key)),\n    [jobs, visibleJobKeys],\n  );\n\n  return (\n    <>\n      <Header refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          {TabButton && <TabButton selected=\"timeline\" />}\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={loading} rangeMs={rangeMs} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {cache} from 'idb-lru-cache';\n\ntype TimeWindow<T> = {start: number; end: number; data: T[]};\n\nexport const ONE_HOUR_S = 60 * 60;\n\ntype Subscription<T> = (data: T[]) => void;\n\nexport const defaultOptions = {\n  expiry: new Date('3030-01-01'), // never expire,\n};\n\nexport class HourlyDataCache<T> {\n  private cache: Map<number, Array<TimeWindow<T>>> = new Map();\n  private subscriptions: Array<{hour: number; callback: Subscription<T>}> = [];\n  private indexedDBCache?: ReturnType<typeof cache<string, typeof this.cache>>;\n  private indexedDBKey: string;\n\n  /**\n   * @param id A unique ID for the hourly data cache in this deployment\n   * @param [keyPrefix=''] A unique key identifying the timeline view [incorporating filters, etc.]\n   */\n  constructor(id?: string | false, keyPrefix = '', keyMaxCount = 1) {\n    this.indexedDBKey = keyPrefix ? `${keyPrefix}-hourlyData` : 'hourlyData';\n\n    // Delete old database from before the prefix, remove this at some point\n    indexedDB.deleteDatabase('HourlyDataCache:useRunsForTimeline');\n\n    if (id) {\n      this.indexedDBCache = cache<string, typeof this.cache>({\n        dbName: `HourlyDataCache:${id}`,\n        maxCount: keyMaxCount,\n      });\n      this.loadCacheFromIndexedDB();\n      this.clearOldEntries();\n    }\n  }\n\n  loadPromise: Promise<void> | undefined;\n\n  public async loadCacheFromIndexedDB() {\n    if (!this.indexedDBCache) {\n      return;\n    }\n    if (this.loadPromise) {\n      return await this.loadPromise;\n    }\n    this.loadPromise = new Promise(async (res) => {\n      if (!this.indexedDBCache) {\n        return;\n      }\n      if (!(await this.indexedDBCache.has(this.indexedDBKey))) {\n        res();\n        return;\n      }\n      const cachedData = await this.indexedDBCache.get(this.indexedDBKey);\n      if (cachedData) {\n        this.cache = new Map(cachedData.value);\n      }\n      res();\n    });\n    return await this.loadPromise;\n  }\n\n  private saveTimeout?: ReturnType<typeof setTimeout>;\n  private registeredUnload: boolean = false;\n  private async saveCacheToIndexedDB() {\n    if (typeof jest !== 'undefined') {\n      if (!this.indexedDBCache) {\n        return;\n      }\n      this.indexedDBCache.set(this.indexedDBKey, this.cache, defaultOptions);\n      return;\n    }\n    clearTimeout(this.saveTimeout);\n    this.saveTimeout = setTimeout(() => {\n      if (!this.indexedDBCache) {\n        return;\n      }\n      this.indexedDBCache.set(this.indexedDBKey, this.cache, defaultOptions);\n    }, 10000);\n    if (!this.registeredUnload) {\n      this.registeredUnload = true;\n      window.addEventListener('beforeunload', () => {\n        if (!this.indexedDBCache) {\n          return;\n        }\n        this.indexedDBCache.set(this.indexedDBKey, this.cache, defaultOptions);\n      });\n    }\n  }\n\n  public async clearOldEntries() {\n    const oneWeekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\n    const hour = Math.floor(oneWeekAgo / (ONE_HOUR_S * 1000));\n\n    await this.loadCacheFromIndexedDB();\n    for (const ts of this.cache.keys()) {\n      if (ts < hour) {\n        this.cache.delete(ts);\n      }\n    }\n  }\n\n  /**\n   * Adds data to the cache for the specified time range.\n   * @param start - The start time in seconds.\n   * @param end - The end time in seconds.\n   * @param data - The data to cache.\n   */\n  addData(start: number, end: number, data: T[]): void {\n    const startHour = Math.floor(start / ONE_HOUR_S);\n    const endHour = Math.floor(end / ONE_HOUR_S);\n\n    if (endHour - startHour > 1) {\n      throw new Error('Expected all data to fit within an hour');\n    }\n\n    this.addPartialData(startHour, start, end, data);\n    this.notifySubscribers(startHour);\n    this.saveCacheToIndexedDB();\n  }\n\n  /**\n   * Adds data to the partial cache for a specific hour.\n   * @param hour - The hour for which to add data.\n   * @param start - The start time in seconds.\n   * @param end - The end time in seconds.\n   * @param data - The data to cache.\n   */\n  private addPartialData(hour: number, start: number, end: number, data: T[]): void {\n    if (!this.cache.has(hour)) {\n      this.cache.set(hour, []);\n    }\n    this.cache.get(hour)!.push({start, end, data});\n    this.cache.set(hour, this.mergeIntervals(this.cache.get(hour)!));\n  }\n\n  /**\n   * Retrieves the data for a specific hour.\n   * @param s - The time in seconds.\n   * @returns The data for the specified hour.\n   */\n  getHourData(s: number): T[] {\n    const hour = Math.floor(s / ONE_HOUR_S);\n    if (this.cache.has(hour)) {\n      return this.cache.get(hour)!.flatMap((interval) => interval.data);\n    }\n    return [];\n  }\n\n  /**\n   * Returns the missing ranges for a specific hour.\n   * @param s - The time in seconds.\n   * @returns An array of missing ranges for the specified hour.\n   */\n  getMissingIntervals(s: number): Array<[number, number]> {\n    const hour = Math.floor(s / ONE_HOUR_S);\n    if (\n      this.cache.has(hour) &&\n      this.cache.get(hour)!.length === 1 &&\n      this.cache.get(hour)![0]!.end - this.cache.get(hour)![0]!.start === ONE_HOUR_S\n    ) {\n      return [];\n    }\n\n    const missingIntervals: Array<[number, number]> = [];\n    const hourStart = hour * ONE_HOUR_S;\n    const hourEnd = (hour + 1) * ONE_HOUR_S;\n    let currentStart = hourStart;\n\n    if (this.cache.has(hour)) {\n      for (const {start: cachedStart, end: cachedEnd} of this.cache.get(hour)!) {\n        if (cachedStart > currentStart) {\n          missingIntervals.push([currentStart, cachedStart]);\n        }\n        currentStart = Math.max(currentStart, cachedEnd);\n      }\n    }\n\n    if (currentStart < hourEnd) {\n      missingIntervals.push([currentStart, hourEnd]);\n    }\n\n    return missingIntervals;\n  }\n\n  /**\n   * Checks if a range is completely cached.\n   * @param start - The start time in seconds.\n   * @param end - The end time in seconds.\n   * @returns True if the range is completely cached, false otherwise.\n   */\n  isCompleteRange(start: number, end: number): boolean {\n    const startHour = Math.floor(start / ONE_HOUR_S);\n    const endHour = Math.floor(end / ONE_HOUR_S);\n\n    if (endHour - startHour > 1) {\n      throw new Error('Expected the input range to be within a single hour');\n    }\n\n    if (this.cache.has(startHour)) {\n      const intervals = this.cache.get(startHour)!;\n      let currentStart = start;\n\n      for (const {start: cachedStart, end: cachedEnd} of intervals) {\n        if (cachedStart > currentStart) {\n          return false;\n        }\n        if (cachedEnd >= end) {\n          return true;\n        }\n        currentStart = Math.max(currentStart, cachedEnd);\n      }\n\n      return currentStart >= end;\n    }\n\n    return false;\n  }\n\n  /**\n   * Merges overlapping intervals.\n   * @param intervals - The intervals to merge.\n   * @returns An array of merged intervals.\n   */\n  private mergeIntervals(intervals: Array<TimeWindow<T>>): Array<TimeWindow<T>> {\n    if (intervals.length === 0) {\n      return [];\n    }\n\n    intervals.sort((a, b) => a.start - b.start);\n    const mergedIntervals: Array<TimeWindow<T>> = [intervals[0]!];\n\n    for (const current of intervals.slice(1)) {\n      const lastMerged = mergedIntervals[mergedIntervals.length - 1]!;\n\n      if (current.start <= lastMerged.end) {\n        lastMerged.end = Math.max(lastMerged.end, current.end);\n        lastMerged.data = lastMerged.data.concat(current.data);\n      } else {\n        mergedIntervals.push(current);\n      }\n    }\n\n    return mergedIntervals;\n  }\n\n  /**\n   * Subscribes to data added to a specific hourly bucket and subsequent hours.\n   * @param startHour - The hour bucket to subscribe to.\n   * @param callback - The callback function to notify when new data is added.\n   */\n  subscribe(ts: number, callback: Subscription<T>) {\n    const startHour = Math.floor(ts / ONE_HOUR_S);\n    const sub = {hour: startHour, callback};\n    this.subscriptions.push(sub);\n    this.notifyExistingData(startHour, callback);\n\n    return () => {\n      this.subscriptions = this.subscriptions.filter((subB) => subB !== sub);\n    };\n  }\n\n  /**\n   * Notifies subscribers of new data added to a specific hour and subsequent hours.\n   * @param hour - The hour bucket to notify subscribers of.\n   * @param data - The new data added.\n   */\n  private notifySubscribers(hour: number): void {\n    for (const {hour: subHour, callback} of this.subscriptions) {\n      if (hour >= subHour) {\n        const combinedData = this.getCombinedData(subHour);\n        callback(combinedData);\n      }\n    }\n  }\n\n  /**\n   * Notifies a new subscriber of all existing data for the subscribed hour and subsequent hours.\n   * @param startHour - The starting hour for the subscription.\n   * @param callback - The callback function to notify with existing data.\n   */\n  private notifyExistingData(startHour: number, callback: Subscription<T>): void {\n    const combinedData = this.getCombinedData(startHour);\n    if (combinedData.length > 0) {\n      callback(combinedData);\n    }\n  }\n\n  /**\n   * Combines data from the given hour and subsequent hours.\n   * @param startHour - The starting hour.\n   * @returns Combined data.\n   */\n  private getCombinedData(startHour: number): T[] {\n    let combinedData: T[] = [];\n    for (const [hour, intervals] of this.cache) {\n      if (hour >= startHour) {\n        combinedData = combinedData.concat(intervals.flatMap((interval) => interval.data));\n      }\n    }\n    return combinedData;\n  }\n}\n\n/**\n * Breaks a time range into hourly buckets.\n * @param startTime - The start time in seconds.\n * @param endTime - The end time in seconds.\n * @returns An array of [start, end] pairs representing each hourly bucket.\n */\nexport function getHourlyBuckets(startTime: number, endTime: number): [number, number][] {\n  const buckets: [number, number][] = [];\n\n  // Convert start and end times to the number of hours since epoch\n  const startHour = Math.floor(startTime / ONE_HOUR_S) * ONE_HOUR_S;\n\n  // Handle the first partial bucket\n  if (startTime !== startHour) {\n    const firstBucketEnd = startHour + ONE_HOUR_S;\n    buckets.push([startTime, Math.min(firstBucketEnd, endTime)]);\n  }\n\n  // Add full hourly buckets\n  let currentStart = startHour + (startTime === startHour ? 0 : ONE_HOUR_S);\n  while (currentStart + ONE_HOUR_S <= endTime) {\n    const nextHour = currentStart + ONE_HOUR_S;\n    buckets.push([currentStart, nextHour]);\n    currentStart = nextHour;\n  }\n\n  // Handle the last partial bucket\n  if (currentStart < endTime) {\n    buckets.push([currentStart, endTime]);\n  }\n\n  return buckets;\n}\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {QueryResult, gql, useApolloClient} from '@apollo/client';\nimport {useCallback, useContext, useLayoutEffect, useMemo, useRef, useState} from 'react';\n\nimport {HourlyDataCache, getHourlyBuckets} from './HourlyDataCache/HourlyDataCache';\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {fetchPaginatedBucketData, fetchPaginatedData} from './fetchPaginatedBucketData';\nimport {\n  CompletedRunTimelineQuery,\n  CompletedRunTimelineQueryVariables,\n  FutureTicksQuery,\n  FutureTicksQueryVariables,\n  OngoingRunTimelineQuery,\n  OngoingRunTimelineQueryVariables,\n  RunTimelineFragment,\n} from './types/useRunsForTimeline.types';\nimport {AppContext} from '../app/AppContext';\nimport {FIFTEEN_SECONDS, useRefreshAtInterval} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {InstigationStatus, RunStatus, RunsFilter} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {useBlockTraceOnQueryResult, useBlockTraceUntilTrue} from '../performance/TraceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nconst BATCH_LIMIT = 500;\n\nexport const useRunsForTimeline = ({\n  rangeMs,\n  filter,\n  batchLimit = BATCH_LIMIT,\n  refreshInterval = 2 * FIFTEEN_SECONDS,\n  showTicks = true,\n}: {\n  rangeMs: readonly [number, number];\n  filter?: RunsFilter;\n  refreshInterval?: number;\n  batchLimit?: number;\n  showTicks?: boolean;\n}) => {\n  const runsFilter = useMemo(() => {\n    return filter ?? {};\n  }, [filter]);\n  const [start, _end] = rangeMs;\n  const end = useMemo(() => {\n    return Math.min(Date.now(), _end);\n  }, [_end]);\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const buckets = useMemo(() => getHourlyBuckets(startSec, endSec), [startSec, endSec]);\n\n  const client = useApolloClient();\n\n  const {localCacheIdPrefix} = useContext(AppContext);\n  const completedRunsCache = useMemo(() => {\n    if (filter) {\n      return new HourlyDataCache<RunTimelineFragment>(\n        localCacheIdPrefix ? `${localCacheIdPrefix}-useRunsForTimeline-filtered` : false,\n        JSON.stringify(filter),\n        3,\n      );\n    }\n    return new HourlyDataCache<RunTimelineFragment>(\n      localCacheIdPrefix ? `${localCacheIdPrefix}-useRunsForTimeline` : false,\n    );\n  }, [filter, localCacheIdPrefix]);\n  const [completedRuns, setCompletedRuns] = useState<RunTimelineFragment[]>([]);\n\n  useLayoutEffect(() => {\n    // Fetch runs matching:\n    // 1. updatedAfter (startSec) -> updatedBefore (endSec)\n    // 2. updatedAfter (endSec) -> createdBefore (endSec).\n    // For (2) we rely on the fact that runs are fetched in adjacent intervals from \"now\" going backwards\n    // so we can assume a future bucket that is being or was fetched will have the runs we need.\n    return completedRunsCache.subscribe(startSec, (runs) => {\n      setCompletedRuns(\n        runs.filter(\n          (run) =>\n            (run.startTime! <= endSec && run.updateTime! >= endSec) ||\n            (run.updateTime! >= startSec && run.updateTime! <= endSec),\n        ),\n      );\n    });\n  }, [completedRunsCache, end, endSec, startSec]);\n\n  const [completedRunsQueryData, setCompletedRunsData] = useState<{\n    // TODO: Remove data property here since we grab the data from the cache instead of here.\n    data: RunTimelineFragment[] | undefined;\n    loading: boolean;\n    error: any;\n    called: boolean;\n  }>({\n    data: undefined,\n    loading: true,\n    error: undefined,\n    called: false,\n  });\n  const [ongoingRunsQueryData, setOngoingRunsData] = useState<{\n    data: RunTimelineFragment[] | undefined;\n    loading: boolean;\n    error: any;\n    called: boolean;\n  }>({\n    data: undefined,\n    loading: true,\n    error: undefined,\n    called: false,\n  });\n\n  const {data: ongoingRunsData} = ongoingRunsQueryData;\n\n  const [didLoadCache, setDidLoadCache] = useState(false);\n  useBlockTraceUntilTrue('IndexedDBCache', didLoadCache);\n\n  const fetchCompletedRunsQueryData = useCallback(async () => {\n    await completedRunsCache.loadCacheFromIndexedDB();\n    setDidLoadCache(true);\n\n    return await fetchPaginatedBucketData({\n      buckets: buckets\n        .filter((bucket) => !completedRunsCache.isCompleteRange(bucket[0], bucket[1]))\n        .map((bucket) => {\n          let updatedAfter = bucket[0];\n          let updatedBefore = bucket[1];\n          const missingRange = completedRunsCache.getMissingIntervals(updatedAfter);\n          if (missingRange[0]) {\n            // When paginating backwards the missing range will be at the beginning of the hour\n            // When looking the current time the missing range will be at the end of the hour\n            updatedAfter = Math.max(missingRange[0][0], updatedAfter);\n            updatedBefore = Math.min(missingRange[0][1], updatedBefore);\n          }\n          return [updatedAfter, updatedBefore] as [number, number];\n        }),\n      setQueryData: setCompletedRunsData,\n      async fetchData(bucket, cursor: string | undefined) {\n        const updatedBefore = bucket[1];\n        const updatedAfter = bucket[0];\n\n        if (completedRunsCache.isCompleteRange(updatedAfter, updatedBefore) && !cursor) {\n          // If there's a cursor then that means the current range is being paginated so\n          // it is not complete even though there is some data for the time range\n\n          return {\n            // TODO: Remove data property here\n            data: [],\n            cursor: undefined,\n            hasMore: false,\n            error: undefined,\n          };\n        }\n\n        const {data} = await client.query<\n          CompletedRunTimelineQuery,\n          CompletedRunTimelineQueryVariables\n        >({\n          query: COMPLETED_RUN_TIMELINE_QUERY,\n          notifyOnNetworkStatusChange: true,\n          fetchPolicy: 'no-cache',\n          variables: {\n            completedFilter: {\n              ...runsFilter,\n              statuses: Array.from(doneStatuses),\n              updatedBefore,\n              updatedAfter,\n            },\n            cursor,\n            limit: batchLimit,\n          },\n        });\n\n        if (data.completed.__typename !== 'Runs') {\n          return {\n            data: [],\n            cursor: undefined,\n            hasMore: false,\n            error: data.completed,\n          };\n        }\n        const runs: RunTimelineFragment[] = data.completed.results;\n        completedRunsCache.addData(updatedAfter, updatedBefore, runs);\n\n        const hasMoreData = runs.length === batchLimit;\n        const nextCursor = hasMoreData ? runs[runs.length - 1]!.id : undefined;\n\n        return {\n          data: [],\n          cursor: nextCursor,\n          hasMore: hasMoreData,\n          error: undefined,\n        };\n      },\n    });\n  }, [batchLimit, buckets, client, completedRunsCache, runsFilter]);\n\n  // If the user paginates backwards quickly then there will be multiple outstanding fetches\n  // but we only want the most recent fetch to change loading back to false.\n  // fetchIdRef will help us tell if this fetch is the most recent fetch.\n  const fetchIdRef = useRef(0);\n  const ongoingRunFetchIdRef = useRef(0);\n  const futureTicksFetchIdRef = useRef(0);\n  const fetchOngoingRunsQueryData = useCallback(async () => {\n    const id = ++ongoingRunFetchIdRef.current;\n    setOngoingRunsData(({data}) => ({\n      data, // preserve existing data\n      loading: true,\n      called: true,\n      error: undefined,\n    }));\n    try {\n      const data = await fetchPaginatedData({\n        async fetchData(cursor: string | undefined) {\n          const {data} = await client.query<\n            OngoingRunTimelineQuery,\n            OngoingRunTimelineQueryVariables\n          >({\n            query: ONGOING_RUN_TIMELINE_QUERY,\n            notifyOnNetworkStatusChange: true,\n            fetchPolicy: 'no-cache',\n            variables: {\n              inProgressFilter: {\n                ...runsFilter,\n                statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n              },\n              cursor,\n              limit: batchLimit,\n            },\n          });\n\n          if (data.ongoing.__typename !== 'Runs') {\n            return {\n              data: [],\n              cursor: undefined,\n              hasMore: false,\n              error: data.ongoing,\n            };\n          }\n          const runs = data.ongoing.results;\n          const hasMoreData = runs.length === batchLimit;\n          const nextCursor = hasMoreData ? runs[runs.length - 1]!.id : undefined;\n          return {\n            data: runs,\n            cursor: nextCursor,\n            hasMore: hasMoreData,\n            error: undefined,\n          };\n        },\n      });\n      if (ongoingRunFetchIdRef.current === id) {\n        setOngoingRunsData({\n          data,\n          loading: false,\n          called: true,\n          error: undefined,\n        });\n      }\n    } catch (e) {\n      if (ongoingRunFetchIdRef.current === id) {\n        setOngoingRunsData(({data}) => ({\n          data, // preserve existing data\n          loading: false,\n          called: true,\n          error: e,\n        }));\n      }\n    }\n  }, [client, runsFilter, batchLimit]);\n\n  const [futureTicksQueryData, setFutureTicksQueryData] = useState<\n    Pick<QueryResult<FutureTicksQuery>, 'data' | 'error' | 'called' | 'loading'>\n  >({data: undefined, called: true, loading: true, error: undefined});\n\n  const fetchFutureTicks = useCallback(async () => {\n    const id = ++futureTicksFetchIdRef.current;\n    const queryData = await client.query<FutureTicksQuery, FutureTicksQueryVariables>({\n      query: FUTURE_TICKS_QUERY,\n      variables: showTicks\n        ? {tickCursor: startSec, ticksUntil: _end / 1000.0}\n        : {tickCursor: startSec, ticksUntil: startSec},\n      fetchPolicy: 'no-cache',\n    });\n    if (id === futureTicksFetchIdRef.current) {\n      setFutureTicksQueryData({...queryData, called: true});\n    }\n  }, [startSec, _end, client, showTicks]);\n\n  useBlockTraceOnQueryResult(ongoingRunsQueryData, 'OngoingRunTimelineQuery');\n  useBlockTraceUntilTrue('CompletedRunTimelineQuery', !completedRunsQueryData.loading);\n\n  const {data: futureTicksData} = futureTicksQueryData;\n\n  const {workspaceOrError} = futureTicksData || {workspaceOrError: undefined};\n\n  const [loading, setLoading] = useState(true);\n\n  const previousRunsByJobKey = useRef<{\n    jobInfo: Record<string, {repoAddress: RepoAddress; pipelineName: string; isAdHoc: boolean}>;\n    runsByJobKey: {\n      [jobKey: string]: {\n        [id: string]: TimelineRun;\n      };\n    };\n  }>({jobInfo: {}, runsByJobKey: {}});\n  const {runsByJobKey, jobInfo} = useMemo(() => {\n    if (loading) {\n      // While we're loading data just keep returning the last result so that we're not\n      // re-rendering 24+ times while we populate the cache asynchronously via our batching/chunking.\n      return previousRunsByJobKey.current;\n    }\n    const jobInfo: Record<\n      string,\n      {repoAddress: RepoAddress; pipelineName: string; isAdHoc: boolean}\n    > = {};\n    const map: {\n      [jobKey: string]: {\n        [id: string]: TimelineRun;\n      };\n    } = {};\n    const now = Date.now();\n\n    function saveRunInfo(run: (typeof completedRuns)[0]) {\n      if (run.startTime === null) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = map[runJobKey] || {};\n      map[runJobKey]![run.id] = {\n        id: run.id,\n        status: run.status,\n        startTime: run.startTime * 1000,\n        endTime: run.endTime ? run.endTime * 1000 : now,\n      };\n      if (!jobInfo[runJobKey] && run.repositoryOrigin) {\n        const pipelineName = run.pipelineName;\n        const isAdHoc = isHiddenAssetGroupJob(pipelineName);\n\n        const repoAddress = buildRepoAddress(\n          run.repositoryOrigin!.repositoryName,\n          run.repositoryOrigin!.repositoryLocationName,\n        );\n        jobInfo[runJobKey] = {\n          repoAddress,\n          isAdHoc,\n          pipelineName,\n        };\n      }\n    }\n\n    // fetch all the runs in the given range\n    completedRuns.forEach(saveRunInfo);\n    ongoingRunsData?.forEach(saveRunInfo);\n    const current = {jobInfo, runsByJobKey: map};\n    previousRunsByJobKey.current = current;\n    return current;\n  }, [loading, ongoingRunsData, completedRuns]);\n\n  const jobsWithCompletedRunsAndOngoingRuns = useMemo(() => {\n    const jobs: Record<string, TimelineJob> = {};\n    if (!Object.keys(runsByJobKey).length) {\n      return jobs;\n    }\n\n    Object.entries(runsByJobKey).forEach(([jobKey, jobRunsInfo]) => {\n      const runs = Object.values(jobRunsInfo);\n      const info = jobInfo[jobKey];\n      if (!info) {\n        return;\n      }\n\n      const {pipelineName, isAdHoc, repoAddress} = info;\n\n      jobs[jobKey] = {\n        key: jobKey,\n        jobName: isAdHoc ? 'Ad hoc materializations' : pipelineName,\n        jobType: isAdHoc ? 'asset' : 'job',\n        repoAddress,\n        path: workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName,\n          isJob: true,\n        }),\n        runs,\n      } as TimelineJob;\n    });\n\n    return jobs;\n  }, [jobInfo, runsByJobKey]);\n\n  const jobsWithCompletedRunsAndOngoingRunsValues = useMemo(() => {\n    return Object.values(jobsWithCompletedRunsAndOngoingRuns);\n  }, [jobsWithCompletedRunsAndOngoingRuns]);\n\n  const unsortedJobs: TimelineJob[] = useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename === 'PythonError' || _end < Date.now()) {\n      return jobsWithCompletedRunsAndOngoingRunsValues;\n    }\n    const addedAdHocJobs = new Set();\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        !locationEntry.locationOrLoadError ||\n        locationEntry.locationOrLoadError?.__typename === 'PythonError'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (\n                  startTime > now &&\n                  overlap({start, end: _end}, {start: startTime, end: startTime})\n                ) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n\n          if (isAdHoc) {\n            if (addedAdHocJobs.has(jobKey)) {\n              continue;\n            }\n            addedAdHocJobs.add(jobKey);\n          }\n\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = Object.values(runsByJobKey[jobKey] || {});\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const runs = [...jobRuns, ...jobTicks];\n\n          let job = jobsWithCompletedRunsAndOngoingRuns[jobKey];\n          if (job) {\n            job = {\n              ...job,\n              runs,\n            };\n          } else {\n            job = {\n              key: jobKey,\n              jobName,\n              jobType: isAdHoc ? 'asset' : 'job',\n              repoAddress,\n              path: workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: pipeline.name,\n                isJob: pipeline.isJob,\n              }),\n              runs,\n            } as TimelineJob;\n          }\n\n          jobs.push(job);\n        }\n      }\n    }\n    return jobs;\n    // Don't add start/end time as a dependency here since it changes often.\n    // Instead rely on the underlying runs changing in response to start/end changing\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    workspaceOrError,\n    jobsWithCompletedRunsAndOngoingRunsValues,\n    runsByJobKey,\n    jobsWithCompletedRunsAndOngoingRuns,\n  ]);\n\n  const jobsWithRuns = useMemo(() => {\n    const earliest = unsortedJobs.reduce(\n      (accum, job) => {\n        const startTimes = job.runs.map((job) => job.startTime);\n        accum[job.key] = Math.min(...startTimes);\n        return accum;\n      },\n      {} as {[jobKey: string]: number},\n    );\n\n    return unsortedJobs.sort((a, b) => earliest[a.key]! - earliest[b.key]!);\n  }, [unsortedJobs]);\n\n  const lastFetchRef = useRef({ongoing: 0, future: 0});\n  const lastRangeMs = useRef([0, 0] as readonly [number, number]);\n  if (Math.abs(lastRangeMs.current[0] - rangeMs[0]) > 30000) {\n    lastFetchRef.current.future = 0;\n  }\n  lastRangeMs.current = rangeMs;\n\n  const refreshState = useRefreshAtInterval({\n    refresh: useCallback(async () => {\n      const loadId = ++fetchIdRef.current;\n      setLoading(true);\n      await Promise.all([\n        // Only fetch ongoing runs once every 30 seconds\n        (async () => {\n          if (lastFetchRef.current.ongoing < Date.now() - 30 * 1000) {\n            await fetchOngoingRunsQueryData();\n            lastFetchRef.current.ongoing = Date.now();\n          }\n        })(),\n        // Only fetch future ticks once a minute\n        (async () => {\n          // If the the time range is in the past then future ticks are not visible on the timeline\n          if (_end > Date.now() && lastFetchRef.current.future < Date.now() - 60 * 1000) {\n            fetchFutureTicks();\n          }\n        })(),\n        fetchCompletedRunsQueryData(),\n      ]);\n      if (loadId === fetchIdRef.current) {\n        setLoading(false);\n      }\n    }, [fetchCompletedRunsQueryData, fetchFutureTicks, fetchOngoingRunsQueryData, _end]),\n    intervalMs: refreshInterval,\n    leading: true,\n  });\n\n  return {\n    jobs: jobsWithRuns,\n    loading,\n    refreshState,\n  };\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${isHiddenAssetGroupJob(jobName) ? '__adhoc__' : jobName}-${repoAddressAsHumanString(\n    repoAddress,\n  )}`;\n\nconst RUN_TIMELINE_FRAGMENT = gql`\n  fragment RunTimelineFragment on Run {\n    id\n    pipelineName\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n    ...RunTimeFragment\n  }\n  ${RUN_TIME_FRAGMENT}\n`;\n\nexport const ONGOING_RUN_TIMELINE_QUERY = gql`\n  query OngoingRunTimelineQuery($inProgressFilter: RunsFilter!, $limit: Int!, $cursor: String) {\n    ongoing: runsOrError(filter: $inProgressFilter, limit: $limit, cursor: $cursor) {\n      ... on Runs {\n        results {\n          id\n          ...RunTimelineFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIMELINE_FRAGMENT}\n`;\n\nexport const COMPLETED_RUN_TIMELINE_QUERY = gql`\n  query CompletedRunTimelineQuery($completedFilter: RunsFilter!, $limit: Int!, $cursor: String) {\n    completed: runsOrError(filter: $completedFilter, limit: $limit, cursor: $cursor) {\n      ... on Runs {\n        results {\n          id\n          ...RunTimelineFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIMELINE_FRAGMENT}\n`;\n\nexport const FUTURE_TICKS_QUERY = gql`\n  query FutureTicksQuery($tickCursor: Float, $ticksUntil: Float) {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          name\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n"],"names":["InstanceAutomaterializationEvaluationHistoryTable","queryResult","setSelectedTick","setTableView","setTimerange","setParentStatuses","param","statuses","setStatuses","useQueryPersistedState","queryKey","decode","useCallback","Set","JSON","parse","InstigationTickStatus","STARTED","SUCCESS","FAILURE","SKIPPED","encode","stringify","Array","from","raw","paginationProps","useCursorPaginatedQuery","query","ASSET_DAEMON_TICKS_QUERY","variables","useMemo","nextCursorForResult","ticks","data","autoMaterializeTicks","length","PAGE_SIZE","id","getResultArray","pageSize","useQueryRefreshAtInterval","hasPrevCursor","useEffect","start","timestamp","end","endTimestamp","undefined","jsx_runtime","jsx","AutomaterializationEvaluationHistoryTable","loading","GlobalAutomaterializationContent","automaterialize","useAutomaterializeDaemonStatus","confirm","useConfirmation","permissions","canToggleAutoMaterialize","useUnscopedPermissions","isPaused","setIsPaused","useState","timeRange","getVariables","now","Date","afterTimestamp","beforeTimestamp","TWENTY_MINUTES","fetch","useLazyQuery","refresh","useBlockTraceOnQueryResult","useRefreshAtInterval","enabled","intervalMs","leading","selectedTick","tableView","view","cursor","previousData","allTicks","map","tick","index","nextTick","isStuckStartedTick","copy","status","concat","onHoverTick","jsxs","Fragment","Box","padding","vertical","horizontal","flex","direction","gap","Alert","intent","title","description","a","href","target","rel","Table","tbody","tr","td","Spinner","purpose","Checkbox","format","checked","paused","disabled","onChange","e","setPaused","border","Subtitle2","LiveTickTimeline","onSelectTick","exactRange","tickGrid","timeAfter","AutomaterializationTickDetailDialog","isOpen","close","AutomaterializeRunHistoryTable","justifyContent","alignItems","div","style","color","Colors","labelForBackfillStatus","key","BulkActionStatus","CANCELED","CANCELING","COMPLETED","FAILED","REQUESTED","backfillStatusValues","Object","keys","label","value","match","InstanceBackfills","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","statusState","setStatusState","vals","size","join","qs","split","statusFilter","useStaticSetFilter","name","icon","allValues","allowMultipleSelections","closeOnSelect","renderLabel","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","getStringValue","state","onStateChanged","button","activeFiltersJsx","useFilters","filters","BACKFILLS_QUERY","result","partitionBackfillsOrError","__typename","results","refreshState","FIFTEEN_SECONDS","QueryRefreshCountdown","content","PythonErrorInfo","error","NonIdealState","backfillHealths","daemonHealths","instance","daemonHealth","allDaemonStatuses","filter","daemon","daemonType","required","healthy","isBackfillHealthy","every","x","DaemonNotRunningAlertBody","BackfillTable","backfills","slice","refetch","margin","top","CursorPaginationControls","gql","INSTANCE_HEALTH_FRAGMENT","PYTHON_ERROR_FRAGMENT","BACKFILL_TABLE_FRAGMENT","RepoFilterButton","allRepos","visibleRepos","toggleVisible","useContext","WorkspaceContext","open","setOpen","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","Dialog","canOutsideClickClose","canEscapeKeyClose","width","onClose","DialogHeader","RepoSelector","options","onBrowse","onToggle","selected","DialogFooter","Button","onClick","outlined","Icon","rightIcon","AccumulatingDataFetcher","constructor","fetchData","onData","onError","hasMoreData","dataSoFar","currentCursor","stopped","fetchPromise","Promise","res","hasMore","_this_onError","call","stop","getResultForBackfillLogsPage","partitionBackfillOrError","events","logEvents","BackfillLogsTab","backfill","fetched","useCursorAccumulatedQuery","getResult","setFetched","setError","client","useApolloClient","resp","BACKFILL_LOGS_PAGE_QUERY","backfillId","position","right","message","InstigationEventLogTable","INSTIGATION_EVENT_LOG_FRAGMENT","BackfillPartitionsTab","history","useHistory","getRunsUrl","token","push","RunStatus","QUEUED","STARTING","NOT_STARTED","runsPathWithFilters","onShowAssetDetails","assetKey","isPartitioned","params","BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY","asAssetKeyInput","partitionsTargetedForAssetKey","ranges","default_range","r","assetDetailsPathForKey","assetBackfillData","assetBackfillStatuses","thead","th","Link","to","targeted","inProgress","completed","failed","asset","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","data-testid","testId","tokenForAssetKey","ButtonLink","path","StatusBar","Tag","borderRadius","backgroundColor","display","gridTemplateColumns","gridTemplateRows","height","overflow","background","DATE_TIME_HEIGHT","ONE_HOUR_MSEC","EMPTY_STATE_HEIGHT","LEFT_SIDE_SPACE_ALLOTTED","CONSTANTS","ExecutionTimeline","runs","rangeMs","annotations","props","parentRef","React","viewport","containerProps","ref","measureRef","useViewport","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","left","fontSize","TimeDividers","interval","Container","Inner","$totalHeight","ExecutionTimelineRow","run","range","RunsEmptyOrLoading","includesTicks","containerWidth","chunk","batches","batchRunsForTimeline","minChunkWidth","minMultipleWidth","TimelineRowContainer","$height","$start","RunStatusDot","TimeElapsed","startUnix","startTime","endUnix","endTime","RunChunks","RunChunk","$background","mergeStatusToBackground","$multiple","BackfillRunsTab","setView","defaults","hourWindow","setHourWindow","onPageEarlier","onPageLater","onPageNow","useTimelineRange","maxNowMs","hourWindowStorageKey","lookaheadHours","tags","DagsterTag","Backfill","ms","actionBarComponents","ButtonGroup","activeItems","buttons","hrWindow","ExecutionRunTimeline","ExecutionRunTable","usePaginatedRunsTableRuns","pipelineRunsOrError","overflowY","StickyTableContainer","$top","RunTable","actionBarSticky","CursorHistoryControls","runsForTimelineRet","useRunsForTimeline","refreshInterval","showTicks","jobs","useDeferredValue","job","sort","b","zIndex","ErrorBoundary","region","dayjs","duration","relativeTime","BackfillPage","featureContext","CloudOSSContext","useParams","selectedTab","setSelectedTab","tab","BACKFILL_DETAILS_QUERY","isInProgress","includes","PageHeader","Heading","BackfillActionsMenu","canCancelRuns","wrap","Detail","detail","Timestamp","Number","timeFormat","showSeconds","showTimezone","Duration","TargetPartitionsDisplay","targetPartitionCount","numPartitions","targetPartitions","rootTargetedPartitions","BackfillStatusTagForPage","Tabs","selectedTabId","Tab","canSeeBackfillCoordinatorLogs","graphQLErrors","err","minHeight","minWidth","Label","styled","withConfig","_","rerender","useReducer","s","intervalId","setInterval","clearInterval","span","formatDuration","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","minutes","Math","floor","hours","days","trim","OverviewScheduleTable","repos","headerCheckbox","checkedKeys","onToggleCheckFactory","allKeys","repoAddress","repoAddressAsHumanString","expandedKeys","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","forEach","schedules","type","scheduleCount","repoKey","schedule","duplicateRepoNames","findDuplicateRepoNames","row","ii","VirtualizedScheduleHeader","checkbox","RepoRow","expanded","showLocation","has","rightElement","Tooltip","placement","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","scheduleState","showCheckboxColumn","onToggleChecked","OverviewSchedules","workspaceLoading","cachedData","repoCount","searchValue","setSearchValue","search","codeLocationFilter","useCodeLocationFilter","runningStateFilter","useInstigationStatusFilter","filterButton","queryResultOverview","OVERVIEW_SCHEDULES_QUERY","fetchPolicy","notifyOnNetworkStatusChange","queryLoading","repoBuckets","visibleKeys","visibleRepoKeys","cachedEntries","values","location","workspaceOrError","buildBuckets","locationEntries","runningState","filteredBuckets","rest","sanitizedSearch","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","checkedIds","onToggleFactory","useSelectionReducer","permissionedKeysOnScreen","filteredKeys","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","showSearchSpinner","TextInput","SearchInputSpinner","tooltipContent","placeholder","canShow","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","SchedulerInfo","paddingTop","anyReposHidden","CheckAllBox","totalCount","strong","entries","entry","locationOrLoadError","buckets","repo","repositories","buildRepoAddress","scheduleNames","sortRepoBuckets","BASIC_INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","sensorState","toSetFilterValue","SENSOR_TYPE_META","SENSOR_TYPE_TO_FILTER","SensorType","ASSET","AUTO_MATERIALIZE","AUTOMATION","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","STANDARD","ALL_SENSOR_TYPE_FILTERS","OverviewSensors","sensorTypes","setSensorTypes","sensorType","sensorTypeFilter","OVERVIEW_SENSORS_QUERY","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","grow","SensorBulkActionMenu","SensorInfo","useHourWindow","defaultValue","storageKey","validate","useStateWithStorage","setHourWindowWithDefault","hourWindowToOffset","setNow","offsetMsec","setOffsetMsec","timer","min","OverviewTimelineRoot","Header","TabButton","trace","usePageLoadTrace","endTrace","visibleJobKeys","searchLower","flatMap","repository","repositoryLocation","pipelines","makeJobKey","visibleJobs","RunTimeline","aString","bString","localeCompare","option","defaultOptions","expiry","HourlyDataCache","loadCacheFromIndexedDB","indexedDBCache","loadPromise","indexedDBKey","get","cache","Map","saveCacheToIndexedDB","jest","set","clearTimeout","saveTimeout","setTimeout","registeredUnload","window","addEventListener","clearOldEntries","hour","oneWeekAgo","ONE_HOUR_S","ts","delete","addData","startHour","endHour","addPartialData","notifySubscribers","mergeIntervals","getHourData","getMissingIntervals","missingIntervals","hourStart","hourEnd","currentStart","cachedStart","cachedEnd","max","isCompleteRange","intervals","mergedIntervals","lastMerged","subscribe","callback","sub","subscriptions","notifyExistingData","subB","subHour","getCombinedData","combinedData","keyPrefix","keyMaxCount","indexedDB","deleteDatabase","dbName","maxCount","SCHEDULE_FUTURE_TICKS_FRAGMENT","batchLimit","runsFilter","_end","startSec","endSec","getHourlyBuckets","nextHour","localCacheIdPrefix","AppContext","completedRunsCache","completedRuns","setCompletedRuns","useLayoutEffect","updateTime","completedRunsQueryData","setCompletedRunsData","called","ongoingRunsQueryData","setOngoingRunsData","ongoingRunsData","didLoadCache","setDidLoadCache","useBlockTraceUntilTrue","fetchCompletedRunsQueryData","fetchPaginatedBucketData","bucket","updatedAfter","updatedBefore","missingRange","setQueryData","COMPLETED_RUN_TIMELINE_QUERY","completedFilter","doneStatuses","limit","fetchIdRef","useRef","ongoingRunFetchIdRef","futureTicksFetchIdRef","fetchOngoingRunsQueryData","fetchPaginatedData","ONGOING_RUN_TIMELINE_QUERY","inProgressFilter","ongoing","nextCursor","futureTicksQueryData","setFutureTicksQueryData","fetchFutureTicks","FUTURE_TICKS_QUERY","tickCursor","ticksUntil","futureTicksData","setLoading","previousRunsByJobKey","jobInfo","runsByJobKey","saveRunInfo","repositoryOrigin","runJobKey","repositoryName","repositoryLocationName","pipelineName","isAdHoc","isHiddenAssetGroupJob","jobsWithCompletedRunsAndOngoingRuns","jobKey","jobRunsInfo","info","jobName","jobType","workspacePipelinePath","repoName","repoLocation","isJob","jobsWithCompletedRunsAndOngoingRunsValues","unsortedJobs","addedAdHocJobs","locationEntry","pipeline","jobTicks","InstigationStatus","RUNNING","futureTicks","overlap","add","jobRuns","jobsWithRuns","earliest","reduce","accum","startTimes","lastFetchRef","future","lastRangeMs","abs","loadId","all","RUN_TIMELINE_FRAGMENT","RUN_TIME_FRAGMENT"],"sourceRoot":""}