{"version":3,"file":"static/chunks/1872.b018d3024677fae2.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/assets/auto-materialization/AssetDaemonTicksQuery.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationTickDetailDialog.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializeRunHistoryTable.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillStepStatusDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillTerminationDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillActionsMenu.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillRow.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillStatusTagForPage.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPartitionsRequestedDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillTable.tsx","webpack://_N_E/../ui-core/src/instigation/LiveTickTimeline2.tsx","webpack://_N_E/../ui-core/src/instigation/TickHistory.tsx","webpack://_N_E/../ui-core/src/instigation/filterPermissionedInstigationState.tsx","webpack://_N_E/../ui-core/src/instigation/instigationStateSummary.tsx","webpack://_N_E/../ui-core/src/instigation/useInstigationStateReducer.tsx","webpack://_N_E/../ui-core/src/instigation/util.ts","webpack://_N_E/../ui-core/src/overview/OverviewExpansionKey.tsx","webpack://_N_E/../ui-core/src/partitions/PartitionRunList.tsx","webpack://_N_E/../ui-core/src/partitions/PartitionStepStatus.tsx","webpack://_N_E/../ui-core/src/partitions/RunMatrixUtils.tsx","webpack://_N_E/../ui-core/src/hooks/useThrottledMemo.tsx","webpack://_N_E/../ui-core/src/partitions/useMatrixData.tsx","webpack://_N_E/../ui-core/src/partitions/usePartitionStepQuery.tsx","webpack://_N_E/../ui-core/src/runs/RunTimeline.tsx","webpack://_N_E/../ui-core/src/runs/batchRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/runs/mergeStatusToBackground.tsx","webpack://_N_E/../ui-core/src/schedules/ScheduleStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/schedules/ScheduleBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulerInfo.tsx","webpack://_N_E/../ui-core/src/schedules/makeScheduleKey.tsx","webpack://_N_E/../ui-core/src/sensors/SensorStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/sensors/SensorBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/sensors/SensorMonitoredAssets.tsx","webpack://_N_E/../ui-core/src/sensors/SensorResetButton.tsx","webpack://_N_E/../ui-core/src/ticks/DynamicPartitionRequests.tsx","webpack://_N_E/../ui-core/src/ticks/SensorDryRunDialog.tsx","webpack://_N_E/../ui-core/src/sensors/SensorDetails.tsx","webpack://_N_E/../ui-core/src/sensors/SensorInfo.tsx","webpack://_N_E/../ui-core/src/sensors/SensorFragment.tsx","webpack://_N_E/../ui-core/src/sensors/AssetSensorTicksQuery.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/SensorAutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/sensors/SensorPageAutomaterialize.tsx","webpack://_N_E/../ui-core/src/sensors/SensorPreviousRuns.tsx","webpack://_N_E/../ui-core/src/sensors/SensorRoot.tsx","webpack://_N_E/../ui-components/src/components/DisclosureTriangleButton.tsx","webpack://_N_E/../ui-core/src/sensors/SensorTargetList.tsx","webpack://_N_E/../ui-core/src/sensors/makeSensorKey.tsx","webpack://_N_E/../ui-core/src/ticks/DryRunRequestTable.tsx","webpack://_N_E/../ui-core/src/ticks/RunRequestFragment.tsx","webpack://_N_E/../ui-core/src/ticks/TickStatusTag.tsx","webpack://_N_E/../ui-core/src/ui/CheckAllBox.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useInstigationStatusFilter.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/ui/findDuplicateRepoNames.tsx","webpack://_N_E/../ui-core/src/ui/useRepoExpansionState.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulesTable.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedScheduleRow.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedSensorRow.tsx"],"sourcesContent":["import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\n\nexport const ASSET_DAEMON_TICK_FRAGMENT = gql`\n  fragment AssetDaemonTickFragment on InstigationTick {\n    id\n    timestamp\n    endTimestamp\n    status\n    instigationType\n    error {\n      ...PythonErrorFragment\n    }\n    requestedAssetKeys {\n      path\n    }\n    requestedAssetMaterializationCount\n    autoMaterializeAssetEvaluationId\n    requestedMaterializationsForAssets {\n      assetKey {\n        path\n      }\n      partitionKeys\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const ASSET_DAEMON_TICKS_QUERY = gql`\n  query AssetDaemonTicksQuery(\n    $dayRange: Int\n    $dayOffset: Int\n    $statuses: [InstigationTickStatus!]\n    $limit: Int\n    $cursor: String\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    autoMaterializeTicks(\n      dayRange: $dayRange\n      dayOffset: $dayOffset\n      statuses: $statuses\n      limit: $limit\n      cursor: $cursor\n      beforeTimestamp: $beforeTimestamp\n      afterTimestamp: $afterTimestamp\n    ) {\n      id\n      ...AssetDaemonTickFragment\n    }\n  }\n\n  ${ASSET_DAEMON_TICK_FRAGMENT}\n`;\n","import {\n  Body2,\n  Box,\n  ButtonGroup,\n  ButtonLink,\n  Checkbox,\n  CursorHistoryControls,\n  CursorPaginationProps,\n  Spinner,\n  Table,\n} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {TimeElapsed} from '../../runs/TimeElapsed';\nimport {TickStatusTag} from '../../ticks/TickStatusTag';\n\ninterface Props {\n  loading: boolean;\n  ticks: AssetDaemonTickFragment[];\n  statuses: Set<InstigationTickStatus>;\n  setStatuses: (statuses: Set<InstigationTickStatus>) => void;\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  paginationProps: CursorPaginationProps;\n}\n\nexport const AutomaterializationEvaluationHistoryTable = ({\n  loading,\n  ticks,\n  statuses,\n  setStatuses,\n  setSelectedTick,\n  setTableView,\n  paginationProps,\n}: Props) => {\n  return (\n    <Box>\n      <Box\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n        padding={{vertical: 12, horizontal: 24}}\n        margin={{top: 32}}\n        border=\"top\"\n      >\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <ButtonGroup\n            activeItems={new Set(['evaluations'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n          {loading && !ticks?.length ? <Spinner purpose=\"body-text\" /> : null}\n        </Box>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.STARTED}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.SUCCESS}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.FAILURE}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.SKIPPED}\n          />\n        </Box>\n      </Box>\n      <TableWrapper>\n        <thead>\n          <tr>\n            <th style={{width: 120}}>Timestamp</th>\n            <th style={{width: 90}}>Status</th>\n            <th style={{width: 90}}>Duration</th>\n            <th style={{width: 180}}>Result</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Use previous data to stop page from jumping while new data loads */}\n          {ticks.map((tick, index) => {\n            // This is a hack for ticks that get stuck in started\n            const isTickStuckInStartedState =\n              index !== 0 &&\n              tick.status === InstigationTickStatus.STARTED &&\n              !paginationProps.hasPrevCursor;\n\n            return (\n              <tr key={tick.id}>\n                <td>\n                  <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n                </td>\n                <td>\n                  <TickStatusTag tick={tick} isStuckStarted={isTickStuckInStartedState} />\n                </td>\n                <td>\n                  {isTickStuckInStartedState ? (\n                    ' - '\n                  ) : (\n                    <TimeElapsed startUnix={tick.timestamp} endUnix={tick.endTimestamp} />\n                  )}\n                </td>\n                <td>\n                  {[InstigationTickStatus.SKIPPED, InstigationTickStatus.SUCCESS].includes(\n                    tick.status,\n                  ) ? (\n                    <ButtonLink\n                      onClick={() => {\n                        setSelectedTick(tick);\n                      }}\n                    >\n                      <Body2>\n                        {tick.requestedAssetMaterializationCount} materializations requested\n                      </Body2>\n                    </ButtonLink>\n                  ) : (\n                    ' - '\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </TableWrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\nconst StatusLabels = {\n  [InstigationTickStatus.SKIPPED]: 'None requested',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n};\n\nfunction StatusCheckbox({\n  status,\n  statuses,\n  setStatuses,\n}: {\n  status: InstigationTickStatus;\n  statuses: Set<InstigationTickStatus>;\n  setStatuses: (statuses: Set<InstigationTickStatus>) => void;\n}) {\n  return (\n    <Checkbox\n      label={StatusLabels[status]}\n      checked={statuses.has(status)}\n      onChange={() => {\n        const newStatuses = new Set(statuses);\n        if (statuses.has(status)) {\n          newStatuses.delete(status);\n        } else {\n          newStatuses.add(status);\n        }\n        setStatuses(newStatuses);\n      }}\n    />\n  );\n}\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Caption, Colors, Icon, Spinner, Subtitle2} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {memo, useMemo, useRef, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {\n  AssetGroupAndLocationQuery,\n  AssetGroupAndLocationQueryVariables,\n} from './types/AutomaterializationTickDetailDialog.types';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {AssetKeyInput, InstigationTickStatus} from '../../graphql/types';\nimport {TickDetailSummary} from '../../instigation/TickDetailsDialog';\nimport {useBlockTraceOnQueryResult} from '../../performance/TraceContext';\nimport {HeaderCell, HeaderRow, Inner, Row, RowCell} from '../../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../../workspace/workspacePath';\nimport {AssetLink} from '../AssetLink';\nimport {\n  AssetKeysDialog,\n  AssetKeysDialogEmptyState,\n  AssetKeysDialogHeader,\n} from '../AutoMaterializePolicyPage/AssetKeysDialog';\nimport {assetDetailsPathForKey} from '../assetDetailsPathForKey';\n\nconst TEMPLATE_COLUMNS = '30% 17% 53%';\n\nexport const AutomaterializationTickDetailDialog = memo(\n  ({\n    tick,\n    isOpen,\n    close,\n  }: {\n    tick: AssetDaemonTickFragment | null;\n    isOpen: boolean;\n    close: () => void;\n  }) => {\n    const [queryString, setQueryString] = useState('');\n\n    const filteredAssetKeys = useMemo(\n      () =>\n        tick\n          ? tick.requestedAssetKeys.filter((assetKey) =>\n              assetKey.path.join('/').includes(queryString),\n            )\n          : [],\n      [tick, queryString],\n    );\n\n    const count = tick?.requestedAssetKeys.length || 0;\n\n    const parentRef = useRef<HTMLDivElement | null>(null);\n    const rowVirtualizer = useVirtualizer({\n      count: filteredAssetKeys.length,\n      getScrollElement: () => parentRef.current,\n      estimateSize: () => 34,\n      overscan: 10,\n    });\n    const totalHeight = rowVirtualizer.getTotalSize();\n    const items = rowVirtualizer.getVirtualItems();\n\n    const assetKeyToPartitionsMap = useMemo(() => {\n      const map: Record<string, string[]> = {};\n      tick?.requestedMaterializationsForAssets.forEach(({assetKey, partitionKeys}) => {\n        map[tokenForAssetKey(assetKey)] = partitionKeys;\n      });\n      return map;\n    }, [tick?.requestedMaterializationsForAssets]);\n\n    const content = useMemo(() => {\n      if (queryString && !filteredAssetKeys.length) {\n        return (\n          <AssetKeysDialogEmptyState\n            title=\"No matching asset keys\"\n            description={\n              <>\n                No matching asset keys for <strong>{queryString}</strong>\n              </>\n            }\n          />\n        );\n      }\n      if (!tick?.requestedAssetKeys.length) {\n        return (\n          <Box padding={{vertical: 12, horizontal: 24}}>\n            <Caption color={Colors.textLight()}>None</Caption>\n          </Box>\n        );\n      }\n      return (\n        <div style={{overflow: 'scroll'}} ref={parentRef}>\n          <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n            <HeaderCell>Asset</HeaderCell>\n            <HeaderCell>Group</HeaderCell>\n            <HeaderCell>Result</HeaderCell>\n          </HeaderRow>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const assetKey = filteredAssetKeys[index]!;\n              return (\n                <AssetDetailRow\n                  key={key}\n                  $height={size}\n                  $start={start}\n                  assetKey={assetKey}\n                  partitionKeys={assetKeyToPartitionsMap[tokenForAssetKey(assetKey)]}\n                  evaluationId={tick.autoMaterializeAssetEvaluationId!}\n                />\n              );\n            })}\n          </Inner>\n        </div>\n      );\n    }, [assetKeyToPartitionsMap, filteredAssetKeys, items, queryString, tick, totalHeight]);\n\n    return (\n      <AssetKeysDialog\n        isOpen={isOpen}\n        setIsOpen={close}\n        height={400}\n        header={\n          <AssetKeysDialogHeader\n            title={\n              tick ? (\n                <div>\n                  <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n                </div>\n              ) : (\n                ''\n              )\n            }\n            showSearch={count > 0}\n            placeholder=\"Filter by asset key…\"\n            queryString={queryString}\n            setQueryString={setQueryString}\n          />\n        }\n        content={\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateRows: 'auto auto minmax(0, 1fr)',\n              height: '100%',\n            }}\n          >\n            <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n              {tick ? <TickDetailSummary tick={tick} /> : null}\n            </Box>\n            {tick?.status === InstigationTickStatus.STARTED ? null : (\n              <>\n                <Box\n                  padding={{vertical: 12, horizontal: 24}}\n                  border={filteredAssetKeys.length > 0 ? undefined : 'bottom'}\n                >\n                  <Subtitle2>Materializations requested</Subtitle2>\n                </Box>\n                {content}\n              </>\n            )}\n          </div>\n        }\n      />\n    );\n  },\n);\n\nconst AssetDetailRow = ({\n  $start,\n  $height,\n  assetKey,\n  partitionKeys,\n  evaluationId,\n}: {\n  $start: number;\n  $height: number;\n  assetKey: AssetKeyInput;\n  partitionKeys?: string[];\n  evaluationId: number;\n}) => {\n  const numMaterializations = partitionKeys?.length || 1;\n  const queryResult = useQuery<AssetGroupAndLocationQuery, AssetGroupAndLocationQueryVariables>(\n    ASSET_GROUP_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        assetKey: {path: assetKey.path},\n      },\n    },\n  );\n  const {data} = queryResult;\n  useBlockTraceOnQueryResult(queryResult, 'AssetGroupAndLocationQuery');\n\n  const asset = data?.assetOrError.__typename === 'Asset' ? data.assetOrError : null;\n  const definition = asset?.definition;\n  const repoAddress = definition\n    ? buildRepoAddress(definition.repository.name, definition.repository.location.name)\n    : null;\n  return (\n    <Row $start={$start} $height={$height}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <AssetLink path={assetKey.path} icon=\"asset\" textStyle=\"middle-truncate\" />\n        </RowCell>\n        <RowCell>\n          {data ? (\n            definition && definition.groupName && repoAddress ? (\n              <Link\n                to={workspacePathFromAddress(repoAddress, `/asset-groups/${definition.groupName}`)}\n              >\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                  <Icon color={Colors.textLight()} name=\"asset_group\" />\n                  {definition.groupName}\n                </Box>\n              </Link>\n            ) : (\n              <Caption color={Colors.textLight()}>Asset not found</Caption>\n            )\n          ) : (\n            <Spinner purpose=\"body-text\" />\n          )}\n        </RowCell>\n        <RowCell>\n          <Link\n            to={assetDetailsPathForKey(assetKey, {\n              view: 'automation',\n              evaluation: `${evaluationId}`,\n            })}\n          >\n            {numMaterializations} materialization{numMaterializations === 1 ? '' : 's'} requested\n          </Link>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    justify-content: center;\n  }\n`;\n\nconst ASSET_GROUP_QUERY = gql`\n  query AssetGroupAndLocationQuery($assetKey: AssetKeyInput!) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        definition {\n          id\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {Box, ButtonGroup, CursorHistoryControls} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useBlockTraceOnQueryResult} from '../../performance/TraceContext';\nimport {RunTable} from '../../runs/RunTable';\nimport {RUNS_ROOT_QUERY} from '../../runs/RunsRoot';\nimport {RunsRootQuery, RunsRootQueryVariables} from '../../runs/types/RunsRoot.types';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\nexport const AutomaterializeRunHistoryTable = ({\n  filterTags,\n  setTableView,\n}: {\n  filterTags?: {key: string; value: string}[];\n  setTableView: (view: 'evaluations' | 'runs') => void;\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQuery,\n    RunsRootQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter: {\n        tags: [...(filterTags || []), {key: 'dagster/auto_materialize', value: 'true'}],\n      },\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n  useBlockTraceOnQueryResult(queryResult, 'RunsRootQuery');\n\n  useQueryRefreshAtInterval(queryResult, 15 * 1000);\n\n  const runData = (queryResult.data || queryResult.previousData)?.pipelineRunsOrError;\n\n  return (\n    <Box>\n      <Wrapper>\n        <Box padding={{vertical: 12, horizontal: 24}} margin={{top: 32}} border=\"top\">\n          <ButtonGroup\n            activeItems={new Set(['runs'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n        </Box>\n        <RunTable runs={runData?.__typename === 'Runs' ? runData.results : []} />\n      </Wrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\n// Super hacky but easiest solution to position the action button\nconst Wrapper = styled.div`\n  position: relative;\n  > *:nth-child(2) {\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n`;\n","import {gql} from '@apollo/client';\nimport {Button, Dialog, DialogFooter} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {BackfillStepStatusDialogBackfillFragment} from './types/BackfillStepStatusDialog.types';\nimport {PartitionPerOpStatus} from '../../partitions/PartitionStepStatus';\nimport {usePartitionStepQuery} from '../../partitions/usePartitionStepQuery';\nimport {DagsterTag} from '../../runs/RunTag';\nimport {RunFilterToken} from '../../runs/RunsFilterInput';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressToSelector} from '../../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../../workspace/types';\n\ninterface Props {\n  backfill?: BackfillStepStatusDialogBackfillFragment;\n  onClose: () => void;\n}\n\nexport function backfillCanShowStepStatus(\n  backfill?: BackfillStepStatusDialogBackfillFragment,\n): backfill is BackfillStepStatusDialogBackfillFragment & {\n  partitionSet: NonNullable<BackfillStepStatusDialogBackfillFragment['partitionSet']>;\n  partitionNames: string[];\n} {\n  return !!backfill && backfill.partitionSet !== null && backfill.partitionNames !== null;\n}\n\nexport const BackfillStepStatusDialog = ({backfill, onClose}: Props) => {\n  const content = () => {\n    if (!backfillCanShowStepStatus(backfill)) {\n      return null;\n    }\n\n    const repoAddress = buildRepoAddress(\n      backfill.partitionSet.repositoryOrigin.repositoryName,\n      backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n    );\n\n    return (\n      <BackfillStepStatusDialogContent\n        backfill={backfill}\n        partitionSet={backfill.partitionSet}\n        partitionNames={backfill.partitionNames}\n        repoAddress={repoAddress}\n        onClose={onClose}\n      />\n    );\n  };\n\n  return (\n    <Dialog\n      isOpen={!!backfill?.partitionSet}\n      title={`Step status for backfill: ${backfill?.id}`}\n      onClose={onClose}\n      style={{width: '80vw'}}\n    >\n      {content()}\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT = gql`\n  fragment BackfillStepStatusDialogBackfillFragment on PartitionBackfill {\n    id\n    partitionNames\n    partitionSet {\n      name\n      pipelineName\n      repositoryOrigin {\n        repositoryName\n        repositoryLocationName\n      }\n    }\n  }\n`;\n\ninterface ContentProps {\n  backfill: BackfillStepStatusDialogBackfillFragment;\n  partitionSet: NonNullable<BackfillStepStatusDialogBackfillFragment['partitionSet']>;\n  partitionNames: string[];\n  repoAddress: RepoAddress;\n  onClose: () => void;\n}\n\nconst BackfillStepStatusDialogContent = ({\n  backfill,\n  partitionSet,\n  partitionNames,\n  repoAddress,\n}: ContentProps) => {\n  const [pageSize, setPageSize] = useState(60);\n  const [offset, setOffset] = useState<number>(0);\n\n  const runsFilter = useMemo(() => {\n    const token: RunFilterToken = {token: 'tag', value: `dagster/backfill=${backfill.id}`};\n    return [token];\n  }, [backfill.id]);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames,\n    pageSize,\n    runsFilter,\n    repositorySelector: repoAddressToSelector(repoAddress),\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !backfill,\n  });\n\n  return (\n    <PartitionPerOpStatus\n      partitionNames={partitionNames}\n      partitions={partitions}\n      pipelineName={partitionSet?.pipelineName}\n      repoAddress={repoAddress}\n      setPageSize={setPageSize}\n      offset={offset}\n      setOffset={setOffset}\n    />\n  );\n};\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {Button, Dialog, DialogBody, DialogFooter} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {SINGLE_BACKFILL_STATUS_DETAILS_QUERY} from './BackfillRow';\nimport {SingleBackfillQuery, SingleBackfillQueryVariables} from './types/BackfillRow.types';\nimport {\n  BackfillTerminationDialogBackfillFragment,\n  CancelBackfillMutation,\n  CancelBackfillMutationVariables,\n} from './types/BackfillTerminationDialog.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {BulkActionStatus} from '../../graphql/types';\nimport {cancelableStatuses} from '../../runs/RunStatuses';\nimport {TerminationDialog} from '../../runs/TerminationDialog';\n\ninterface Props {\n  backfill?: BackfillTerminationDialogBackfillFragment;\n  onClose: () => void;\n  onComplete: () => void;\n}\n\nexport const BackfillTerminationDialog = ({backfill, onClose, onComplete}: Props) => {\n  const [cancelBackfill] = useMutation<CancelBackfillMutation, CancelBackfillMutationVariables>(\n    CANCEL_BACKFILL_MUTATION,\n  );\n  const {data} = useQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {\n        backfillId: backfill?.id || '',\n      },\n      notifyOnNetworkStatusChange: true,\n      skip: !backfill,\n    },\n  );\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const unfinishedMap = useMemo(() => {\n    if (!backfill || !data || data.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {};\n    }\n    const unfinishedPartitions = data.partitionBackfillOrError.partitionStatuses?.results.filter(\n      (partition) =>\n        partition.runStatus && partition.runId && cancelableStatuses.has(partition.runStatus),\n    );\n    return (\n      unfinishedPartitions?.reduce(\n        (accum, partition) => {\n          if (partition && partition.runId) {\n            accum[partition.runId] = true;\n          }\n          return accum;\n        },\n        {} as Record<string, boolean>,\n      ) || {}\n    );\n  }, [backfill, data]);\n  if (!backfill || !data) {\n    return null;\n  }\n\n  const numUnscheduled = backfill.numCancelable;\n  const cancel = async () => {\n    setIsSubmitting(true);\n    await cancelBackfill({variables: {backfillId: backfill.id}});\n    onComplete();\n    setIsSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <>\n      <Dialog\n        isOpen={\n          !!backfill &&\n          backfill.status !== BulkActionStatus.CANCELED &&\n          (backfill.isAssetBackfill || !!numUnscheduled)\n        }\n        title=\"Cancel backfill\"\n        onClose={onClose}\n      >\n        {backfill.isAssetBackfill ? (\n          <DialogBody>\n            Confirm cancellation of asset backfill? This will mark unfinished runs as canceled.\n          </DialogBody>\n        ) : (\n          <DialogBody>\n            There {numUnscheduled === 1 ? 'is 1 partition ' : `are ${numUnscheduled} partitions `}\n            yet to be queued or launched.\n          </DialogBody>\n        )}\n        <DialogFooter>\n          <Button intent=\"none\" onClick={onClose}>\n            Close\n          </Button>\n          {isSubmitting ? (\n            <Button intent=\"danger\" disabled>\n              Canceling...\n            </Button>\n          ) : (\n            <Button intent=\"danger\" onClick={cancel}>\n              Cancel backfill\n            </Button>\n          )}\n        </DialogFooter>\n      </Dialog>\n      {unfinishedMap && (\n        <TerminationDialog\n          isOpen={\n            !!backfill &&\n            (!numUnscheduled || backfill.status !== 'REQUESTED') &&\n            !!Object.keys(unfinishedMap).length\n          }\n          onClose={onClose}\n          onComplete={onComplete}\n          selectedRuns={unfinishedMap}\n        />\n      )}\n    </>\n  );\n};\n\nexport const BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT = gql`\n  fragment BackfillTerminationDialogBackfillFragment on PartitionBackfill {\n    id\n    status\n    isAssetBackfill\n    numCancelable\n  }\n`;\n\nconst CANCEL_BACKFILL_MUTATION = gql`\n  mutation CancelBackfill($backfillId: String!) {\n    cancelPartitionBackfill(backfillId: $backfillId) {\n      ... on CancelBackfillSuccess {\n        backfillId\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useMutation} from '@apollo/client';\nimport {Button, Group, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {\n  BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT,\n  BackfillStepStatusDialog,\n  backfillCanShowStepStatus,\n} from './BackfillStepStatusDialog';\nimport {\n  BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT,\n  BackfillTerminationDialog,\n} from './BackfillTerminationDialog';\nimport {RESUME_BACKFILL_MUTATION} from './BackfillUtils';\nimport {BackfillActionsBackfillFragment} from './types/BackfillActionsMenu.types';\nimport {ResumeBackfillMutation, ResumeBackfillMutationVariables} from './types/BackfillUtils.types';\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {showSharedToaster} from '../../app/DomUtils';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {runsPathWithFilters} from '../../runs/RunsFilterInput';\n\nexport function backfillCanCancelSubmission(backfill: {\n  hasCancelPermission: boolean;\n  isAssetBackfill: boolean;\n  status: BulkActionStatus;\n  numCancelable: number;\n}) {\n  return (\n    backfill.hasCancelPermission &&\n    ((backfill.isAssetBackfill && backfill.status === BulkActionStatus.REQUESTED) ||\n      backfill.numCancelable > 0)\n  );\n}\n\nexport function backfillCanResume(backfill: {\n  hasResumePermission: boolean;\n  status: BulkActionStatus;\n  partitionSet: {__typename: 'PartitionSet'} | null;\n}) {\n  return !!(\n    backfill.hasResumePermission &&\n    backfill.status === BulkActionStatus.FAILED &&\n    backfill.partitionSet\n  );\n}\n\nexport function backfillCanCancelRuns(\n  backfill: {hasCancelPermission: boolean},\n  counts: {[runStatus: string]: number} | null,\n) {\n  if (!backfill.hasCancelPermission || !counts) {\n    return false;\n  }\n  const queuedCount = counts[RunStatus.QUEUED] || 0;\n  const startedCount = counts[RunStatus.STARTED] || 0;\n  return queuedCount > 0 || startedCount > 0;\n}\n\nexport const BackfillActionsMenu = ({\n  backfill,\n  canCancelRuns,\n  refetch,\n}: {\n  backfill: BackfillActionsBackfillFragment;\n  canCancelRuns: boolean;\n  refetch: () => void;\n}) => {\n  const history = useHistory();\n  const runsUrl = runsPathWithFilters([\n    {\n      token: 'tag',\n      value: `dagster/backfill=${backfill.id}`,\n    },\n  ]);\n\n  const [showTerminateDialog, setShowTerminateDialog] = useState(false);\n  const [showStepStatus, setShowStepStatus] = useState(false);\n  const [resumeBackfill] = useMutation<ResumeBackfillMutation, ResumeBackfillMutationVariables>(\n    RESUME_BACKFILL_MUTATION,\n  );\n\n  const resume = async () => {\n    const {data} = await resumeBackfill({variables: {backfillId: backfill.id}});\n    if (data && data.resumePartitionBackfill.__typename === 'ResumeBackfillSuccess') {\n      refetch();\n    } else if (data && data.resumePartitionBackfill.__typename === 'UnauthorizedError') {\n      await showSharedToaster({\n        message: (\n          <Group direction=\"column\" spacing={4}>\n            <div>\n              Attempted to retry the backfill in read-only mode. This backfill was not retried.\n            </div>\n          </Group>\n        ),\n        icon: 'error',\n        intent: 'danger',\n      });\n    } else if (data && data.resumePartitionBackfill.__typename === 'PythonError') {\n      const error = data.resumePartitionBackfill;\n      await showSharedToaster({\n        message: <div>An unexpected error occurred. This backfill was not retried.</div>,\n        icon: 'error',\n        intent: 'danger',\n        action: {\n          text: 'View error',\n          onClick: () =>\n            showCustomAlert({\n              body: <PythonErrorInfo error={error} />,\n            }),\n        },\n      });\n    }\n  };\n\n  const canCancelSubmission = backfillCanCancelSubmission(backfill);\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <MenuItem\n              text=\"View backfill runs\"\n              icon=\"settings_backup_restore\"\n              onClick={() => history.push(runsUrl)}\n            />\n            <MenuItem\n              disabled={!backfillCanShowStepStatus(backfill)}\n              text=\"View step status\"\n              icon=\"view_list\"\n              onClick={() => {\n                setShowStepStatus(true);\n              }}\n            />\n            <MenuItem\n              disabled={!backfillCanResume(backfill)}\n              text=\"Resume failed backfill\"\n              title=\"Submits runs for all partitions in the backfill that do not have a corresponding run. Does not retry failed runs.\"\n              icon=\"refresh\"\n              onClick={() => resume()}\n            />\n            <MenuItem\n              text={\n                canCancelSubmission ? 'Cancel backfill submission' : 'Terminate unfinished runs'\n              }\n              icon=\"cancel\"\n              intent=\"danger\"\n              disabled={!(canCancelSubmission || canCancelRuns)}\n              onClick={() => setShowTerminateDialog(true)}\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n\n      <BackfillStepStatusDialog\n        backfill={showStepStatus ? backfill : undefined}\n        onClose={() => setShowStepStatus(false)}\n      />\n      <BackfillTerminationDialog\n        backfill={showTerminateDialog ? backfill : undefined}\n        onClose={() => setShowTerminateDialog(false)}\n        onComplete={() => refetch()}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_ACTIONS_BACKFILL_FRAGMENT = gql`\n  fragment BackfillActionsBackfillFragment on PartitionBackfill {\n    id\n    hasCancelPermission\n    hasResumePermission\n    isAssetBackfill\n    status\n    numCancelable\n\n    ...BackfillStepStatusDialogBackfillFragment\n    ...BackfillTerminationDialogBackfillFragment\n  }\n\n  ${BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT}\n  ${BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT}\n`;\n","import {QueryResult, gql, useLazyQuery} from '@apollo/client';\nimport {Box, Colors, Icon, Mono, Tag} from '@dagster-io/ui-components';\nimport countBy from 'lodash/countBy';\nimport * as React from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {BackfillActionsMenu, backfillCanCancelRuns} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {\n  PartitionStatusesForBackfillFragment,\n  SingleBackfillCountsQuery,\n  SingleBackfillCountsQueryVariables,\n  SingleBackfillQuery,\n  SingleBackfillQueryVariables,\n} from './types/BackfillRow.types';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../../asset-graph/Utils';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {PartitionStatus, PartitionStatusHealthSourceOps} from '../../partitions/PartitionStatus';\nimport {useBlockTraceOnQueryResult} from '../../performance/TraceContext';\nimport {PipelineReference} from '../../pipelines/PipelineReference';\nimport {AssetKeyTagCollection} from '../../runs/AssetTagCollections';\nimport {CreatedByTagCell} from '../../runs/CreatedByTag';\nimport {inProgressStatuses} from '../../runs/RunStatuses';\nimport {RunStatusTagsWithCounts} from '../../runs/RunTimeline';\nimport {runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {TimestampDisplay} from '../../schedules/TimestampDisplay';\nimport {useDelayedRowQuery} from '../../workspace/VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from '../../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\nimport {workspacePathFromAddress, workspacePipelinePath} from '../../workspace/workspacePath';\n\ninterface BackfillRowProps {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  showBackfillTarget: boolean;\n  onShowPartitionsRequested: (backfill: BackfillTableFragment) => void;\n  refetch: () => void;\n}\n\nexport const BackfillRow = (props: BackfillRowProps) => {\n  const statusUnsupported =\n    props.backfill.numPartitions === null ||\n    props.backfill.partitionNames === null ||\n    props.backfill.isAssetBackfill;\n\n  if (statusUnsupported) {\n    return <BackfillRowContent {...props} counts={null} statuses={null} statusQueryResult={null} />;\n  }\n  return (\n    <BackfillRowLoader backfillId={props.backfill.id} numPartitions={props.backfill.numPartitions}>\n      {(data) => <BackfillRowContent {...props} {...data} />}\n    </BackfillRowLoader>\n  );\n};\n\ninterface LoadResult {\n  counts: {[runStatus: string]: number} | null;\n  statusQueryResult: QueryResult<any, any> | null;\n  statuses: PartitionStatusesForBackfillFragment['results'] | null;\n}\n\nexport const BackfillRowLoader = (props: {\n  backfillId: string;\n  numPartitions: number | null;\n  children: (data: LoadResult) => React.ReactNode;\n}) => {\n  const {backfillId, numPartitions} = props;\n\n  const statusDetails = useLazyQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {backfillId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  useBlockTraceOnQueryResult(statusDetails[1], 'SingleBackfillQuery');\n\n  const statusCounts = useLazyQuery<SingleBackfillCountsQuery, SingleBackfillCountsQueryVariables>(\n    SINGLE_BACKFILL_STATUS_COUNTS_QUERY,\n    {\n      variables: {backfillId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  useBlockTraceOnQueryResult(statusCounts[1], 'SingleBackfillCountsQuery');\n\n  // Note: We switch queries based on how many partitions there are to display,\n  // because the detail is nice for small backfills but breaks for 100k+ partitions.\n  //\n  const [statusQueryFn, statusQueryResult] =\n    (numPartitions || 0) > BACKFILL_PARTITIONS_COUNTS_THRESHOLD ? statusCounts : statusDetails;\n\n  useDelayedRowQuery(statusQueryFn);\n  useQueryRefreshAtInterval(statusQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = statusQueryResult;\n  const {counts, statuses} = React.useMemo(() => {\n    if (data?.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {counts: null, statuses: null};\n    }\n    if ('partitionStatusCounts' in data.partitionBackfillOrError) {\n      const counts = Object.fromEntries(\n        data.partitionBackfillOrError.partitionStatusCounts.map((e) => [e.runStatus, e.count]),\n      );\n      return {counts, statuses: null};\n    }\n    const statuses = data.partitionBackfillOrError.partitionStatuses?.results || null;\n    const counts = countBy(statuses, (k) => k.runStatus);\n    return {counts, statuses};\n  }, [data]);\n\n  return props.children({counts, statuses, statusQueryResult});\n};\n\nexport const BackfillRowContent = ({\n  backfill,\n  allPartitions,\n  showBackfillTarget,\n  onShowPartitionsRequested,\n  refetch,\n  counts,\n  statuses,\n  statusQueryResult,\n}: BackfillRowProps & LoadResult) => {\n  const repoAddress = backfill.partitionSet\n    ? buildRepoAddress(\n        backfill.partitionSet.repositoryOrigin.repositoryName,\n        backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n      )\n    : null;\n\n  const renderBackfillStatus = () =>\n    statusQueryResult?.loading ? (\n      <div style={{color: Colors.textLight()}}>Loading</div>\n    ) : (\n      <BackfillStatusTag backfill={backfill} counts={counts} />\n    );\n\n  const renderRunStatus = () => {\n    if (!backfill.isValidSerialization) {\n      return <p>A partitions definition has changed since this backfill ran.</p>;\n    }\n    if (statusQueryResult?.loading) {\n      return <div style={{color: Colors.textLight()}}>Loading</div>;\n    }\n    return counts ? (\n      <BackfillRunStatus backfill={backfill} counts={counts} statuses={statuses} />\n    ) : (\n      <div style={{color: Colors.textLight()}}>{'\\u2013'}</div>\n    );\n  };\n\n  return (\n    <tr>\n      <td style={{width: 120}}>\n        <Mono>\n          <Link\n            to={\n              backfill.isAssetBackfill\n                ? `/overview/backfills/${backfill.id}`\n                : runsPathWithFilters([\n                    {\n                      token: 'tag',\n                      value: `dagster/backfill=${backfill.id}`,\n                    },\n                  ])\n            }\n          >\n            {backfill.id}\n          </Link>\n        </Mono>\n      </td>\n      <td style={{width: 220}}>\n        {backfill.timestamp ? <TimestampDisplay timestamp={backfill.timestamp} /> : '-'}\n      </td>\n      {showBackfillTarget ? (\n        <td style={{width: '20%'}}>\n          <BackfillTarget backfill={backfill} repoAddress={repoAddress} />\n        </td>\n      ) : null}\n      <td style={{width: allPartitions ? 300 : 140}}>\n        <BackfillRequestedRange\n          backfill={backfill}\n          allPartitions={allPartitions}\n          onExpand={() => onShowPartitionsRequested(backfill)}\n        />\n      </td>\n      <td style={{width: 160}}>\n        <CreatedByTagCell tags={backfill.tags} repoAddress={repoAddress} />\n      </td>\n      <td style={{width: 140}}>{renderBackfillStatus()}</td>\n      <td>{renderRunStatus()}</td>\n      <td>\n        <BackfillActionsMenu\n          backfill={backfill}\n          canCancelRuns={backfillCanCancelRuns(backfill, counts)}\n          refetch={refetch}\n        />\n      </td>\n    </tr>\n  );\n};\n\nconst BACKFILL_PARTITIONS_COUNTS_THRESHOLD = 1000;\n\nconst BackfillRunStatus = ({\n  backfill,\n  statuses,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  statuses: PartitionStatusesForBackfillFragment['results'] | null;\n  counts: {[status: string]: number};\n}) => {\n  const history = useHistory();\n  const partitionCounts = Object.entries(counts).reduce(\n    (partitionCounts, [runStatus, count]) => {\n      partitionCounts[runStatus] = (partitionCounts[runStatus] || 0) + count;\n      return partitionCounts;\n    },\n    {} as {[status: string]: number},\n  );\n\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        statuses?.filter((s) => s.partitionName === key)[0]?.runStatus || RunStatus.NOT_STARTED,\n    }),\n    [statuses],\n  );\n\n  return statuses && backfill.partitionNames ? (\n    <PartitionStatus\n      partitionNames={backfill.partitionNames}\n      health={health}\n      splitPartitions\n      onClick={(partitionName) => {\n        const entry = statuses.find((r) => r.partitionName === partitionName);\n        if (entry?.runId) {\n          history.push(`/runs/${entry.runId}`);\n        }\n      }}\n    />\n  ) : (\n    <RunStatusTagsWithCounts\n      succeededCount={partitionCounts[RunStatus.SUCCESS] || 0}\n      inProgressCount={partitionCounts[RunStatus.STARTED] || 0}\n      failedCount={partitionCounts[RunStatus.FAILURE] || 0}\n    />\n  );\n};\n\nconst BackfillTarget = ({\n  backfill,\n  repoAddress,\n}: {\n  backfill: BackfillTableFragment;\n  repoAddress: RepoAddress | null;\n}) => {\n  const repo = useRepository(repoAddress);\n  const {assetSelection, partitionSet, partitionSetName} = backfill;\n\n  const isHiddenAssetPartitionSet = isHiddenAssetGroupJob(partitionSetName || '');\n\n  const buildHeader = () => {\n    if (isHiddenAssetPartitionSet) {\n      return null;\n    }\n    if (partitionSet && repo) {\n      return (\n        <Link\n          style={{fontWeight: 500}}\n          to={workspacePipelinePath({\n            repoName: partitionSet.repositoryOrigin.repositoryName,\n            repoLocation: partitionSet.repositoryOrigin.repositoryLocationName,\n            pipelineName: partitionSet.pipelineName,\n            isJob: isThisThingAJob(repo, partitionSet.pipelineName),\n            path: `/partitions?partitionSet=${encodeURIComponent(partitionSet.name)}`,\n          })}\n        >\n          {partitionSet.name}\n        </Link>\n      );\n    }\n    if (partitionSetName) {\n      return <span style={{fontWeight: 500}}>{partitionSetName}</span>;\n    }\n    return null;\n  };\n\n  const buildRepoLink = () =>\n    repoAddress ? (\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}} style={{fontSize: '12px'}}>\n        <Icon name=\"repo\" color={Colors.textLight()} />\n        <Link to={workspacePathFromAddress(repoAddress)}>\n          {repoAddressAsHumanString(repoAddress)}\n        </Link>\n      </Box>\n    ) : undefined;\n\n  const buildPipelineOrAssets = () => {\n    if (assetSelection?.length) {\n      return <AssetKeyTagCollection assetKeys={assetSelection} dialogTitle=\"Assets in backfill\" />;\n    }\n    if (partitionSet && repo) {\n      return (\n        <PipelineReference\n          showIcon\n          size=\"small\"\n          pipelineName={partitionSet.pipelineName}\n          pipelineHrefContext={{\n            name: partitionSet.repositoryOrigin.repositoryName,\n            location: partitionSet.repositoryOrigin.repositoryLocationName,\n          }}\n          isJob={isThisThingAJob(repo, partitionSet.pipelineName)}\n        />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      {buildHeader()}\n      <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n        {buildRepoLink()}\n        {buildPipelineOrAssets()}\n      </Box>\n    </Box>\n  );\n};\n\nconst BackfillRequestedRange = ({\n  allPartitions,\n  backfill,\n  onExpand,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onExpand: () => void;\n}) => {\n  const {partitionNames, numPartitions} = backfill;\n\n  if (numPartitions === null) {\n    return <span />;\n  }\n\n  const numPartitionsLabel = `${numPartitions.toLocaleString()} ${\n    numPartitions === 1 ? 'partition' : 'partitions'\n  }`;\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      <div>\n        {partitionNames ? (\n          <TagButton onClick={onExpand}>\n            <Tag intent=\"primary\" interactive>\n              {numPartitionsLabel}\n            </Tag>\n          </TagButton>\n        ) : (\n          <Tag intent=\"primary\">{numPartitionsLabel}</Tag>\n        )}\n      </div>\n      {allPartitions && partitionNames && (\n        <RequestedPartitionStatusBar all={allPartitions} requested={partitionNames} />\n      )}\n    </Box>\n  );\n};\n\nconst RequestedPartitionStatusBar = ({all, requested}: {all: string[]; requested: string[]}) => {\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        requested && requested.includes(key) ? RunStatus.QUEUED : RunStatus.NOT_STARTED,\n    }),\n    [requested],\n  );\n  return <PartitionStatus small hideStatusTooltip partitionNames={all} health={health} />;\n};\n\nexport const BackfillStatusTag = ({\n  backfill,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  counts: {[status: string]: number} | null;\n}) => {\n  if (backfill.isAssetBackfill) {\n    return <BackfillStatusTagForPage backfill={backfill} />;\n  }\n\n  switch (backfill.status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>In progress</Tag>;\n    case BulkActionStatus.FAILED:\n      return (\n        <Box margin={{bottom: 12}}>\n          <TagButton\n            onClick={() =>\n              backfill.error &&\n              showCustomAlert({title: 'Error', body: <PythonErrorInfo error={backfill.error} />})\n            }\n          >\n            <Tag intent=\"danger\">Failed</Tag>\n          </TagButton>\n        </Box>\n      );\n    case BulkActionStatus.COMPLETED:\n      if (backfill.partitionNames === null) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (!counts) {\n        return <div style={{color: Colors.textLight()}}>None</div>;\n      }\n      if (counts[RunStatus.SUCCESS] === backfill.partitionNames.length) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (Array.from(inProgressStatuses).some((status) => counts[status])) {\n        return <Tag intent=\"primary\">In progress</Tag>;\n      }\n      return <Tag intent=\"warning\">Incomplete</Tag>;\n    case BulkActionStatus.CANCELING:\n      return <Tag>Canceling</Tag>;\n    case BulkActionStatus.CANCELED:\n      return <Tag>Canceled</Tag>;\n  }\n  return <span />;\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_COUNTS_QUERY = gql`\n  query SingleBackfillCountsQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionStatusCounts {\n          runStatus\n          count\n        }\n      }\n    }\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_DETAILS_QUERY = gql`\n  query SingleBackfillQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionStatuses {\n          ...PartitionStatusesForBackfill\n        }\n      }\n    }\n  }\n\n  fragment PartitionStatusesForBackfill on PartitionStatuses {\n    results {\n      id\n      partitionName\n      runId\n      runStatus\n    }\n  }\n`;\n","import {Box, Tag} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {PythonErrorFragment} from '../../app/types/PythonErrorFragment.types';\nimport {BulkActionStatus} from '../../graphql/types';\n\ntype BackfillState = {\n  status: BulkActionStatus;\n  error: PythonErrorFragment | null;\n};\n\nexport const BackfillStatusTagForPage = ({backfill}: {backfill: BackfillState}) => {\n  const {status, error} = backfill;\n  function errorState(status: string) {\n    return (\n      <Box margin={{bottom: 12}}>\n        <TagButton\n          onClick={() =>\n            error && showCustomAlert({title: 'Error', body: <PythonErrorInfo error={error} />})\n          }\n        >\n          <Tag intent=\"danger\">{status}</Tag>\n        </TagButton>\n      </Box>\n    );\n  }\n\n  switch (status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>In progress</Tag>;\n\n    case BulkActionStatus.CANCELING:\n      return errorState('Canceling');\n    case BulkActionStatus.CANCELED:\n      return errorState('Canceled');\n    case BulkActionStatus.FAILED:\n      return errorState('Failed');\n    case BulkActionStatus.COMPLETED:\n      return <Tag intent=\"success\">Completed</Tag>;\n    default:\n      return <Tag>{status}</Tag>;\n  }\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n","import {Button, Dialog, DialogFooter, FontFamily} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {VirtualizedItemListForDialog} from '../../ui/VirtualizedItemListForDialog';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base', numeric: true});\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\nexport const BackfillPartitionsRequestedDialog = ({backfill, onClose}: Props) => {\n  return (\n    <Dialog\n      isOpen={!!backfill}\n      title={\n        <span>\n          Partitions requested for backfill:{' '}\n          <span style={{fontSize: '16px', fontFamily: FontFamily.monospace}}>{backfill?.id}</span>\n        </span>\n      }\n      onClose={onClose}\n    >\n      <DialogContent partitionNames={backfill?.partitionNames || []} />\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface DialogContentProps {\n  partitionNames: string[];\n}\n\n// Separate component so that we can delay sorting until render.\nconst DialogContent = (props: DialogContentProps) => {\n  const {partitionNames} = props;\n\n  const sorted = useMemo(() => {\n    return [...(partitionNames || [])].sort((a, b) => COLLATOR.compare(a, b));\n  }, [partitionNames]);\n\n  return (\n    <div style={{height: '340px', overflow: 'hidden'}}>\n      <VirtualizedItemListForDialog\n        items={sorted}\n        renderItem={(partitionName) => (\n          <div key={partitionName}>\n            <TruncatedTextWithFullTextOnHover text={partitionName} />\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n","import {gql} from '@apollo/client';\nimport {Table} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT} from './BackfillActionsMenu';\nimport {BackfillPartitionsRequestedDialog} from './BackfillPartitionsRequestedDialog';\nimport {BackfillRow} from './BackfillRow';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\n\nexport const BackfillTable = ({\n  showBackfillTarget = true,\n  allPartitions,\n  backfills,\n  refetch,\n}: {\n  allPartitions?: string[];\n  backfills: BackfillTableFragment[];\n  refetch: () => void;\n  showBackfillTarget?: boolean;\n}) => {\n  const [partitionsRequestedBackfill, setPartitionsRequestedBackfill] =\n    useState<BackfillTableFragment>();\n\n  return (\n    <>\n      <Table>\n        <thead>\n          <tr>\n            <th>Backfill ID</th>\n            <th>Created</th>\n            {showBackfillTarget ? <th>Backfill target</th> : null}\n            <th>Requested</th>\n            <th>Launched by</th>\n            <th>Backfill status</th>\n            <th>Run status</th>\n            <th style={{width: 80}} />\n          </tr>\n        </thead>\n        <tbody>\n          {backfills.map((backfill) => (\n            <BackfillRow\n              key={backfill.id}\n              showBackfillTarget={showBackfillTarget}\n              backfill={backfill}\n              allPartitions={allPartitions}\n              onShowPartitionsRequested={setPartitionsRequestedBackfill}\n              refetch={refetch}\n            />\n          ))}\n        </tbody>\n      </Table>\n\n      <BackfillPartitionsRequestedDialog\n        backfill={partitionsRequestedBackfill}\n        onClose={() => setPartitionsRequestedBackfill(undefined)}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_TABLE_FRAGMENT = gql`\n  fragment BackfillTableFragment on PartitionBackfill {\n    id\n    status\n    isAssetBackfill\n    isValidSerialization\n    partitionNames\n    numPartitions\n    timestamp\n    partitionSetName\n    partitionSet {\n      id\n      ...PartitionSetForBackfillTable\n    }\n    assetSelection {\n      path\n    }\n    tags {\n      key\n      value\n    }\n    error {\n      ...PythonErrorFragment\n    }\n    ...BackfillActionsBackfillFragment\n  }\n\n  fragment PartitionSetForBackfillTable on PartitionSet {\n    id\n    name\n    mode\n    pipelineName\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n","import {Caption, Colors, Tooltip, ifPlural, useViewport} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport memoize from 'lodash/memoize';\nimport {memo, useContext, useEffect, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {isStuckStartedTick} from './util';\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\n\ndayjs.extend(relativeTime);\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreen(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRed(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavender(),\n  [InstigationTickStatus.SKIPPED]: Colors.backgroundDisabled(),\n};\n\nconst HoverColorMap = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreenHover(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRedHover(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavenderHover(),\n  [InstigationTickStatus.SKIPPED]: Colors.accentGrayHover(),\n};\n\nconst REFRESH_INTERVAL = 100;\n\nconst MIN_WIDTH = 8; // At least 8px wide\n\nconst MINUTE = 60000;\n\nconst timestampFormat = memoize((timezone: string) => {\n  return new Intl.DateTimeFormat(navigator.language, {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hourCycle: 'h23',\n    timeZone: timezone === 'Automatic' ? browserTimezone() : timezone,\n    timeZoneName: 'short',\n  });\n});\nexport const LiveTickTimeline = <T extends HistoryTickFragment | AssetDaemonTickFragment>({\n  ticks,\n  onHoverTick,\n  onSelectTick,\n  exactRange,\n  timeRange = MINUTE * 5, // 5 minutes,\n  tickGrid = MINUTE, // 1 minute\n  timeAfter = MINUTE, // 1 minute\n}: {\n  ticks: T[];\n  onHoverTick: (InstigationTick?: T) => void;\n  onSelectTick: (InstigationTick: T) => void;\n  exactRange?: [number, number];\n  timeRange?: number;\n  tickGrid?: number;\n  timeAfter?: number;\n}) => {\n  const [now, setNow] = useState<number>(Date.now());\n  const [isPaused, setPaused] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isPaused && !exactRange) {\n      const interval = setInterval(() => {\n        setNow(Date.now());\n      }, REFRESH_INTERVAL);\n      return () => clearInterval(interval);\n    }\n    return () => {};\n  }, [exactRange, isPaused]);\n\n  const maxX = exactRange?.[1] ? exactRange[1] * 1000 : now + timeAfter;\n  const minX = exactRange?.[0] ? exactRange[0] * 1000 : now - timeRange;\n\n  const fullRange = maxX - minX;\n\n  const {viewport, containerProps} = useViewport();\n\n  const ticksReversed = useMemo(() => {\n    // Reverse ticks to make tab order correct\n    return ticks.filter((tick) => !tick.endTimestamp || tick.endTimestamp * 1000 > minX).reverse();\n  }, [ticks, minX]);\n\n  const ticksToDisplay = useMemo(() => {\n    return ticksReversed.map((tick, i) => {\n      const startX = getX(1000 * tick.timestamp!, viewport.width, minX, fullRange);\n      const endTimestamp = isStuckStartedTick(tick, ticksReversed.length - i - 1)\n        ? tick.timestamp\n        : tick.endTimestamp\n        ? tick.endTimestamp * 1000\n        : now;\n      const endX = getX(endTimestamp, viewport.width, minX, fullRange);\n      return {\n        ...tick,\n        width: Math.max(endX - startX, MIN_WIDTH),\n        startX,\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minX, now, ticksReversed, fullRange, viewport.width]);\n\n  const timeTickGridDelta = Math.max((maxX - minX) / 25, tickGrid);\n  const tickGridDelta = timeTickGridDelta / 5;\n  const startTickGridX = Math.ceil(minX / tickGridDelta) * tickGridDelta;\n  const gridTicks = useMemo(() => {\n    const ticks = [];\n    for (let i = startTickGridX; i <= maxX; i += tickGridDelta) {\n      ticks.push({\n        time: i,\n        x: getX(i, viewport.width, minX, fullRange),\n        showLabel: i % timeTickGridDelta === 0,\n      });\n    }\n    return ticks;\n  }, [maxX, startTickGridX, tickGridDelta, viewport.width, minX, fullRange, timeTickGridDelta]);\n\n  const {\n    timezone: [timezone],\n  } = useContext(TimeContext);\n\n  return (\n    <div style={{marginRight: '8px'}}>\n      <div {...containerProps}>\n        <TicksWrapper>\n          {gridTicks.map((tick) => (\n            <GridTick\n              key={tick.time}\n              style={{\n                transform: `translateX(${tick.x}px)`,\n              }}\n            >\n              <GridTickLine />\n              {tick.showLabel ? (\n                <GridTickTime>\n                  <Caption>{timestampFormat(timezone).format(new Date(tick.time))}</Caption>\n                </GridTickTime>\n              ) : null}\n            </GridTick>\n          ))}\n          {ticksToDisplay.map((tick) => {\n            const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n            const count =\n              (isAssetDaemonTick ? tick.requestedAssetMaterializationCount : tick.runIds?.length) ??\n              0;\n            return (\n              <Tick\n                key={tick.id}\n                style={{\n                  transform: `translateX(${tick.startX}px)`,\n                  width: `${tick.width}px`,\n                }}\n                status={tick.status}\n                onMouseEnter={() => {\n                  onHoverTick(tick);\n                  setPaused(true);\n                }}\n                onMouseLeave={() => {\n                  onHoverTick();\n                  setPaused(false);\n                }}\n                onClick={() => {\n                  onSelectTick(tick);\n                }}\n              >\n                <Tooltip content={<TickTooltip tick={tick} />}>\n                  <div style={{width: tick.width + 'px', height: '80px'}}>\n                    {count > 0 ? count : null}\n                  </div>\n                </Tooltip>\n              </Tick>\n            );\n          })}\n          <NowIndicator\n            style={{\n              transform: `translateX(${getX(now, viewport.width, minX, fullRange)}px)`,\n            }}\n          />\n        </TicksWrapper>\n        <TimeAxisWrapper></TimeAxisWrapper>\n      </div>\n    </div>\n  );\n};\n\nconst TickTooltip = memo(({tick}: {tick: HistoryTickFragment | AssetDaemonTickFragment}) => {\n  const status = useMemo(() => {\n    if (tick.status === InstigationTickStatus.FAILURE) {\n      return 'Evaluation failed';\n    }\n    if (tick.status === InstigationTickStatus.STARTED) {\n      return 'Evaluating…';\n    }\n    const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n    if (isAssetDaemonTick) {\n      return `${tick.requestedAssetMaterializationCount} materialization${ifPlural(\n        tick.requestedAssetMaterializationCount,\n        '',\n        's',\n      )} requested`;\n    } else {\n      return `${tick.runs?.length || 0} run${ifPlural(tick.runs?.length, '', 's')} requested`;\n    }\n  }, [tick]);\n  const startTime = dayjs(1000 * tick.timestamp!);\n  const endTime = dayjs(tick.endTimestamp ? 1000 * tick.endTimestamp : Date.now());\n  const elapsedTime = startTime.to(endTime, true);\n  return (\n    <div>\n      <Caption as=\"div\">\n        {status} ({elapsedTime})\n      </Caption>\n      {tick.status === InstigationTickStatus.STARTED ? null : (\n        <Caption color={Colors.textLight()}>Click for details</Caption>\n      )}\n    </div>\n  );\n});\n\nconst TicksWrapper = styled.div`\n  position: relative;\n  height: 100px;\n  padding: 10px 2px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n`;\n\nconst TimeAxisWrapper = styled.div`\n  height: 24px;\n`;\n\nconst Tick = styled.div<{status: InstigationTickStatus}>`\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  height: 80px;\n  will-change: transform, width;\n  border-radius: 2px;\n  div {\n    place-content: center;\n    display: grid;\n  }\n  color: ${Colors.backgroundDefault()};\n  ${({status}) => `\n    background: ${COLOR_MAP[status]};\n    &:hover {\n      background: ${HoverColorMap[status]};\n    }\n  `}\n`;\n\nconst GridTick = styled.div`\n  position: absolute;\n  top: 0;\n  height: 124px;\n  will-change: transform;\n`;\nconst GridTickLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 108px;\n  width: 1px;\n  background: ${Colors.keylineDefault()};\n`;\nconst GridTickTime = styled.div`\n  height: 16px;\n  position: absolute;\n  bottom: 0;\n  width: 100px;\n  margin-left: -24px;\n`;\n\nconst NowIndicator = styled.div`\n  position: absolute;\n  top: 0;\n  height: 126px;\n  width: 2px;\n  background: ${Colors.accentPrimary()};\n  &:after {\n    content: 'Now';\n    position: absolute;\n    left: 0;\n    background: ${Colors.accentPrimary()};\n    color: ${Colors.accentReversed()};\n    bottom: 0;\n    font-size: 12px;\n    padding: 3px 4px;\n  }\n`;\n\nfunction getX(timestamp: number, viewportWidth: number, minX: number, timeRange: number) {\n  return (viewportWidth * (timestamp - minX)) / timeRange;\n}\n","import 'chartjs-adapter-date-fns';\n\nimport {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  Caption,\n  Checkbox,\n  Colors,\n  CursorHistoryControls,\n  FontFamily,\n  Icon,\n  IconWrapper,\n  NonIdealState,\n  Spinner,\n  Subheading,\n  Table,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT, RUN_STATUS_FRAGMENT, RunStatusLink} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline2';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {TickHistoryQuery, TickHistoryQueryVariables} from './types/TickHistory.types';\nimport {countPartitionsAddedOrDeleted, isStuckStartedTick, truncate} from './util';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n  InstigationType,\n} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {TimeElapsed} from '../runs/TimeElapsed';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = HistoryTickFragment;\n\nconst PAGE_SIZE = 25;\ninterface ShownStatusState {\n  [InstigationTickStatus.SUCCESS]: boolean;\n  [InstigationTickStatus.FAILURE]: boolean;\n  [InstigationTickStatus.STARTED]: boolean;\n  [InstigationTickStatus.SKIPPED]: boolean;\n}\n\nconst DEFAULT_SHOWN_STATUS_STATE = {\n  [InstigationTickStatus.SUCCESS]: true,\n  [InstigationTickStatus.FAILURE]: true,\n  [InstigationTickStatus.STARTED]: true,\n  [InstigationTickStatus.SKIPPED]: true,\n};\nconst STATUS_TEXT_MAP = {\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.STARTED]: 'In progress',\n  [InstigationTickStatus.SKIPPED]: 'Skipped',\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n  setTimerange,\n  setParentStatuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  setTimerange?: (range?: [number, number]) => void;\n  setParentStatuses?: (statuses?: InstigationTickStatus[]) => void;\n}) => {\n  const [shownStates, setShownStates] = useQueryPersistedState<ShownStatusState>({\n    encode: (states) => {\n      const queryState = {};\n      Object.keys(states).map((state) => {\n        (queryState as any)[state.toLowerCase()] = String(states[state as keyof typeof states]);\n      });\n      return queryState;\n    },\n    decode: (queryState) => {\n      const status: ShownStatusState = {...DEFAULT_SHOWN_STATUS_STATE};\n      Object.keys(DEFAULT_SHOWN_STATUS_STATE).forEach((state) => {\n        if (state.toLowerCase() in queryState) {\n          (status as any)[state] = !(queryState[state.toLowerCase()] === 'false');\n        }\n      });\n\n      return status;\n    },\n  });\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = React.useMemo(\n    () =>\n      Object.keys(shownStates)\n        .filter((status) => shownStates[status as keyof typeof shownStates])\n        .map((status) => status as InstigationTickStatus),\n    [shownStates],\n  );\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: JOB_TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n  useBlockTraceOnQueryResult(queryResult, 'TickHistoryQuery');\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const state = queryResult?.data?.instigationStateOrError;\n  const ticks = React.useMemo(\n    () => (state?.__typename === 'InstigationState' ? state.ticks : []),\n    [state],\n  );\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange?.([start, end]);\n        }\n      }\n    } else {\n      setTimerange?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, ticks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses?.(Array.from(statuses));\n    } else {\n      setParentStatuses?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor && !ticks.length && !queryResult.loading) {\n      paginationProps.reset();\n    }\n    // paginationProps.reset isn't memoized\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ticks, queryResult.loading, paginationProps.hasPrevCursor]);\n\n  const [logTick, setLogTick] = React.useState<InstigationTick>();\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 48}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && statuses.length === Object.keys(DEFAULT_SHOWN_STATUS_STATE).length) {\n    return null;\n  }\n\n  const StatusFilter = ({status}: {status: InstigationTickStatus}) => (\n    <Checkbox\n      label={STATUS_TEXT_MAP[status]}\n      checked={shownStates[status]}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        setShownStates({...shownStates, [status]: e.target.checked});\n      }}\n    />\n  );\n\n  return (\n    <>\n      {logTick ? (\n        <TickLogDialog\n          tick={logTick}\n          instigationSelector={instigationSelector}\n          onClose={() => setLogTick(undefined)}\n        />\n      ) : null}\n      <Box padding={{vertical: 8, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={InstigationTickStatus.STARTED} />\n            <StatusFilter status={InstigationTickStatus.SUCCESS} />\n            <StatusFilter status={InstigationTickStatus.FAILURE} />\n            <StatusFilter status={InstigationTickStatus.SKIPPED} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <TableWrapper>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              <th style={{width: 90}}>Duration</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Result</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick, index) => (\n              <TickRow\n                key={tick.id}\n                tick={tick}\n                instigationSelector={instigationSelector}\n                index={index}\n              />\n            ))}\n          </tbody>\n        </TableWrapper>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  onHighlightRunIds,\n  beforeTimestamp,\n  afterTimestamp,\n  statuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n  beforeTimestamp?: number;\n  afterTimestamp?: number;\n  statuses?: InstigationTickStatus[];\n}) => {\n  const [selectedTickId, setSelectedTickId] = useQueryPersistedState<number | undefined>({\n    encode: (tickId) => ({tickId}),\n    decode: (qs) => (qs['tickId'] ? Number(qs['tickId']) : undefined),\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(\n    JOB_TICK_HISTORY_QUERY,\n    {\n      variables: {\n        instigationSelector,\n        beforeTimestamp,\n        afterTimestamp,\n        statuses,\n        limit: beforeTimestamp ? undefined : 15,\n      },\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useBlockTraceOnQueryResult(queryResult, 'TickHistoryQuery');\n\n  useQueryRefreshAtInterval(\n    queryResult,\n    1000,\n    !(pollingPaused || (beforeTimestamp && afterTimestamp)),\n  );\n  const {data, error} = queryResult;\n\n  if (!data || error) {\n    return (\n      <>\n        <Box padding={{top: 16, horizontal: 24}} border=\"bottom\">\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  // Set it equal to an empty array in case of a weird error\n  // https://elementl-workspace.slack.com/archives/C03CCE471E0/p1693237968395179?thread_ts=1693233109.602669&cid=C03CCE471E0\n  const {ticks = []} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTickId(tick ? Number(tick.tickId) : undefined);\n  };\n\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      onHighlightRunIds && onHighlightRunIds(tick.runIds);\n      pausePolling(true);\n    }\n  };\n  return (\n    <>\n      <TickDetailsDialog\n        isOpen={!!selectedTickId}\n        tickId={selectedTickId}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border=\"top\">\n        <LiveTickTimeline\n          ticks={ticks}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n          exactRange={\n            beforeTimestamp && afterTimestamp ? [afterTimestamp, beforeTimestamp] : undefined\n          }\n        />\n      </Box>\n    </>\n  );\n};\n\nfunction TickRow({\n  tick,\n  instigationSelector,\n  index,\n}: {\n  tick: HistoryTickFragment;\n  instigationSelector: InstigationSelector;\n  index: number;\n}) {\n  const copyToClipboard = useCopyToClipboard();\n  const [showResults, setShowResults] = React.useState(false);\n\n  const [addedPartitions, deletedPartitions] = React.useMemo(() => {\n    const requests = tick.dynamicPartitionsRequestResults;\n    const added = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.ADD_PARTITIONS,\n    );\n    const deleted = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.DELETE_PARTITIONS,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  const isStuckStarted = isStuckStartedTick(tick, index);\n\n  return (\n    <tr>\n      <td>\n        <TimestampDisplay\n          timestamp={tick.timestamp}\n          timeFormat={{showTimezone: false, showSeconds: true}}\n        />\n      </td>\n      <td>\n        <TickStatusTag tick={tick} isStuckStarted={isStuckStarted} />\n      </td>\n      <td>\n        {isStuckStarted ? (\n          '- '\n        ) : (\n          <TimeElapsed\n            startUnix={tick.timestamp}\n            endUnix={tick.endTimestamp || Date.now() / 1000}\n          />\n        )}\n      </td>\n      {tick.instigationType === InstigationType.SENSOR ? (\n        <td style={{width: 120}}>\n          {tick.cursor ? (\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <div style={{fontFamily: FontFamily.monospace, fontSize: '14px'}}>\n                {truncate(tick.cursor || '')}\n              </div>\n              <CopyButton\n                onClick={async () => {\n                  copyToClipboard(tick.cursor || '');\n                  await showSharedToaster({\n                    message: <div>Copied value</div>,\n                    intent: 'success',\n                  });\n                }}\n              >\n                <Icon name=\"assignment\" />\n              </CopyButton>\n            </Box>\n          ) : (\n            <>&mdash;</>\n          )}\n        </td>\n      ) : null}\n      <td>\n        <Box flex={{direction: 'column', gap: 6}}>\n          <Box flex={{alignItems: 'center', gap: 8}}>\n            <ButtonLink\n              onClick={() => {\n                setShowResults(true);\n              }}\n            >\n              {tick.runIds.length === 1\n                ? '1 run requested'\n                : `${tick.runIds.length} runs requested`}\n            </ButtonLink>\n            {tick.runs.length === 1\n              ? tick.runs.map((run) => (\n                  <React.Fragment key={run.id}>\n                    <RunStatusLink run={run} />\n                  </React.Fragment>\n                ))\n              : null}\n          </Box>\n          {addedPartitions || deletedPartitions ? (\n            <Caption>\n              (\n              {addedPartitions ? (\n                <span>\n                  {addedPartitions} partition{ifPlural(addedPartitions, '', 's')} created\n                  {deletedPartitions ? ',' : ''}\n                </span>\n              ) : null}\n              {deletedPartitions ? (\n                <span>\n                  {deletedPartitions} partition{ifPlural(deletedPartitions, '', 's')} deleted,\n                </span>\n              ) : null}\n              )\n            </Caption>\n          ) : null}\n          <TickDetailsDialog\n            isOpen={showResults}\n            tickId={Number(tick.tickId)}\n            instigationSelector={instigationSelector}\n            onClose={() => {\n              setShowResults(false);\n            }}\n          />\n        </Box>\n      </td>\n    </tr>\n  );\n}\n\nconst JOB_TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        ticks(\n          dayRange: $dayRange\n          limit: $limit\n          cursor: $cursor\n          statuses: $statuses\n          beforeTimestamp: $beforeTimestamp\n          afterTimestamp: $afterTimestamp\n        ) {\n          id\n          ...HistoryTick\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n\nconst CopyButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 8px;\n  margin: -6px;\n  outline: none;\n\n  ${IconWrapper} {\n    background-color: ${Colors.accentGray()};\n    transition: background-color 100ms;\n  }\n\n  :hover ${IconWrapper} {\n    background-color: ${Colors.accentGrayHover()};\n  }\n\n  :focus ${IconWrapper} {\n    background-color: ${Colors.linkDefault()};\n  }\n`;\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const filterPermissionedInstigationState = (\n  instigationState: BasicInstigationStateFragment,\n) => {\n  return (\n    (instigationState.hasStartPermission &&\n      instigationState.status === InstigationStatus.STOPPED) ||\n    (instigationState.hasStopPermission && instigationState.status === InstigationStatus.RUNNING)\n  );\n};\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const instigationStateSummary = (instigationStates: BasicInstigationStateFragment[]) => {\n  let anyOff = false;\n  let anyOn = false;\n\n  for (const state of instigationStates) {\n    const {status} = state;\n    if (status === InstigationStatus.RUNNING) {\n      anyOn = true;\n    } else if (status === InstigationStatus.STOPPED) {\n      anyOff = true;\n    }\n    if (anyOn && anyOff) {\n      break;\n    }\n  }\n\n  return {anyOff, anyOn};\n};\n","import {useReducer} from 'react';\n\nexport type OpenWithIntent = 'not-open' | 'start' | 'stop';\n\ntype CompletionState = {completed: number; errors: {[id: string]: string}};\n\ntype DialogState = {\n  step: 'initial' | 'updating' | 'completed';\n  completion: CompletionState;\n};\n\ntype DialogAction =\n  | {type: 'reset'}\n  | {type: 'start'}\n  | {type: 'update-success'}\n  | {type: 'update-error'; name: string; error: string}\n  | {type: 'complete'};\n\nconst initialState: DialogState = {\n  step: 'initial',\n  completion: {completed: 0, errors: {}},\n};\n\nconst reducer = (prevState: DialogState, action: DialogAction): DialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'start':\n      return {...prevState, step: 'updating'};\n    case 'update-success': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {...completion, completed: completion.completed + 1},\n      };\n    }\n    case 'update-error': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {\n          ...completion,\n          completed: completion.completed + 1,\n          errors: {...completion.errors, [action.name]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const useInstigationStateReducer = () => useReducer(reducer, initialState);\n","import {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationTick,\n  InstigationTickStatus,\n} from '../graphql/types';\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst THREE_DAYS = 60 * 60 * 24 * 3;\n\nexport const truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nexport function isStuckStartedTick(\n  tick: Pick<InstigationTick, 'timestamp' | 'endTimestamp' | 'status'>,\n  index: number,\n) {\n  return (\n    !tick.endTimestamp &&\n    // If the index is 0 and the tick does have an end timestamp then we can't know if its actually stuck or still in progress\n    // but if its older than three days then its very likely stuck\n    ((index !== 0 && tick.status === InstigationTickStatus.STARTED) ||\n      tick.timestamp * 1000 < Date.now() - THREE_DAYS)\n  );\n}\n\nexport function countPartitionsAddedOrDeleted(\n  requests: Pick<DynamicPartitionsRequestResult, 'partitionKeys' | 'type'>[],\n  type: DynamicPartitionsRequestType,\n) {\n  return requests.reduce((sum, request) => {\n    if (request.type === type) {\n      return sum + (request.partitionKeys?.length || 0);\n    }\n    return sum;\n  }, 0);\n}\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {gql, useQuery} from '@apollo/client';\nimport {NonIdealState, Spinner} from '@dagster-io/ui-components';\n\nimport {\n  PartitionRunListQuery,\n  PartitionRunListQueryVariables,\n} from './types/PartitionRunList.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {RUN_TABLE_RUN_FRAGMENT, RunTable} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\n\ninterface PartitionRunListProps {\n  pipelineName: string;\n  partitionName: string;\n}\n\nexport const PartitionRunList = (props: PartitionRunListProps) => {\n  const queryResult = useQuery<PartitionRunListQuery, PartitionRunListQueryVariables>(\n    PARTITION_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          pipelineName: props.pipelineName,\n          tags: [{key: DagsterTag.Partition, value: props.partitionName}],\n        },\n      },\n    },\n  );\n\n  useBlockTraceOnQueryResult(queryResult, 'PartitionRunListQuery');\n  const {data, loading} = queryResult;\n\n  if (loading || !data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n  return (\n    <div>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </div>\n  );\n};\n\nconst PARTITION_RUN_LIST_QUERY = gql`\n  query PartitionRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  MiddleTruncate,\n  Popover,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {PartitionRunList} from './PartitionRunList';\nimport {\n  BOX_SIZE,\n  GridColumn,\n  GridFloatingContainer,\n  LeftLabel,\n  TopLabel,\n  TopLabelTilted,\n  topLabelHeightForLabels,\n} from './RunMatrixUtils';\nimport {\n  PartitionStepStatusPipelineQuery,\n  PartitionStepStatusPipelineQueryVariables,\n} from './types/PartitionStepStatus.types';\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  MatrixData,\n  MatrixStep,\n  PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT,\n  PartitionRuns,\n  StatusSquareColor,\n  useMatrixData,\n} from './useMatrixData';\nimport {GraphQueryItem} from '../app/GraphQueryImpl';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetPartitionStatus} from '../assets/AssetPartitionStatus';\nimport {\n  PartitionHealthData,\n  PartitionHealthDimension,\n  Range,\n  partitionStatusAtIndex,\n} from '../assets/usePartitionHealthData';\nimport {GanttChartMode} from '../gantt/Constants';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {RunStatus} from '../graphql/types';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {linkToRunEvent} from '../runs/RunUtils';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {MenuLink} from '../ui/MenuLink';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nconst BUFFER = 3;\n\nexport const getVisibleItemCount = (viewportWidth: number) =>\n  Math.ceil(viewportWidth / BOX_SIZE) - BUFFER;\n\ninterface PartitionRunSelection {\n  partitionName: string;\n  stepName?: string;\n}\n\ninterface PartitionStepStatusBaseProps {\n  offset: number;\n  setOffset: (val: number) => void;\n  setPageSize: (val: number) => void;\n  pipelineName: string;\n  partitionNames: string[];\n\n  runFilters?: RunFilterToken[];\n  setRunFilters?: (val: RunFilterToken[]) => void;\n}\n\nconst timeboundsOfPartitions = (partitionColumns: {steps: {unix: number}[]}[]) => {\n  let [minUnix, maxUnix] = [Date.now() / 1000, 1];\n  for (const partition of partitionColumns) {\n    for (const step of partition.steps) {\n      if (step.unix === 0) {\n        continue;\n      }\n      [minUnix, maxUnix] = [Math.min(minUnix, step.unix), Math.max(maxUnix, step.unix)];\n    }\n  }\n  return [minUnix, maxUnix] as const;\n};\n\ninterface PartitionPerAssetStatusProps\n  extends Omit<PartitionStepStatusBaseProps, 'partitionNames'> {\n  assetHealth: PartitionHealthData[];\n  assetQueryItems: GraphQueryItem[];\n  rangeDimensionIdx: number;\n  rangeDimension: PartitionHealthDimension;\n}\n\nexport const PartitionPerAssetStatus = React.memo(\n  ({\n    assetHealth,\n    rangeDimension,\n    rangeDimensionIdx,\n    assetQueryItems,\n    ...rest\n  }: PartitionPerAssetStatusProps) => {\n    const rangesByAssetKey = useMemo(() => {\n      const rangesByAssetKey: {[assetKey: string]: Range[]} = {};\n      for (const a of assetHealth) {\n        if (a.dimensions[rangeDimensionIdx]?.name !== rangeDimension.name) {\n          // Ignore assets in the job / graph that do not have the range partition dimension.\n          continue;\n        }\n        const ranges = a.rangesForSingleDimension(rangeDimensionIdx);\n        rangesByAssetKey[tokenForAssetKey(a.assetKey)] = ranges;\n      }\n      return rangesByAssetKey;\n    }, [assetHealth, rangeDimension.name, rangeDimensionIdx]);\n\n    const layoutBoxesWithRangeDimension = useMemo(() => {\n      const layout = buildLayout({nodes: assetQueryItems, mode: GanttChartMode.FLAT});\n      return layout.boxes.filter((b) => !!rangesByAssetKey[b.node.name]);\n    }, [assetQueryItems, rangesByAssetKey]);\n\n    const data: MatrixData = useMemo(\n      () => ({\n        stepRows: layoutBoxesWithRangeDimension.map((box) => ({\n          x: box.x,\n          name: box.node.name,\n          totalFailurePercent: 0,\n          finalFailurePercent: 0,\n        })),\n        partitions: [],\n        partitionColumns: rangeDimension.partitionKeys.map((partitionKey, partitionKeyIdx) => ({\n          idx: partitionKeyIdx,\n          name: partitionKey,\n          runsLoaded: true,\n          runs: [],\n          steps: layoutBoxesWithRangeDimension.map((box) => ({\n            name: box.node.name,\n            unix: 0,\n            color: assetPartitionStatusToSquareColor(\n              partitionStatusAtIndex(rangesByAssetKey[box.node.name]!, partitionKeyIdx),\n            ),\n          })),\n        })),\n      }),\n      [layoutBoxesWithRangeDimension, rangeDimension.partitionKeys, rangesByAssetKey],\n    );\n\n    return (\n      <PartitionStepStatus\n        {...rest}\n        partitionNames={rangeDimension.partitionKeys}\n        data={data}\n        showLatestRun={false}\n      />\n    );\n  },\n);\n\nconst assetPartitionStatusToSquareColor = (state: AssetPartitionStatus[]): StatusSquareColor => {\n  return state.includes(AssetPartitionStatus.MATERIALIZED) &&\n    state.includes(AssetPartitionStatus.MISSING)\n    ? 'SUCCESS-MISSING'\n    : state.includes(AssetPartitionStatus.MATERIALIZED)\n    ? 'SUCCESS'\n    : state.includes(AssetPartitionStatus.FAILED) && state.includes(AssetPartitionStatus.MISSING)\n    ? 'FAILURE-MISSING'\n    : state.includes(AssetPartitionStatus.FAILED)\n    ? 'FAILURE'\n    : 'MISSING';\n};\n\ninterface PartitionPerOpStatusProps extends PartitionStepStatusBaseProps {\n  repoAddress: RepoAddress;\n  partitions: PartitionRuns[];\n}\n\nexport const PartitionPerOpStatus = React.memo(\n  ({repoAddress, pipelineName, partitions, partitionNames, ...rest}: PartitionPerOpStatusProps) => {\n    // Retrieve the pipeline's structure\n    const repositorySelector = repoAddressToSelector(repoAddress);\n    const pipelineSelector = {...repositorySelector, pipelineName};\n    const pipeline = useQuery<\n      PartitionStepStatusPipelineQuery,\n      PartitionStepStatusPipelineQueryVariables\n    >(PARTITION_STEP_STATUS_PIPELINE_QUERY, {\n      variables: {pipelineSelector},\n      fetchPolicy: 'no-cache',\n    });\n\n    useBlockTraceOnQueryResult(pipeline, 'PartitionStepStatusPipelineQuery');\n\n    const solidHandles =\n      pipeline.data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n      pipeline.data.pipelineSnapshotOrError.solidHandles;\n\n    const data = useMatrixData(\n      useMemo(\n        () => ({\n          partitionNames,\n          partitions,\n          stepQuery: '',\n          solidHandles,\n        }),\n        [partitionNames, partitions, solidHandles],\n      ),\n    );\n\n    if (!data) {\n      return <span />;\n    }\n    return (\n      <PartitionStepStatus\n        {...rest}\n        showLatestRun={true}\n        pipelineName={pipelineName}\n        partitionNames={partitionNames}\n        data={data}\n      />\n    );\n  },\n);\n\ninterface PartitionStepStatusProps extends PartitionStepStatusBaseProps {\n  data: MatrixData;\n  showLatestRun: boolean;\n}\n\nconst PartitionStepStatus = React.memo((props: PartitionStepStatusProps) => {\n  const {viewport, containerProps} = useViewport();\n  const [hovered, setHovered] = useState<PartitionRunSelection | null>(null);\n  const [focused, setFocused] = useState<PartitionRunSelection | null>(null);\n  const {setPageSize, data} = props;\n\n  useEffect(() => {\n    if (viewport.width) {\n      setPageSize(getVisibleItemCount(viewport.width));\n    }\n  }, [viewport.width, setPageSize]);\n\n  const {stepRows, partitionColumns} = data;\n\n  const sortPartitionSteps = (steps: MatrixStep[]) => {\n    const stepsByName = {};\n    steps.forEach((step) => ((stepsByName as any)[step.name] = step));\n    return stepRows.map((stepRow) => (stepsByName as any)[stepRow.name]);\n  };\n\n  const visibleCount = getVisibleItemCount(viewport.width);\n  const visibleStart = Math.max(0, partitionColumns.length - props.offset - visibleCount);\n  const visibleEnd = Math.max(visibleCount, partitionColumns.length - props.offset);\n  const visibleColumns = useMemo(\n    () => partitionColumns.slice(visibleStart, visibleEnd),\n    [partitionColumns, visibleEnd, visibleStart],\n  );\n  const [minUnix, maxUnix] = useMemo(\n    () => timeboundsOfPartitions(partitionColumns),\n    [partitionColumns],\n  );\n  const topLabelHeight = useMemo(\n    () => topLabelHeightForLabels(partitionColumns.map((p) => p.name)),\n    [partitionColumns],\n  );\n\n  return (\n    <PartitionRunMatrixContainer>\n      <Dialog\n        isOpen={!!focused}\n        onClose={() => setFocused(null)}\n        style={{width: '90vw'}}\n        title={focused ? `${focused.partitionName} runs` : ''}\n      >\n        <Box padding={{bottom: 12}}>\n          {focused && (\n            <PartitionRunList\n              pipelineName={props.pipelineName}\n              partitionName={focused.partitionName}\n            />\n          )}\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" autoFocus={true} onClick={() => setFocused(null)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <div\n        style={{\n          position: 'relative',\n          display: 'flex',\n        }}\n      >\n        <GridFloatingContainer floating={props.offset + visibleCount < props.partitionNames.length}>\n          <GridColumn disabled style={{flex: 1, flexShrink: 1, overflow: 'hidden'}}>\n            <TopLabel style={{height: topLabelHeight}} />\n            {props.showLatestRun && <LeftLabel style={{paddingLeft: 24}}>Last Run</LeftLabel>}\n            <Divider />\n            {stepRows.map((step) => (\n              <LeftLabel\n                style={{paddingLeft: 8 + step.x, paddingRight: 8}}\n                key={step.name}\n                data-tooltip={step.name}\n                hovered={step.name === hovered?.stepName}\n              >\n                <MiddleTruncate text={step.name} />\n              </LeftLabel>\n            ))}\n          </GridColumn>\n        </GridFloatingContainer>\n\n        {props.offset + visibleCount < props.partitionNames.length ? (\n          <PagerControl\n            $direction=\"left\"\n            onClick={() =>\n              props.setOffset(\n                Math.max(\n                  0,\n                  Math.min(\n                    props.offset + visibleCount - 1,\n                    props.partitionNames.length - visibleCount,\n                  ),\n                ),\n              )\n            }\n          >\n            <Icon name=\"chevron_left\" />\n          </PagerControl>\n        ) : null}\n        <div style={{flex: 1, overflow: 'hidden', position: 'relative'}} {...containerProps}>\n          <div\n            style={{\n              width: partitionColumns.length * BOX_SIZE,\n              position: 'absolute',\n              height: '100%',\n              right: 0,\n              zIndex: 1,\n            }}\n          >\n            {visibleColumns.map((p, idx) => (\n              <GridColumn\n                key={p.name}\n                style={{\n                  zIndex: visibleColumns.length - idx,\n                  width: BOX_SIZE,\n                  position: 'absolute',\n                  right: (visibleCount - idx) * BOX_SIZE + 20,\n                }}\n              >\n                <TopLabelTilted $height={topLabelHeight} label={p.name} />\n                {props.showLatestRun && (\n                  <LeftLabel style={{textAlign: 'center'}}>\n                    <PartitionSquare\n                      key={`${p.name}:__full_status`}\n                      runs={p.runs}\n                      runsLoaded={p.runsLoaded}\n                      minUnix={minUnix}\n                      maxUnix={maxUnix}\n                      hovered={hovered}\n                      setHovered={setHovered}\n                      setFocused={setFocused}\n                      partitionName={p.name}\n                    />\n                  </LeftLabel>\n                )}\n                <Divider />\n                {sortPartitionSteps(p.steps).map((s) => (\n                  <PartitionSquare\n                    key={s.name}\n                    step={s}\n                    runs={p.runs}\n                    runsLoaded={p.runsLoaded}\n                    minUnix={minUnix}\n                    maxUnix={maxUnix}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setFocused={setFocused}\n                    partitionName={p.name}\n                  />\n                ))}\n              </GridColumn>\n            ))}\n          </div>\n        </div>\n        {props.offset > 0 ? (\n          <PagerControl\n            $direction=\"right\"\n            onClick={() => props.setOffset(Math.max(0, props.offset - visibleCount))}\n          >\n            <Icon name=\"chevron_right\" />\n          </PagerControl>\n        ) : null}\n      </div>\n    </PartitionRunMatrixContainer>\n  );\n});\n\nconst PagerControl = styled.div<{$direction: 'left' | 'right'}>`\n  width: 30px;\n  position: absolute;\n  border: 1px solid ${Colors.keylineDefault()};\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: calc(50% - 15px);\n  bottom: calc(50% - 15px);\n  ${({$direction}) => ($direction === 'left' ? 'left: 315px;' : 'right: 0;')}\n  background: ${Colors.backgroundDefault()};\n  z-index: 10;\n\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  &:hover {\n    background: ${Colors.backgroundDefaultHover()};\n  }\n`;\n\nconst PartitionRunMatrixContainer = styled.div`\n  display: block;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 5px;\n  border-top: 1px solid ${Colors.keylineDefault()};\n`;\n\n// add in the explorer fragment, so we can reconstruct the faux-plan steps from the exploded plan\n// in the same way we construct the explorer graph\nconst PARTITION_STEP_STATUS_PIPELINE_QUERY = gql`\n  query PartitionStepStatusPipelineQuery($pipelineSelector: PipelineSelector) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          ...PartitionMatrixSolidHandleFragment\n        }\n      }\n    }\n  }\n\n  ${PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT}\n`;\n\nconst TOOLTIP_STYLE = JSON.stringify({\n  top: 20,\n  left: 10,\n});\n\nconst PartitionSquare = React.memo(\n  ({\n    step,\n    runs,\n    runsLoaded,\n    hovered,\n    setHovered,\n    setFocused,\n    partitionName,\n  }: {\n    step?: MatrixStep;\n    runs: PartitionMatrixStepRunFragment[];\n    runsLoaded: boolean;\n    hovered: PartitionRunSelection | null;\n    minUnix: number;\n    maxUnix: number;\n    partitionName: string;\n    setHovered: (hovered: PartitionRunSelection | null) => void;\n    setFocused: (hovered: PartitionRunSelection | null) => void;\n  }) => {\n    const [opened, setOpened] = useState(false);\n    let squareStatus;\n\n    if (!runsLoaded) {\n      squareStatus = 'loading';\n    } else if (step) {\n      squareStatus = step.color.toLowerCase();\n    } else if (runs.length === 0) {\n      squareStatus = 'empty';\n    } else {\n      const runStatus = [...runs].reverse().find((r) => r.status !== RunStatus.CANCELED)?.status;\n      if (runStatus) {\n        squareStatus = runStatus.toLowerCase();\n      } else {\n        squareStatus = 'empty';\n      }\n    }\n    const content = (\n      <div\n        className={`square ${squareStatus}`}\n        onMouseEnter={() => setHovered({stepName: step?.name, partitionName})}\n        onMouseLeave={() => setHovered(null)}\n        data-tooltip={\n          runsLoaded && !step ? (runs.length === 1 ? `1 run` : `${runs.length} runs`) : undefined\n        }\n        data-tooltip-style={TOOLTIP_STYLE}\n      />\n    );\n\n    if (\n      !opened &&\n      (!runs.length || hovered?.stepName !== step?.name || hovered?.partitionName !== partitionName)\n    ) {\n      return content;\n    }\n\n    return (\n      <Popover\n        interactionKind=\"click\"\n        placement=\"bottom-start\"\n        onOpening={() => setOpened(true)}\n        onClosed={() => setOpened(false)}\n        content={\n          <Menu>\n            <MenuLink\n              icon=\"open_in_new\"\n              text=\"Show logs from last run\"\n              to={linkToRunEvent(runs[runs.length - 1]!, {stepKey: step ? step.name : null})}\n            />\n            <MenuItem\n              icon=\"settings_backup_restore\"\n              text={`View runs (${runs.length})`}\n              onClick={() => setFocused({stepName: step?.name, partitionName})}\n            />\n          </Menu>\n        }\n      >\n        {content}\n      </Popover>\n    );\n  },\n);\n","import {Colors} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nexport const BOX_SIZE = 32;\n\nconst STEP_STATUS_COLORS = {\n  SUCCESS: Colors.accentGreen(),\n  SUCCESS_SKIPPED: Colors.accentGreenHover(),\n  FAILURE: Colors.accentRed(),\n  FAILURE_SKIPPED: Colors.accentRedHover(),\n  SKIPPED: Colors.accentYellow(),\n  IN_PROGRESS: Colors.accentBlue(),\n};\n\n// In CSS, you can layer multiple backgrounds on top of each other by comma-separating values in\n// `background`. However, this only works with gradients, not with primitive color values. To do\n// hovered + red without color math (?), just stack the colors as flat gradients.\nconst flatGradient = (color: string) => `linear-gradient(to left, ${color} 0%, ${color} 100%)`;\nconst flatGradientStack = (colors: string[]) => colors.map(flatGradient).join(',');\n\nexport const GridColumn = styled.div<{\n  disabled?: boolean;\n  hovered?: boolean;\n  focused?: boolean;\n  multiselectFocused?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  line-height: 0;\n\n  ${({disabled, focused, multiselectFocused, hovered}) =>\n    !disabled &&\n    !focused &&\n    !multiselectFocused &&\n    `&${hovered ? '' : ':hover'} {\n      background: ${Colors.backgroundDefaultHover()};\n      cursor: default;\n      ${TopLabelTiltedInner} {\n        background: ${Colors.backgroundDefaultHover()};\n        .tilted {\n          background: ${Colors.backgroundLight()};\n        }\n      }\n      .square {\n        filter: brightness(95%);\n      }\n    }`}\n\n  ${({disabled}) =>\n    disabled &&\n    `\n      ${TopLabelTiltedInner} {\n        color: ${Colors.textLight()}\n      }\n    `}\n\n  ${({focused}) =>\n    focused &&\n    `background: ${Colors.accentBlue()};\n    ${LeftLabel} {\n      color: ${Colors.accentReversed()};\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.accentPrimary()};\n      color: ${Colors.accentReversed()};\n      .tilted {\n        background: ${Colors.accentBlue()};\n      }\n    }\n  }`}\n\n  ${({multiselectFocused}) =>\n    multiselectFocused &&\n    `background: ${Colors.accentBlueHover()};\n    ${LeftLabel} {\n      color: ${Colors.accentReversed()};\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.accentPrimary()};\n      color: ${Colors.accentReversed()};\n      .tilted {\n        background: ${Colors.accentBlueHover()};\n      }\n    }\n  }`}\n\n  .cell {\n    height: ${BOX_SIZE}px;\n    display: inline-block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-size: 12px;\n    padding: 2px;\n    box-sizing: border-box;\n    line-height: initial;\n  }\n\n  .square {\n    width: 20px;\n    height: 20px;\n    margin: 6px;\n    display: inline-block;\n\n    &:hover:not(.empty):before {\n      box-shadow: ${Colors.accentBlue()} 0 0 0 3px;\n    }\n    &:before {\n      content: ' ';\n      background: ${Colors.accentGray()};\n      border-radius: 10px;\n      display: inline-block;\n      width: 20px;\n      height: 20px;\n    }\n    &.loading {\n      &:before {\n        background: radial-gradient(\n          ${Colors.backgroundGray()} 0%,\n          ${Colors.backgroundGray()} 45%,\n          ${Colors.backgroundGrayHover()} 60%\n        );\n      }\n    }\n    &.success {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS};\n      }\n    }\n    &.failure {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE};\n      }\n    }\n    &.success-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS_SKIPPED};\n      }\n    }\n    &.failure-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.failure-blank {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.skipped {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SKIPPED};\n      }\n    }\n    &.started,\n    &.starting,\n    &.canceling {\n      &:before {\n        background: ${STEP_STATUS_COLORS.IN_PROGRESS};\n      }\n    }\n  }\n`;\n\nexport const LeftLabel = styled.div<{hovered?: boolean}>`\n  height: ${BOX_SIZE}px;\n  line-height: ${BOX_SIZE}px;\n  font-size: 13px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  position: relative;\n  background: ${({hovered}) =>\n    flatGradientStack([hovered ? Colors.backgroundLight() : 'transparent'])};\n`;\n\nexport const TopLabel = styled.div`\n  position: relative;\n  height: 70px;\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  align-items: flex-end;\n  display: flex;\n`;\n\nconst TITLE_MARGIN_BOTTOM = 15;\nconst ROTATION_DEGREES = 41;\n\nexport function topLabelHeightForLabels(labels: string[]) {\n  let maxLength = 0;\n  for (const label of labels) {\n    maxLength = Math.max(maxLength, label.length);\n  }\n  return (maxLength > 10 ? maxLength * 4.9 : 55) + TITLE_MARGIN_BOTTOM;\n}\n\nexport const TopLabelTilted = ({label, $height}: {label: string; $height: number}) => {\n  return (\n    <TopLabelTiltedInner style={{height: $height - TITLE_MARGIN_BOTTOM}}>\n      <div className=\"tilted\">{label}</div>\n    </TopLabelTiltedInner>\n  );\n};\n\nconst TopLabelTiltedInner = styled.div`\n  position: relative;\n  height: unset; /* provide via style tag */\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  margin-bottom: ${TITLE_MARGIN_BOTTOM}px;\n  align-items: end;\n  display: flex;\n  line-height: normal;\n\n  & > div.tilted {\n    font-size: 12px;\n    white-space: nowrap;\n    position: absolute;\n    bottom: -20px;\n    left: 0;\n    padding: 2px;\n    padding-right: 4px;\n    padding-left: 0;\n    transform: rotate(-${ROTATION_DEGREES}deg);\n    transform-origin: top left;\n  }\n`;\n\nexport const GRID_FLOATING_CONTAINER_WIDTH = 330;\n\nexport const GridFloatingContainer = styled.div<{floating: boolean}>`\n  display: flex;\n  border-right: 1px solid ${Colors.borderDefault()};\n  padding-bottom: 16px;\n  width: ${GRID_FLOATING_CONTAINER_WIDTH}px;\n  z-index: 1;\n  ${({floating}) => (floating ? 'box-shadow: 1px 0 4px rgba(0, 0, 0, 0.15)' : '')};\n`;\n","import {createContext, useContext, useEffect, useRef, useState} from 'react';\nimport {unstable_batchedUpdates} from 'react-dom';\n\n/**\n * Context to accumulate updates over 200ms and batch them together to reduce the number of renders\n * Using a context instead of global state to make it easier to reset state across tests.\n */\nexport const ThrottledMemoBatchingContext = createContext<{enqueue: (update: () => void) => void}>(\n  (() => {\n    let isScheduled = false;\n    const queue: Array<() => void> = [];\n    return {\n      enqueue: (update: () => void) => {\n        queue.push(update);\n        if (!isScheduled) {\n          isScheduled = true;\n          setTimeout(() => {\n            unstable_batchedUpdates(() => {\n              while (queue.length) {\n                queue.shift()!();\n              }\n              isScheduled = false;\n            });\n          }, 200);\n        }\n      },\n    };\n  })(),\n);\n\nexport const useThrottledMemo = <T,>(\n  factory: () => T,\n  deps: React.DependencyList,\n  delay: number,\n): T => {\n  const [state, setState] = useState<T>(factory);\n  const lastRun = useRef<number>(Date.now());\n  const timeoutId = useRef<NodeJS.Timeout | null>(null);\n  const {enqueue} = useContext(ThrottledMemoBatchingContext);\n\n  useEffect(() => {\n    let isCancelled = false;\n    const now = Date.now();\n    if (now - lastRun.current >= delay) {\n      enqueue(() => {\n        setState(factory);\n      });\n      lastRun.current = now;\n    } else {\n      if (timeoutId.current) {\n        clearTimeout(timeoutId.current);\n      }\n      timeoutId.current = setTimeout(\n        () => {\n          enqueue(() => {\n            if (isCancelled) {\n              return;\n            }\n            setState(factory);\n          });\n          lastRun.current = Date.now();\n        },\n        delay - (now - lastRun.current),\n      );\n    }\n\n    return () => {\n      isCancelled = true;\n      if (timeoutId.current) {\n        clearTimeout(timeoutId.current);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  return state;\n};\n","import {gql} from '@apollo/client';\n\nimport {\n  PartitionMatrixSolidHandleFragment,\n  PartitionMatrixStepRunFragment,\n} from './types/useMatrixData.types';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {GanttChartLayout} from '../gantt/Constants';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {StepEventStatus} from '../graphql/types';\nimport {useThrottledMemo} from '../hooks/useThrottledMemo';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\n\nexport type StatusSquareColor =\n  | 'SUCCESS'\n  | 'FAILURE'\n  | 'MISSING'\n  | 'FAILURE-MISSING'\n  | 'SUCCESS-MISSING';\n\nexport interface PartitionRuns {\n  name: string;\n  runsLoaded: boolean;\n  runs: PartitionMatrixStepRunFragment[];\n}\n\ninterface DisplayOptions {\n  showFailuresAndGapsOnly: boolean;\n  showPrevious: boolean;\n  colorizeByAge: boolean;\n  colorizeSliceUnix: number;\n}\n\nconst DYNAMIC_STEP_REGEX_SUFFIX = '\\\\[.*\\\\]';\n\nexport interface MatrixStep {\n  name: string;\n  color: string;\n  unix: number;\n}\n\nconst MISSING_STEP_STATUSES = new Set([StepEventStatus.IN_PROGRESS, StepEventStatus.SKIPPED]);\n\nfunction getStartTime(a: PartitionMatrixStepRunFragment) {\n  return a.startTime || 0;\n}\n\nfunction byStartTimeAsc(a: PartitionMatrixStepRunFragment, b: PartitionMatrixStepRunFragment) {\n  return getStartTime(a) - getStartTime(b);\n}\n\n// BG Note: Dagster 0.10.0 removed the .compute step key suffix, but the Run Matrix takes the current\n// step tree and looks up data for each step in historical runs. For continuity across 0.10.0, we\n// match historical step keys with the .compute format as well. We can remove safely after 120 days?\nfunction isStepKeyForNode(nodeName: string, stepKey: string) {\n  const dynamicRegex = new RegExp(nodeName + DYNAMIC_STEP_REGEX_SUFFIX);\n  return stepKey === nodeName || stepKey === `${nodeName}.compute` || stepKey.match(dynamicRegex);\n}\n\nfunction buildMatrixData(\n  layout: GanttChartLayout,\n  partitionNames: string[],\n  partitionsByName: Record<string, PartitionRuns>,\n  options?: DisplayOptions,\n) {\n  const partitionColumns = partitionNames.map((name, idx) => {\n    const partition: PartitionRuns = (partitionsByName as any)[name] || {\n      name,\n      runsLoaded: false,\n      runs: [],\n    };\n    const steps = layout.boxes.map(({node}) => {\n      const blankState = {\n        name: node.name,\n        color: 'MISSING' as StatusSquareColor,\n        unix: 0,\n      };\n\n      if (!partition.runs.length) {\n        return blankState;\n      }\n\n      const lastRun = partition.runs[partition.runs.length - 1]!;\n      const lastRunStepStatus = lastRun.stepStats.find((stats) =>\n        isStepKeyForNode(node.name, stats.stepKey),\n      )?.status;\n\n      let previousRunStatus;\n      if (\n        partition.runs.length > 1 &&\n        (!lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus))\n      ) {\n        let idx = partition.runs.length - 2;\n        while (idx >= 0 && !previousRunStatus) {\n          const currRun = partition.runs[idx]!;\n          const currRunStatus = currRun.stepStats.find((stats) =>\n            isStepKeyForNode(node.name, stats.stepKey),\n          )?.status;\n          if (currRunStatus && !MISSING_STEP_STATUSES.has(currRunStatus)) {\n            previousRunStatus = currRunStatus;\n            break;\n          }\n          idx--;\n        }\n      }\n\n      if (!lastRunStepStatus && !previousRunStatus) {\n        return blankState;\n      }\n\n      const color: StatusSquareColor =\n        !lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus)\n          ? (`${previousRunStatus}-MISSING` as StatusSquareColor)\n          : (lastRunStepStatus as StatusSquareColor);\n      return {\n        name: node.name,\n        unix: getStartTime(lastRun),\n        color,\n      };\n    });\n    return {\n      ...partition,\n      steps,\n      idx,\n    };\n  });\n\n  const partitionsWithARun = partitionColumns.filter((p) => p.runs.length > 0).length;\n\n  const stepRows = layout.boxes.map((box, idx) => {\n    const totalFailures = partitionColumns.filter((p) => p.steps[idx]!.color.includes('FAILURE'));\n    const finalFailures = partitionColumns.filter((p) => p.steps[idx]!.color.endsWith('FAILURE'));\n    return {\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: partitionsWithARun\n        ? Math.round((totalFailures.length / partitionsWithARun) * 100)\n        : 0,\n      finalFailurePercent: partitionsWithARun\n        ? Math.round((finalFailures.length / partitionsWithARun) * 100)\n        : 0,\n    };\n  });\n\n  if (options?.showFailuresAndGapsOnly) {\n    for (let ii = stepRows.length - 1; ii >= 0; ii--) {\n      if (stepRows[ii]!.finalFailurePercent === 0) {\n        stepRows.splice(ii, 1);\n        partitionColumns.forEach((p) => p.steps.splice(ii, 1));\n      }\n    }\n    for (let ii = partitionColumns.length - 1; ii >= 0; ii--) {\n      if (\n        partitionColumns[ii]!.runs.length === 0 ||\n        partitionColumns[ii]!.steps.every((step) => step.color.includes('SUCCESS'))\n      ) {\n        partitionColumns.splice(ii, 1);\n      }\n    }\n  }\n\n  return {stepRows, partitionColumns};\n}\n\ninterface MatrixDataInputs {\n  solidHandles: PartitionMatrixSolidHandleFragment[] | false;\n  partitionNames: string[];\n  partitions: PartitionRuns[];\n  stepQuery: string;\n  options?: DisplayOptions;\n}\n\nexport type MatrixData = ReturnType<typeof buildMatrixData>;\n\n/**\n * This hook uses the inputs provided to filter the data displayed and calls through to buildMatrixData.\n * It uses a React ref to cache the result and avoids re-computing when all inputs are shallow-equal.\n *\n * - This could alternatively be implemented via React.memo and an outer + inner component pair, but I\n *   didn't want to split <PartitionRunMatrix />\n * - This can't be a React useEffect with an array of deps because we want the cached value to be updated\n *   synchronously when the inputs are modified to avoid a double-render caused by an effect + state var.\n *\n * @param inputs\n */\nexport const useMatrixData = ({\n  solidHandles,\n  stepQuery,\n  partitionNames,\n  partitions,\n  options,\n}: MatrixDataInputs) => {\n  return useThrottledMemo(\n    () => {\n      const nodes = solidHandles\n        ? explodeCompositesInHandleGraph(solidHandles).map((h) => h.solid)\n        : [];\n      // Filter the pipeline's structure and build the flat gantt layout for the left hand side\n      const solidsFiltered = filterByQuery(nodes, stepQuery);\n      const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n      const partitionsByName: Record<string, PartitionRuns> = {};\n      partitions.forEach((p) => {\n        // sort partition runs in place\n        p.runs.sort(byStartTimeAsc);\n        partitionsByName[p.name] = p;\n      });\n      // Build the matrix of step + partition squares - presorted to match the gantt layout\n      return buildMatrixData(layout, partitionNames, partitionsByName, options);\n    },\n    [solidHandles, stepQuery, partitions, partitionNames, options],\n    1000,\n  );\n};\n\nexport const PARTITION_MATRIX_STEP_RUN_FRAGMENT = gql`\n  fragment PartitionMatrixStepRunFragment on Run {\n    id\n    status\n    startTime\n    endTime\n    stepStats {\n      stepKey\n      startTime\n      endTime\n      status\n    }\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT = gql`\n  fragment PartitionMatrixSolidHandleFragment on SolidHandle {\n    handleID\n    solid {\n      name\n      definition {\n        name\n      }\n      inputs {\n        dependsOn {\n          solid {\n            name\n          }\n        }\n      }\n      outputs {\n        dependedBy {\n          solid {\n            name\n          }\n        }\n      }\n    }\n    ...GraphExplorerSolidHandleFragment\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n","import {ApolloClient, gql, useApolloClient} from '@apollo/client';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  PartitionStepLoaderQuery,\n  PartitionStepLoaderQueryVariables,\n} from './types/usePartitionStepQuery.types';\nimport {PARTITION_MATRIX_STEP_RUN_FRAGMENT, PartitionRuns} from './useMatrixData';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {RepositorySelector, RunStatus} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\n\ninterface DataState {\n  runs: PartitionMatrixStepRunFragment[];\n  partitionNames: string[];\n  loading: boolean;\n  loadingCursorIdx: number;\n  error?: PythonErrorFragment;\n}\n\nconst InitialDataState: DataState = {\n  runs: [],\n  partitionNames: [],\n  loading: false,\n  loadingCursorIdx: 0,\n};\n\ntype PartitionStepQueryOptions = {\n  partitionSetName: string;\n  partitionTagName: string;\n  partitionNames: string[];\n  pageSize: number;\n  runsFilter: RunFilterToken[];\n  repositorySelector: RepositorySelector;\n  jobName?: string;\n  offset?: number;\n  skipQuery?: boolean;\n};\n\n/**\n * This React hook mirrors `useCursorPaginatedQuery` but collects each page of partitions\n * in slices that are smaller than pageSize and cause the results to load incrementally.\n */\nexport function usePartitionStepQuery({\n  partitionSetName,\n  partitionTagName,\n  partitionNames,\n  pageSize,\n  runsFilter,\n  jobName,\n  repositorySelector,\n  offset,\n  skipQuery,\n}: PartitionStepQueryOptions) {\n  const client = useApolloClient();\n\n  const version = useRef(0);\n  const [dataState, setDataState] = useState<DataState>(InitialDataState);\n\n  const _serializedRunTags = useMemo(\n    () =>\n      JSON.stringify([\n        ...runsFilter.map((token) => {\n          const [key, value] = token.value.split('=');\n          return {key, value};\n        }),\n        {\n          key: DagsterTag.RepositoryLabelTag,\n          value: `${repositorySelector.repositoryName}@${repositorySelector.repositoryLocationName}`,\n        },\n      ]),\n    [repositorySelector.repositoryLocationName, repositorySelector.repositoryName, runsFilter],\n  );\n\n  const partitionNamesSet = useMemo(() => new Set(partitionNames), [partitionNames]);\n\n  useEffect(() => {\n    // Note: there are several async steps to the loading process - to cancel the previous\n    // invocation, we bump a version number that is captured in a local variable.\n    // eg: If version.current no longer === v, this should stop updating state and exit.\n    const v = version.current + 1;\n    version.current = v;\n\n    const runTags = JSON.parse(_serializedRunTags);\n    setDataState((dataState) => ({...dataState, runs: [], loading: true}));\n\n    const run = async () => {\n      if (version.current !== v) {\n        return;\n      }\n      let loadingCursorIdx = partitionNames.length - (offset || 0);\n      const stopIdx = Math.max(0, loadingCursorIdx - pageSize);\n      setDataState((state) => ({...state, partitionNames, loadingCursorIdx}));\n\n      // Load runs in each of these partitions incrementally, running several queries in parallel\n      // to maximize the throughput we can achieve from the GraphQL interface.\n      const parallelQueries = 5;\n\n      while (loadingCursorIdx > stopIdx) {\n        const nextCursorIdx = Math.max(loadingCursorIdx - parallelQueries, 0);\n        const sliceNames = partitionNames.slice(nextCursorIdx, loadingCursorIdx);\n        const fetched = await Promise.all(\n          sliceNames.map((partitionName) => {\n            const partitionSetTag = {key: DagsterTag.PartitionSet, value: partitionSetName};\n            const partitionTag = {key: partitionTagName, value: partitionName};\n            // for jobs, filter by pipelineName/jobName instead of by partition set tag.  This\n            // preserves partition run history across the pipeline => job transition\n            const runTagsFilter = jobName\n              ? {\n                  pipelineName: jobName,\n                  tags: [...runTags, partitionTag],\n                }\n              : {tags: [...runTags, partitionTag, partitionSetTag]};\n            return fetchRunsForFilter(client, {limit: 1000, filter: runTagsFilter});\n          }),\n        );\n        if (version.current !== v) {\n          return;\n        }\n\n        loadingCursorIdx = nextCursorIdx;\n        setDataState((state) => ({\n          ...state,\n          runs: [...state.runs].concat(...fetched),\n          loading: loadingCursorIdx > 0,\n          loadingCursorIdx,\n        }));\n      }\n\n      // Periodically refresh pending runs and look for new runs in the displayed partitions.\n      // Note: this timer is canceled when a subsequent invocation of the useEffect updates `version.current`,\n      // because we don't want to create this interval until the initial load completes.\n\n      const timer: ReturnType<typeof setInterval> = setInterval(async () => {\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        setDataState((state) => ({...state, loading: true}));\n\n        // Fetch the 10 most recent runs for the pipeline so we pick up on new runs being launched.\n        // Note: this may be insufficient but seems like it will handle the 99% case where runs\n        // are either all queued (at the backfill start) or queued sequentially / slowly.\n        const recent = await fetchRunsForFilter(client, {\n          limit: 10,\n          filter: {\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        // Fetch runs in the partition set that are in the STARTED state, indicating active updates\n        const pending = await fetchRunsForFilter(client, {\n          filter: {\n            statuses: [RunStatus.STARTED],\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        // Filter detected changes to just runs in our visible range of partitions, and then update\n        // local state if changes have been found.\n        const relevant = [...pending, ...recent].filter((run) =>\n          run.tags.find((t) => t.key === partitionTagName && partitionNamesSet.has(t.value)),\n        );\n        setDataState((state) => {\n          const updated = state.runs\n            .filter((r) => !relevant.some((o) => o.id === r.id))\n            .concat(relevant);\n          return {...state, loading: false, runs: updated};\n        });\n      }, 10 * 1000);\n    };\n\n    if (!skipQuery) {\n      run();\n    }\n\n    return () => {\n      version.current += 1;\n    };\n  }, [\n    pageSize,\n    client,\n    partitionSetName,\n    partitionTagName,\n    _serializedRunTags,\n    jobName,\n    offset,\n    partitionNames,\n    skipQuery,\n    partitionNamesSet,\n  ]);\n\n  return useMemo(\n    () => assemblePartitions(dataState, partitionTagName),\n    [dataState, partitionTagName],\n  );\n}\n\nasync function fetchRunsForFilter(\n  client: ApolloClient<any>,\n  variables: PartitionStepLoaderQueryVariables,\n) {\n  const result = await client.query<PartitionStepLoaderQuery, PartitionStepLoaderQueryVariables>({\n    fetchPolicy: 'no-cache',\n    query: PARTITION_STEP_LOADER_QUERY,\n    variables,\n  });\n  return (\n    (result.data.pipelineRunsOrError.__typename === 'Runs' &&\n      result.data.pipelineRunsOrError.results) ||\n    []\n  );\n}\n\nfunction assemblePartitions(data: DataState, partitionTagName: string) {\n  // Note: Partitions don't have any unique keys beside their names, so we use names\n  // extensively in our display layer as React keys. To create unique empty partitions\n  // we use different numbers of zero-width space characters\n  const results: PartitionRuns[] = [];\n  const byName: {[name: string]: PartitionRuns} = {};\n\n  data.partitionNames.forEach((name, idx) => {\n    byName[name] = {\n      name,\n      runsLoaded: idx >= data.loadingCursorIdx,\n      runs: [],\n    };\n    results.push(byName[name]!);\n  });\n\n  data.runs.forEach((r) => {\n    const partitionName = r.tags.find((t) => t.key === partitionTagName)?.value || '';\n    byName[partitionName]?.runs.push(r);\n  });\n\n  return results;\n}\n\nconst PARTITION_STEP_LOADER_QUERY = gql`\n  query PartitionStepLoaderQuery($filter: RunsFilter!, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, cursor: $cursor, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ...PartitionMatrixStepRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PARTITION_MATRIX_STEP_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Box,\n  Colors,\n  FontFamily,\n  Icon,\n  MiddleTruncate,\n  Mono,\n  Popover,\n  Spinner,\n  Tag,\n  Tooltip,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusDot} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses, successStatuses} from './RunStatuses';\nimport {TimeElapsed} from './TimeElapsed';\nimport {RunBatch, batchRunsForTimeline} from './batchRunsForTimeline';\nimport {mergeStatusToBackground} from './mergeStatusToBackground';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {RunStatus} from '../graphql/types';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useFormatDateTime} from '../ui/useFormatDateTime';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {SECTION_HEADER_HEIGHT} from '../workspace/TableSectionHeader';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsURLString} from '../workspace/repoAddressAsString';\nimport {repoAddressFromPath} from '../workspace/repoAddressFromPath';\nimport {RepoAddress} from '../workspace/types';\n\nconst ROW_HEIGHT = 32;\nconst TIME_HEADER_HEIGHT = 32;\nconst DATE_TIME_HEIGHT = TIME_HEADER_HEIGHT * 2;\nconst EMPTY_STATE_HEIGHT = 110;\nconst LEFT_SIDE_SPACE_ALLOTTED = 320;\nconst LABEL_WIDTH = 268;\nconst MIN_DATE_WIDTH_PCT = 10;\n\nconst ONE_HOUR_MSEC = 60 * 60 * 1000;\n\nexport const CONSTANTS = {\n  ROW_HEIGHT,\n  DATE_TIME_HEIGHT,\n  TIME_HEADER_HEIGHT,\n  ONE_HOUR_MSEC,\n  EMPTY_STATE_HEIGHT,\n  LEFT_SIDE_SPACE_ALLOTTED,\n};\n\nexport type TimelineRun = {\n  id: string;\n  status: RunStatus | 'SCHEDULED';\n  startTime: number;\n  endTime: number;\n};\n\nexport type TimelineJob = {\n  key: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  jobType: 'job' | 'asset';\n  path: string;\n  runs: TimelineRun[];\n};\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; job: TimelineJob};\n\ninterface Props {\n  loading?: boolean;\n  jobs: TimelineJob[];\n  rangeMs: [number, number];\n}\n\nexport const RunTimeline = (props: Props) => {\n  const {loading = false, jobs, rangeMs} = props;\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const {\n    viewport: {width},\n    containerProps: {ref: measureRef},\n  } = useViewport();\n\n  const now = Date.now();\n  const [_, end] = rangeMs;\n  const includesTicks = now <= end;\n\n  const buckets = React.useMemo(\n    () =>\n      jobs.reduce(\n        (accum, job) => {\n          const {repoAddress} = job;\n          const repoKey = repoAddressAsURLString(repoAddress);\n          accum[repoKey] = accum[repoKey] || [];\n          accum[repoKey]!.push(job);\n          return accum;\n        },\n        {} as Record<string, TimelineJob[]>,\n      ),\n    [jobs],\n  );\n\n  const allKeys = Object.keys(buckets);\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    Object.entries(buckets)\n      .sort((bucketA, bucketB) => COMMON_COLLATOR.compare(bucketA[0], bucketB[0]))\n      .forEach(([repoKey, bucket]) => {\n        const repoAddress = repoAddressFromPath(repoKey);\n        if (!repoAddress) {\n          return;\n        }\n\n        flat.push({type: 'header', repoAddress, jobCount: bucket.length});\n        if (expandedKeys.includes(repoKey)) {\n          bucket\n            .sort((a, b) => COMMON_COLLATOR.compare(a.jobName, b.jobName))\n            .forEach((job) => {\n              flat.push({type: 'job', repoAddress, job});\n            });\n        }\n      });\n\n    return flat;\n  }, [buckets, expandedKeys]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (_: number) => 32,\n    overscan: 40,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  if (!width) {\n    return <div style={{height: DATE_TIME_HEIGHT + EMPTY_STATE_HEIGHT}} ref={measureRef} />;\n  }\n\n  const repoOrder = Object.keys(buckets).sort((a, b) => a.localeCompare(b));\n\n  const expandedRepos = repoOrder.filter((repoKey) => expandedKeys.includes(repoKey));\n  const expandedJobCount = expandedRepos.reduce(\n    (accum, repoKey) => accum + buckets[repoKey]!.length,\n    0,\n  );\n  const height = repoOrder.length * SECTION_HEADER_HEIGHT + ROW_HEIGHT * expandedJobCount;\n  const duplicateRepoNames = findDuplicateRepoNames(\n    repoOrder.map((repoKey) => repoAddressFromPath(repoKey)?.name || ''),\n  );\n  const anyJobs = repoOrder.length > 0;\n\n  return (\n    <>\n      <div ref={measureRef} />\n      <Box\n        padding={{left: 24}}\n        flex={{direction: 'column', justifyContent: 'center'}}\n        style={{fontSize: '16px', flex: `0 0 ${DATE_TIME_HEIGHT}px`}}\n        border=\"top-and-bottom\"\n      >\n        Jobs\n      </Box>\n      <div style={{position: 'relative'}}>\n        <TimeDividers interval={ONE_HOUR_MSEC} rangeMs={rangeMs} height={anyJobs ? height : 0} />\n      </div>\n      {repoOrder.length ? (\n        <div style={{overflow: 'hidden', position: 'relative'}}>\n          <Container ref={parentRef}>\n            <Inner $totalHeight={totalHeight}>\n              {items.map(({index, key, size, start}) => {\n                const row: RowType = flattened[index]!;\n                const type = row!.type;\n                if (type === 'header') {\n                  const repoKey = repoAddressAsURLString(row.repoAddress);\n                  const repoName = row.repoAddress.name;\n                  return (\n                    <TimelineHeaderRow\n                      expanded={expandedKeys.includes(repoKey)}\n                      key={repoKey}\n                      height={size}\n                      top={start}\n                      repoAddress={row.repoAddress}\n                      isDuplicateRepoName={!!(repoName && duplicateRepoNames.has(repoName))}\n                      jobs={buckets[repoKey]!}\n                      onToggle={onToggle}\n                      onToggleAll={onToggleAll}\n                    />\n                  );\n                }\n\n                return (\n                  <RunTimelineRow\n                    job={row.job}\n                    key={key}\n                    height={size}\n                    top={start}\n                    rangeMs={rangeMs}\n                    width={width}\n                  />\n                );\n              })}\n            </Inner>\n          </Container>\n        </div>\n      ) : (\n        <RunsEmptyOrLoading loading={loading} includesTicks={includesTicks} />\n      )}\n    </>\n  );\n};\n\ninterface TimelineHeaderRowProps {\n  expanded: boolean;\n  repoAddress: RepoAddress;\n  isDuplicateRepoName: boolean;\n  jobs: TimelineJob[];\n  height: number;\n  top: number;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}\n\nconst TimelineHeaderRow = (props: TimelineHeaderRowProps) => {\n  const {expanded, onToggle, onToggleAll, repoAddress, isDuplicateRepoName, jobs, height, top} =\n    props;\n\n  return (\n    <RepoRow\n      expanded={expanded}\n      height={height}\n      start={top}\n      repoAddress={repoAddress}\n      showLocation={isDuplicateRepoName}\n      onToggle={onToggle}\n      onToggleAll={onToggleAll}\n      rightElement={<RunStatusTags jobs={jobs} />}\n    />\n  );\n};\n\nconst RunStatusTags = React.memo(({jobs}: {jobs: TimelineJob[]}) => {\n  const counts = React.useMemo(() => {\n    let inProgressCount = 0;\n    let failedCount = 0;\n    let succeededCount = 0;\n    jobs.forEach(({runs}) => {\n      runs.forEach(({status}) => {\n        // Refine `SCHEDULED` out so that our Set checks below pass TypeScript.\n        if (status === 'SCHEDULED') {\n          return;\n        }\n        if (inProgressStatuses.has(status)) {\n          inProgressCount++;\n        } else if (failedStatuses.has(status)) {\n          failedCount++;\n        } else if (successStatuses.has(status)) {\n          succeededCount++;\n        }\n      });\n    });\n    return {inProgressCount, failedCount, succeededCount};\n  }, [jobs]);\n\n  return <RunStatusTagsWithCounts {...counts} />;\n});\n\nexport const RunStatusTagsWithCounts = ({\n  inProgressCount,\n  succeededCount,\n  failedCount,\n}: {\n  inProgressCount: number;\n  succeededCount: number;\n  failedCount: number;\n}) => {\n  const inProgressText =\n    inProgressCount === 1 ? '1 run in progress' : `${inProgressCount} runs in progress`;\n  const succeededText =\n    succeededCount === 1 ? '1 run succeeded' : `${succeededCount} runs succeeded`;\n  const failedText = failedCount === 1 ? '1 run failed' : `${failedCount} runs failed`;\n\n  return (\n    <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n      {inProgressCount > 0 ? (\n        <Tooltip content={<StatusSpan>{inProgressText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"primary\">{inProgressCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {succeededCount > 0 ? (\n        <Tooltip content={<StatusSpan>{succeededText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"success\">{succeededCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {failedCount > 0 ? (\n        <Tooltip content={<StatusSpan>{failedText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"danger\">{failedCount}</Tag>\n        </Tooltip>\n      ) : null}\n    </Box>\n  );\n};\n\nconst StatusSpan = styled.span`\n  white-space: nowrap;\n`;\n\ntype DateMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n  width: number;\n};\n\ntype TimeMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n};\n\ninterface TimeDividersProps {\n  height: number;\n  interval: number;\n  rangeMs: [number, number];\n  annotations?: {label: string; ms: number}[];\n  now?: number;\n}\n\nconst dateTimeOptions: Intl.DateTimeFormatOptions = {\n  month: 'numeric',\n  day: 'numeric',\n  year: 'numeric',\n};\n\nconst dateTimeOptionsWithTimezone: Intl.DateTimeFormatOptions = {\n  month: 'short',\n  day: 'numeric',\n  year: 'numeric',\n  timeZoneName: 'short',\n};\n\nconst timeOnlyOptionsWithMinute: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n  minute: 'numeric',\n};\n\nconst timeOnlyOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n};\n\nexport const TimeDividers = (props: TimeDividersProps) => {\n  const {interval, rangeMs, annotations, height, now: _now} = props;\n  const [start, end] = rangeMs;\n  const formatDateTime = useFormatDateTime();\n\n  const dateMarkers: DateMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startDate = new Date(start);\n    const startDateStringWithTimezone = formatDateTime(\n      startDate,\n      dateTimeOptionsWithTimezone,\n      'en-US',\n    );\n\n    const dayBoundaries = [];\n\n    // Create a date at midnight on this date in this timezone.\n    let cursor = new Date(startDateStringWithTimezone);\n\n    while (cursor.valueOf() < end) {\n      const dayStart = cursor.getTime();\n      const dayEnd = new Date(dayStart).setDate(cursor.getDate() + 1); // Increment by one day.\n      cursor = new Date(dayEnd);\n      dayBoundaries.push({dayStart, dayEnd});\n    }\n\n    return dayBoundaries.map(({dayStart, dayEnd}) => {\n      const date = new Date(dayStart);\n      const startLeftMsec = dayStart - start;\n      const dayLength = dayEnd - dayStart; // This can vary with DST\n      const endRight = startLeftMsec + dayLength;\n\n      const left = Math.max(0, (startLeftMsec / totalTime) * 100);\n      const right = Math.min(100, (endRight / totalTime) * 100);\n\n      return {\n        label: formatDateTime(date, dateTimeOptions),\n        key: date.toString(),\n        left,\n        width: right - left,\n      };\n    });\n  }, [end, formatDateTime, start]);\n\n  const timeMarkers: TimeMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startGap = start % interval;\n    const firstMarker = start - startGap;\n    const markerCount = Math.ceil(totalTime / interval) + 1;\n    return [...new Array(markerCount)]\n      .map((_, ii) => {\n        const time = firstMarker + ii * interval;\n        const date = new Date(time);\n        const label =\n          interval < ONE_HOUR_MSEC\n            ? formatDateTime(date, timeOnlyOptionsWithMinute).replace(' ', '')\n            : formatDateTime(date, timeOnlyOptions).replace(' ', '');\n        return {\n          label,\n          key: date.toString(),\n          left: ((time - start) / totalTime) * 100,\n        };\n      })\n      .filter((marker) => marker.left > 0);\n  }, [end, start, interval, formatDateTime]);\n\n  const now = _now || Date.now();\n  const msToLeft = (ms: number) => `${(((ms - start) / (end - start)) * 100).toPrecision(3)}%`;\n\n  return (\n    <DividerContainer style={{height: `${height}px`, top: `-${DATE_TIME_HEIGHT}px`}}>\n      <DividerLabels>\n        {dateMarkers.map((marker) => (\n          <DateLabel\n            key={marker.key}\n            style={{\n              left: `${marker.left.toPrecision(3)}%`,\n              width: `${marker.width.toPrecision(3)}%`,\n            }}\n          >\n            {marker.width > MIN_DATE_WIDTH_PCT ? (\n              <Box flex={{justifyContent: 'center'}}>{marker.label}</Box>\n            ) : null}\n          </DateLabel>\n        ))}\n      </DividerLabels>\n      <DividerLabels>\n        {timeMarkers.map((marker) => (\n          <TimeLabel key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}}>\n            {marker.label}\n          </TimeLabel>\n        ))}\n      </DividerLabels>\n      <DividerLines>\n        <DividerLine style={{left: 0, backgroundColor: Colors.keylineDefault()}} />\n        {timeMarkers.map((marker) => (\n          <DividerLine key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}} />\n        ))}\n        {now >= start && now <= end ? (\n          <>\n            <TimlineMarker style={{left: msToLeft(now)}}>Now</TimlineMarker>\n            <DividerLine\n              style={{left: msToLeft(now), backgroundColor: Colors.accentPrimary(), zIndex: 1}}\n            />\n          </>\n        ) : null}\n        {(annotations || [])\n          .filter((annotation) => annotation.ms >= start && annotation.ms <= end)\n          .map((annotation) => (\n            <React.Fragment key={annotation.label}>\n              <TimlineMarker style={{left: msToLeft(annotation.ms)}}>\n                {annotation.label}\n              </TimlineMarker>\n              <DividerLine\n                style={{\n                  left: msToLeft(annotation.ms),\n                  backgroundColor: Colors.accentPrimary(),\n                  zIndex: 1,\n                }}\n              />\n            </React.Fragment>\n          ))}\n      </DividerLines>\n    </DividerContainer>\n  );\n};\n\nconst DividerContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n  right: 0;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.textLighter()};\n`;\n\nconst DividerLabels = styled.div`\n  display: flex;\n  align-items: center;\n  box-shadow:\n    inset 1px 0 0 ${Colors.keylineDefault()},\n    inset 0 1px 0 ${Colors.keylineDefault()},\n    inset -1px 0 0 ${Colors.keylineDefault()};\n  height: ${TIME_HEADER_HEIGHT}px;\n  position: relative;\n  user-select: none;\n  font-size: 12px;\n  width: 100%;\n  overflow: hidden;\n\n  :first-child {\n    box-shadow:\n      inset 1px 0 0 ${Colors.keylineDefault()},\n      inset -1px 0 0 ${Colors.keylineDefault()};\n  }\n`;\n\nconst DateLabel = styled.div`\n  position: absolute;\n  padding: 8px 0;\n  white-space: nowrap;\n\n  :not(:first-child) {\n    box-shadow: inset 1px 0 0 ${Colors.keylineDefault()};\n  }\n`;\n\nconst TimeLabel = styled.div`\n  position: absolute;\n  padding: 8px;\n  box-shadow: inset 1px 0 0 ${Colors.keylineDefault()};\n  white-space: nowrap;\n`;\n\nconst DividerLines = styled.div`\n  height: 100%;\n  position: relative;\n  width: 100%;\n  box-shadow:\n    inset 1px 0 0 ${Colors.keylineDefault()},\n    inset -1px 0 0 ${Colors.keylineDefault()};\n`;\n\nconst DividerLine = styled.div`\n  background-color: ${Colors.keylineDefault()};\n  height: 100%;\n  position: absolute;\n  top: 0;\n  width: 1px;\n`;\n\nconst TimlineMarker = styled.div`\n  background-color: ${Colors.accentPrimary()};\n  border-radius: 1px;\n  color: ${Colors.accentReversed()};\n  cursor: default;\n  font-size: 10px;\n  line-height: 12px;\n  transform: translate(-50%, 0);\n  padding: 1px 4px;\n  position: absolute;\n  top: -14px;\n  user-select: none;\n`;\n\nconst MIN_CHUNK_WIDTH = 4;\nconst MIN_WIDTH_FOR_MULTIPLE = 12;\n\nconst RunTimelineRow = ({\n  job,\n  top,\n  height,\n  rangeMs,\n  width: containerWidth,\n}: {\n  job: TimelineJob;\n  top: number;\n  height: number;\n  rangeMs: [number, number];\n  width: number;\n}) => {\n  const [start, end] = rangeMs;\n  const width = containerWidth - LEFT_SIDE_SPACE_ALLOTTED;\n  const {runs} = job;\n\n  // Batch overlapping runs in this row.\n  const batched = React.useMemo(() => {\n    const batches: RunBatch<TimelineRun>[] = batchRunsForTimeline({\n      runs,\n      start,\n      end,\n      width,\n      minChunkWidth: MIN_CHUNK_WIDTH,\n      minMultipleWidth: MIN_WIDTH_FOR_MULTIPLE,\n    });\n\n    return batches;\n  }, [runs, start, end, width]);\n\n  if (!job.runs.length) {\n    return null;\n  }\n\n  return (\n    <TimelineRowContainer $height={height} $start={top}>\n      <JobName>\n        <Icon name={job.jobType === 'asset' ? 'asset' : 'job'} />\n        <div style={{width: LABEL_WIDTH}}>\n          {job.jobType === 'asset' ? (\n            <span style={{color: Colors.textDefault()}}>\n              <MiddleTruncate text={job.jobName} />\n            </span>\n          ) : (\n            <Link to={job.path}>\n              <MiddleTruncate text={job.jobName} />\n            </Link>\n          )}\n        </div>\n      </JobName>\n      <RunChunks>\n        {batched.map((batch) => {\n          const {left, width, runs} = batch;\n          const runCount = runs.length;\n          return (\n            <RunChunk\n              key={batch.runs[0]!.id}\n              $background={mergeStatusToBackground(batch.runs)}\n              $multiple={runCount > 1}\n              style={{\n                left: `${left}px`,\n                width: `${width}px`,\n              }}\n            >\n              <Popover\n                content={<RunHoverContent job={job} batch={batch} />}\n                position=\"top\"\n                interactionKind=\"hover\"\n                className=\"chunk-popover-target\"\n              >\n                <Box\n                  flex={{direction: 'row', justifyContent: 'center', alignItems: 'center'}}\n                  style={{height: '100%'}}\n                >\n                  {runCount > 1 ? <BatchCount>{batch.runs.length}</BatchCount> : null}\n                </Box>\n              </Popover>\n            </RunChunk>\n          );\n        })}\n      </RunChunks>\n    </TimelineRowContainer>\n  );\n};\n\nexport const RunsEmptyOrLoading = (props: {loading: boolean; includesTicks: boolean}) => {\n  const {loading, includesTicks} = props;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          {includesTicks ? 'Loading runs and scheduled ticks' : 'Loading runs'}\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12, alignItems: 'center'}}>\n        <div>\n          {includesTicks\n            ? 'No runs or scheduled ticks in this time period.'\n            : 'No runs in this time period.'}\n        </div>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <AnchorButton icon={<Icon name=\"add_circle\" />} to=\"/overview/jobs\">\n            Launch a run\n          </AnchorButton>\n          <span>or</span>\n          <AnchorButton icon={<Icon name=\"materialization\" />} to=\"/asset-groups\">\n            Materialize an asset\n          </AnchorButton>\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      background={Colors.backgroundDefault()}\n      padding={{vertical: 24}}\n      flex={{direction: 'row', justifyContent: 'center'}}\n      border=\"top-and-bottom\"\n    >\n      {content()}\n    </Box>\n  );\n};\n\ntype RowProps = {$height: number; $start: number};\n\nexport const TimelineRowContainer = styled.div.attrs<RowProps>(({$height, $start}) => ({\n  style: {\n    height: `${$height}px`,\n    transform: `translateY(${$start}px)`,\n  },\n}))<RowProps>`\n  align-items: center;\n  box-shadow: inset 0 -1px 0 ${Colors.keylineDefault()};\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  padding: 1px 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  overflow: hidden;\n  transition: background-color 100ms linear;\n\n  :hover {\n    background-color: ${Colors.backgroundDefaultHover()};\n  }\n`;\n\nconst JobName = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: flex-start;\n  gap: 8px;\n  line-height: 16px;\n  overflow: hidden;\n  padding: 0 12px 0 24px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n`;\n\nexport const RunChunks = styled.div`\n  flex: 1;\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n`;\n\ninterface ChunkProps {\n  $background: string;\n  $multiple: boolean;\n}\n\nexport const RunChunk = styled.div<ChunkProps>`\n  align-items: center;\n  background: ${({$background}) => $background};\n  border-radius: 1px;\n  height: ${ROW_HEIGHT - 8}px;\n  position: absolute;\n  top: 4px;\n  ${({$multiple}) => ($multiple ? `min-width: ${MIN_WIDTH_FOR_MULTIPLE}px` : null)};\n\n  transition:\n    background 200ms linear,\n    opacity 200ms linear,\n    width 200ms ease-in-out;\n\n  :hover {\n    opacity: 0.7;\n  }\n  .chunk-popover-target {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst BatchCount = styled.div`\n  color: ${Colors.accentReversed()};\n  cursor: default;\n  font-family: ${FontFamily.monospace};\n  font-size: 12px;\n  font-weight: 600;\n  user-select: none;\n`;\n\ninterface RunHoverContentProps {\n  job: TimelineJob;\n  batch: RunBatch<TimelineRun>;\n}\n\nconst RunHoverContent = (props: RunHoverContentProps) => {\n  const {job, batch} = props;\n  const sliced = batch.runs.slice(0, 50);\n  const remaining = batch.runs.length - sliced.length;\n\n  return (\n    <Box style={{width: '260px'}}>\n      <Box padding={12} border=\"bottom\">\n        <HoverContentJobName>{job.jobName}</HoverContentJobName>\n      </Box>\n      <div style={{maxHeight: '240px', overflowY: 'auto'}}>\n        {sliced.map((run, ii) => (\n          <Box\n            key={run.id}\n            border={ii > 0 ? 'top' : null}\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            padding={{vertical: 8, horizontal: 12}}\n          >\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <RunStatusDot status={run.status} size={8} />\n              {run.status === 'SCHEDULED' ? (\n                'Scheduled'\n              ) : (\n                <Link to={`/runs/${run.id}`}>\n                  <Mono>{run.id.slice(0, 8)}</Mono>\n                </Link>\n              )}\n            </Box>\n            <Mono>\n              {run.status === 'SCHEDULED' ? (\n                <TimestampDisplay timestamp={run.startTime / 1000} />\n              ) : (\n                <TimeElapsed startUnix={run.startTime / 1000} endUnix={run.endTime / 1000} />\n              )}\n            </Mono>\n          </Box>\n        ))}\n      </div>\n      {remaining > 0 ? (\n        <Box padding={12} border=\"top\">\n          <Link to={`${job.path}/runs`}>+ {remaining} more</Link>\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst HoverContentJobName = styled.strong`\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n`;\n","export interface RunWithTime {\n  startTime: number;\n  endTime: number;\n}\n\nexport type RunBatch<R extends RunWithTime> = {\n  runs: R[];\n  startTime: number;\n  endTime: number;\n  left: number;\n  width: number;\n};\n\ntype Config<R extends RunWithTime> = {\n  runs: R[];\n  start: number;\n  end: number;\n  width: number;\n  minChunkWidth: number;\n  minMultipleWidth: number;\n};\n\nexport const overlap = (a: {start: number; end: number}, b: {start: number; end: number}) =>\n  !(a.end < b.start || b.end < a.start);\n\n/**\n * Given a list of runs, batch any that overlap. Calculate `left` and `width` values for rendering\n * purposes, using minimum widths for very brief runs and overlapping batches.\n */\nexport const batchRunsForTimeline = <R extends RunWithTime>(config: Config<R>) => {\n  const {runs, start, end, width, minChunkWidth, minMultipleWidth} = config;\n  const rangeLength = end - start;\n\n  const now = Date.now();\n\n  // Give a pixel of breathing room for the \"now\" position.\n  const nowLeft = ((now - start) / (end - start)) * width + 1;\n\n  // Sort all runs by start time (via `left` value), ascending. Then iterate through\n  // them, batching them together.\n  const batches: RunBatch<R>[] = runs\n    .map((run) => {\n      const startTime = run.startTime;\n      const endTime = run.endTime || Date.now();\n      const left = Math.max(0, Math.floor(((startTime - start) / rangeLength) * width));\n      const runWidth = Math.max(\n        minChunkWidth,\n        Math.min(\n          Math.ceil(((endTime - startTime) / rangeLength) * width),\n          Math.ceil(((endTime - start) / rangeLength) * width),\n        ),\n      );\n\n      return {\n        runs: [run],\n        startTime,\n        endTime,\n        left,\n        width: runWidth,\n      };\n    })\n    .sort((a, b) => a.left - b.left);\n\n  const consolidated = [];\n\n  while (batches.length) {\n    const current = batches.shift();\n    const next = batches[0];\n    if (current) {\n      if (next && canBatch(current, next, minMultipleWidth, nowLeft)) {\n        // Remove `next`, consolidate it with `current`, and unshift it back on.\n        // This way, we keep looking for batches to consolidate with.\n        batches.shift();\n        current.runs = [...current.runs, ...next.runs];\n        current.startTime = Math.min(current.startTime, next.startTime);\n        current.endTime = Math.max(current.endTime, next.endTime);\n\n        // Identify the rightmost point for these two items.\n        const right = Math.max(\n          current.left + minMultipleWidth,\n          current.left + current.width,\n          next.left + next.width,\n        );\n\n        // Using the leftmost point, calculate the new width using the rightmost point\n        // determined above.\n        const minLeft = Math.min(current.left, next.left);\n        current.width = right - minLeft;\n        current.left = minLeft;\n\n        batches.unshift(current);\n      } else {\n        // If the next batch doesn't overlap, we've consolidated this batch\n        // all we can. Move on!\n        consolidated.push(current);\n      }\n    }\n  }\n\n  return consolidated;\n};\n\nconst canBatch = (\n  current: RunBatch<RunWithTime>,\n  next: RunBatch<RunWithTime>,\n  minMultipleWidth: number,\n  nowLeft: number,\n) => {\n  const currentStart = current.left;\n  const currentEnd = current.left + Math.max(current.width, minMultipleWidth);\n  const nextStart = next.left;\n  const nextEnd = next.left + Math.max(next.width, minMultipleWidth);\n\n  const minStart = Math.min(current.left, next.left);\n  const maxEnd = Math.max(\n    current.left + Math.max(current.width, minMultipleWidth),\n    next.left + Math.max(next.width, minMultipleWidth),\n  );\n\n  // If the batches overlap with each other but do NOT visually overlap with the \"now\"\n  // time marker, they can be batched.\n  return (\n    overlap({start: currentStart, end: currentEnd}, {start: nextStart, end: nextEnd}) &&\n    // ...and they do not combine to cross over the \"now\" marker\n    (minStart > nowLeft || maxEnd < nowLeft)\n  );\n};\n","import {Colors} from '@dagster-io/ui-components';\n\nimport {failedStatuses, inProgressStatuses, queuedStatuses, successStatuses} from './RunStatuses';\nimport {TimelineRun} from './RunTimeline';\n\ntype BackgroundStatus = 'inProgress' | 'queued' | 'failed' | 'succeeded' | 'scheduled';\n\nconst statusToColor = (status: BackgroundStatus) => {\n  switch (status) {\n    case 'queued':\n      return Colors.backgroundDisabled();\n    case 'scheduled':\n      return Colors.backgroundDisabled();\n    case 'inProgress':\n      return Colors.accentBlue();\n    case 'failed':\n      return Colors.accentRed();\n    case 'succeeded':\n      return Colors.accentGreen();\n  }\n};\n\nexport const mergeStatusToBackground = (runs: TimelineRun[]) => {\n  const counts = {\n    scheduled: 0,\n    queued: 0,\n    inProgress: 0,\n    failed: 0,\n    succeeded: 0,\n  };\n\n  runs.forEach(({status}) => {\n    if (status === 'SCHEDULED') {\n      counts.scheduled++;\n    } else if (queuedStatuses.has(status)) {\n      counts.queued++;\n    } else if (inProgressStatuses.has(status)) {\n      counts.inProgress++;\n    } else if (failedStatuses.has(status)) {\n      counts.failed++;\n    } else if (successStatuses.has(status)) {\n      counts.succeeded++;\n    }\n  });\n\n  const statusArr = Object.keys(counts).filter(\n    (status) => counts[status as keyof typeof counts] > 0,\n  ) as BackgroundStatus[];\n\n  if (statusArr.length === 1) {\n    const [element] = statusArr;\n    return statusToColor(element!);\n  }\n\n  // const colorList = statusArr.map(statusToColor);\n  const runCount = runs.length;\n\n  const colors = [\n    counts.failed > 0 ? {status: 'failed', pct: (counts.failed * 100) / runCount} : null,\n    counts.succeeded > 0 ? {status: 'succeeded', pct: (counts.succeeded * 100) / runCount} : null,\n    counts.inProgress > 0\n      ? {status: 'inProgress', pct: (counts.inProgress * 100) / runCount}\n      : null,\n    counts.queued > 0 ? {status: 'queued', pct: (counts.queued * 100) / runCount} : null,\n    counts.scheduled > 0 ? {status: 'scheduled', pct: (counts.scheduled * 100) / runCount} : null,\n  ].filter(Boolean);\n\n  let colorString = '';\n  let nextPct = 0;\n  let pctSoFar = 0;\n\n  for (let ii = 0; ii < colors.length; ii++) {\n    const value = colors[ii];\n    if (!value) {\n      continue;\n    }\n\n    const {status, pct} = value;\n    pctSoFar = nextPct;\n    nextPct += pct;\n    const colorForStatus = statusToColor(status as BackgroundStatus);\n    if (ii === 0) {\n      colorString += `${colorForStatus} ${pct.toFixed(1)}%, `;\n    } else if (ii === colors.length - 1) {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}%`;\n    } else {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}% ${nextPct.toFixed(1)}%, `;\n    }\n  }\n\n  return `linear-gradient(to right, ${colorString})`;\n};\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {START_SCHEDULE_MUTATION, STOP_SCHEDULE_MUTATION} from './ScheduleMutations';\nimport {\n  StartThisScheduleMutation,\n  StartThisScheduleMutationVariables,\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from './types/ScheduleMutations.types';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nexport type ScheduleInfo = {\n  repoAddress: RepoAddress;\n  scheduleName: string;\n  scheduleState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  schedules: ScheduleInfo[];\n}\n\nexport const ScheduleStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, schedules} = props;\n  const count = schedules.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSchedule] = useMutation<\n    StartThisScheduleMutation,\n    StartThisScheduleMutationVariables\n  >(START_SCHEDULE_MUTATION);\n\n  const [stopSchedule] = useMutation<StopScheduleMutation, StopScheduleMutationVariables>(\n    STOP_SCHEDULE_MUTATION,\n  );\n\n  const start = async (schedule: ScheduleInfo) => {\n    const {repoAddress, scheduleName} = schedule;\n    const variables = {\n      scheduleSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        scheduleName,\n      },\n    };\n\n    const {data} = await startSchedule({variables});\n\n    switch (data?.startSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.startSchedule.message,\n        });\n    }\n  };\n\n  const stop = async (schedule: ScheduleInfo) => {\n    const {scheduleName, scheduleState} = schedule;\n    const variables = {\n      scheduleOriginId: scheduleState.id,\n      scheduleSelectorId: scheduleState.selectorId,\n    };\n\n    const {data} = await stopSchedule({variables});\n\n    switch (data?.stopRunningSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.stopRunningSchedule.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const schedule of schedules) {\n      if (openWithIntent === 'start') {\n        await start(schedule);\n      } else {\n        await stop(schedule);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'schedule' : 'schedules'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'schedule' : 'schedules'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Schedules are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stopping ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>\n          Please do not close the window or navigate away while schedules are being updated.\n        </div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`\n                  : `Could not stop ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`}\n              </div>\n            </Group>\n            <ul>\n              {Object.keys(errors).map((scheduleName) => (\n                <li key={scheduleName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{scheduleName}:</strong>\n                    {errors[scheduleName] ? <div>{errors[scheduleName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start schedules' : 'Stop schedules'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {ScheduleInfo, ScheduleStateChangeDialog} from './ScheduleStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  schedules: ScheduleInfo[];\n  onDone: () => void;\n}\n\nexport const ScheduleBulkActionMenu = (props: Props) => {\n  const {schedules, onDone} = props;\n  const count = schedules.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(schedules.map(({scheduleState}) => scheduleState));\n  }, [schedules]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <ScheduleStateChangeDialog\n        openWithIntent={openWithIntent}\n        schedules={schedules}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo = ({daemonHealth, ...boxProps}: Props) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths.length > 0) {\n      const schedulerHealth = schedulerHealths[0]!;\n      healthy = schedulerHealth.required && schedulerHealth.healthy;\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const makeScheduleKey = (repoAddress: RepoAddress, scheduleName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${scheduleName}`;\n};\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {START_SENSOR_MUTATION, STOP_SENSOR_MUTATION} from './SensorMutations';\nimport {\n  StartSensorMutation,\n  StartSensorMutationVariables,\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from './types/SensorMutations.types';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nexport type SensorInfo = {\n  repoAddress: RepoAddress;\n  sensorName: string;\n  sensorState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  sensors: SensorInfo[];\n}\n\nexport const SensorStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, sensors} = props;\n  const count = sensors.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSensor] = useMutation<StartSensorMutation, StartSensorMutationVariables>(\n    START_SENSOR_MUTATION,\n  );\n\n  const [stopSensor] = useMutation<StopRunningSensorMutation, StopRunningSensorMutationVariables>(\n    STOP_SENSOR_MUTATION,\n  );\n\n  const start = async (sensor: SensorInfo) => {\n    const {repoAddress, sensorName} = sensor;\n    const variables = {\n      sensorSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        sensorName,\n      },\n    };\n\n    const {data} = await startSensor({variables});\n\n    switch (data?.startSensor.__typename) {\n      case 'Sensor':\n        dispatch({type: 'update-success'});\n        return;\n      case 'SensorNotFoundError':\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.startSensor.message,\n        });\n    }\n  };\n\n  const stop = async (sensor: SensorInfo) => {\n    const {sensorName, sensorState} = sensor;\n    const variables = {\n      jobOriginId: sensorState.id,\n      jobSelectorId: sensorState.selectorId,\n    };\n\n    const {data} = await stopSensor({variables});\n\n    switch (data?.stopSensor.__typename) {\n      case 'StopSensorMutationResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.stopSensor.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const sensor of sensors) {\n      if (openWithIntent === 'start') {\n        await start(sensor);\n      } else {\n        await stop(sensor);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'sensor' : 'sensors'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'sensor' : 'sensors'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Sensors are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stopping ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>Please do not close the window or navigate away while sensors are being updated.</div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`\n                  : `Could not stop ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`}\n              </div>\n            </Group>\n            <ul style={{margin: '8px 0'}}>\n              {Object.keys(errors).map((sensorName) => (\n                <li key={sensorName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{sensorName}:</strong>\n                    {errors[sensorName] ? <div>{errors[sensorName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start sensors' : 'Stop sensors'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {SensorInfo, SensorStateChangeDialog} from './SensorStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  sensors: SensorInfo[];\n  onDone: () => void;\n}\n\nexport const SensorBulkActionMenu = (props: Props) => {\n  const {sensors, onDone} = props;\n  const count = sensors.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(sensors.map(({sensorState}) => sensorState));\n  }, [sensors]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <SensorStateChangeDialog\n        openWithIntent={openWithIntent}\n        sensors={sensors}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {Box} from '@dagster-io/ui-components';\n\nimport {AssetLink} from '../assets/AssetLink';\nimport {SensorMetadata} from '../graphql/types';\n\nexport const SensorMonitoredAssets = ({metadata}: {metadata: SensorMetadata | undefined}) => {\n  if (!metadata?.assetKeys?.length) {\n    return <span />;\n  }\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {metadata.assetKeys.map((key) => (\n        <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n      ))}\n    </Box>\n  );\n};\n","import {useMutation} from '@apollo/client';\nimport {Button, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RESET_SENSOR_MUTATION, displaySensorMutationErrors} from './SensorMutations';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {ResetSensorMutation, ResetSensorMutationVariables} from './types/SensorMutations.types';\nimport {DEFAULT_DISABLED_REASON, usePermissionsForLocation} from '../app/Permissions';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n}\n\nexport const SensorResetButton = ({repoAddress, sensor}: Props) => {\n  const {\n    permissions: {canStartSensor, canStopSensor},\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const {name} = sensor;\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName: name,\n  };\n\n  const [resetSensor, {loading: toggleOnInFlight}] = useMutation<\n    ResetSensorMutation,\n    ResetSensorMutationVariables\n  >(RESET_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const onClick = () => {\n    resetSensor({variables: {sensorSelector}});\n  };\n\n  const hasPermission = canStartSensor && canStopSensor;\n  const disabled = toggleOnInFlight || !hasPermission;\n  const tooltipContent = hasPermission\n    ? `In code, a default status for \"${name}\" has been set to \"${sensor.defaultStatus}\". Click here to reset the sensor status to track the status set in code.`\n    : DEFAULT_DISABLED_REASON;\n\n  return (\n    <Tooltip content={tooltipContent} display=\"flex\">\n      <Button disabled={disabled} onClick={onClick}>\n        Reset sensor status\n      </Button>\n    </Tooltip>\n  );\n};\n","import {Box, Colors, Icon, Subheading, Table, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {DynamicPartitionRequestFragment} from './types/SensorDryRunDialog.types';\nimport {DynamicPartitionsRequestType} from '../graphql/types';\n\nexport function DynamicPartitionRequests({\n  includeTitle = true,\n  requests,\n}: {\n  includeTitle?: boolean;\n  requests: Pick<DynamicPartitionRequestFragment, 'partitionKeys' | 'partitionsDefName' | 'type'>[];\n}) {\n  const rows = useMemo(() => {\n    if (!requests.length) {\n      return [];\n    }\n    const rows: {key: string; def: string; type: DynamicPartitionsRequestType}[] = [];\n    requests.forEach(({partitionKeys, partitionsDefName, type}) => {\n      partitionKeys?.forEach((key) => {\n        rows.push({\n          key,\n          def: partitionsDefName,\n          type,\n        });\n      });\n    });\n    return rows;\n  }, [requests]);\n\n  if (!rows.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'column', gap: 12, grow: 1}}>\n      {includeTitle ? (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          <Icon name=\"partition\" />\n          <Subheading>Dynamic Partition Requests</Subheading>\n        </Box>\n      ) : null}\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`}}>\n        <thead>\n          <tr>\n            <th>Partition</th>\n            <th>Partition definition</th>\n            <th>Requested change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({key, def, type}, index) => {\n            return (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{def}</td>\n                <td>\n                  {type === DynamicPartitionsRequestType.ADD_PARTITIONS ? (\n                    <Tag intent=\"success\">\n                      <span>Add Partition</span>\n                    </Tag>\n                  ) : (\n                    <Tag intent=\"danger\">\n                      <span>Delete Partition</span>\n                    </Tag>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Box>\n  );\n}\n","import {gql, useMutation} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Subheading,\n  Tag,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {DynamicPartitionRequests} from './DynamicPartitionRequests';\nimport {RUN_REQUEST_FRAGMENT} from './RunRequestFragment';\nimport {\n  SensorDryRunMutation,\n  SensorDryRunMutationVariables,\n} from './types/SensorDryRunDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {SET_CURSOR_MUTATION} from '../sensors/EditCursorDialog';\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from '../sensors/types/EditCursorDialog.types';\nimport {testId} from '../testing/testId';\nimport {RepoAddress} from '../workspace/types';\n\ntype DryRunInstigationTick = Extract<\n  SensorDryRunMutation['sensorDryRun'],\n  {__typename: 'DryRunInstigationTick'}\n>;\n\ntype Props = {\n  name: string;\n  onClose: () => void;\n  repoAddress: RepoAddress;\n  currentCursor: string;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const SensorDryRunDialog = (props: Props) => {\n  const {isOpen, onClose, name} = props;\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      icon=\"sensors\"\n      title={name}\n    >\n      <SensorDryRun {...props} />\n    </Dialog>\n  );\n};\n\nconst SensorDryRun = ({repoAddress, name, currentCursor, onClose, jobName}: Props) => {\n  const [sensorDryRun] = useMutation<SensorDryRunMutation, SensorDryRunMutationVariables>(\n    EVALUATE_SENSOR_MUTATION,\n  );\n\n  const [cursor, setCursor] = useState(currentCursor);\n\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState<PythonErrorFragment | null>(null);\n  const [sensorExecutionData, setSensorExecutionData] = useState<DryRunInstigationTick | null>(\n    null,\n  );\n\n  const sensorSelector = useMemo(\n    () => ({\n      sensorName: name,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [repoAddress, name],\n  );\n\n  const submitTest = useCallback(async () => {\n    setSubmitting(true);\n    const result = await sensorDryRun({\n      variables: {\n        selectorData: sensorSelector,\n        cursor,\n      },\n    });\n    const data = result.data?.sensorDryRun;\n    if (data) {\n      if (data?.__typename === 'DryRunInstigationTick') {\n        if (data.evaluationResult?.error) {\n          setError(data.evaluationResult.error);\n        } else {\n          setSensorExecutionData(data);\n        }\n      } else if (data?.__typename === 'SensorNotFoundError') {\n        showCustomAlert({\n          title: 'Sensor not found',\n          body: `Could not find a sensor named: ${name}`,\n        });\n      } else {\n        setError(data);\n      }\n    } else {\n      assertUnreachable('sensorDryRun Mutation returned no data??' as never);\n    }\n    setSubmitting(false);\n  }, [sensorDryRun, sensorSelector, cursor, name]);\n\n  const buttons = useMemo(() => {\n    if (sensorExecutionData || error) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button\n            data-testid={testId('test-again')}\n            onClick={() => {\n              setSensorExecutionData(null);\n              setError(null);\n            }}\n          >\n            Test again\n          </Button>\n          <Button intent=\"primary\" onClick={onClose}>\n            Close\n          </Button>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={submitTest} intent=\"primary\" data-testid={testId('evaluate')}>\n            Evaluate\n          </Button>\n        </Box>\n      );\n    }\n  }, [sensorExecutionData, error, submitting, onClose, submitTest]);\n\n  const [cursorState, setCursorState] = useState<'Unpersisted' | 'Persisting' | 'Persisted'>(\n    'Unpersisted',\n  );\n  const [setCursorMutation] = useMutation<\n    SetSensorCursorMutation,\n    SetSensorCursorMutationVariables\n  >(SET_CURSOR_MUTATION);\n\n  const onPersistCursorValue = useCallback(async () => {\n    const cursor = sensorExecutionData?.evaluationResult?.cursor;\n    if (!cursor) {\n      assertUnreachable('Did not expect to get here' as never);\n    }\n    setCursorState('Persisting');\n    const {data} = await setCursorMutation({\n      variables: {sensorSelector, cursor},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n      setCursorState('Persisted');\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.accentReversed()}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n  }, [sensorExecutionData?.evaluationResult?.cursor, sensorSelector, setCursorMutation]);\n\n  const content = useMemo(() => {\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n      const dynamicPartitionRequests =\n        sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Box>\n            <Grid>\n              <div>\n                <Subheading>Result</Subheading>\n                <Box flex={{grow: 1, alignItems: 'center'}}>\n                  <div>\n                    {error ? (\n                      <Tag intent=\"danger\">Failed</Tag>\n                    ) : numRunRequests ? (\n                      <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                    ) : (\n                      <Tag intent=\"warning\">Skipped</Tag>\n                    )}\n                  </div>\n                </Box>\n              </div>\n              <div>\n                <Subheading>Used cursor value</Subheading>\n                <pre>{cursor?.length ? cursor : 'None'}</pre>\n              </div>\n              <div>\n                <Subheading>Computed cursor value</Subheading>\n                <pre>\n                  {sensorExecutionData?.evaluationResult?.cursor?.length\n                    ? sensorExecutionData?.evaluationResult.cursor\n                    : error\n                    ? 'Error'\n                    : 'None'}\n                </pre>\n                {error ||\n                (currentCursor ?? '') ===\n                  (sensorExecutionData?.evaluationResult?.cursor ?? '') ? null : (\n                  <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                    <Button\n                      disabled={['Persisting', 'Persisted'].includes(cursorState)}\n                      loading={cursorState === 'Persisting'}\n                      onClick={onPersistCursorValue}\n                    >\n                      <span data-testid={testId('persist-cursor')}>\n                        {cursorState === 'Persisting'\n                          ? 'Persisting'\n                          : cursorState === 'Persisted'\n                          ? 'Persisted'\n                          : 'Persist computed cursor value'}\n                      </span>\n                    </Button>\n                    {cursorState === 'Persisted' ? (\n                      <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n                    ) : null}\n                  </Box>\n                )}\n              </div>\n            </Grid>\n            {error ? (\n              <div>\n                <PythonErrorInfo error={error} />\n              </div>\n            ) : null}\n            {didSkip ? (\n              <div>\n                <Subheading>Skip reason</Subheading>\n                <div>\n                  {sensorExecutionData?.evaluationResult?.skipReason || 'No skip reason was output'}\n                </div>\n              </div>\n            ) : null}\n            {numRunRequests && runRequests ? (\n              <RunRequestTable\n                runRequests={runRequests}\n                name={name}\n                jobName={jobName}\n                isJob={true}\n                repoAddress={repoAddress}\n              />\n            ) : null}\n            {dynamicPartitionRequests?.length ? (\n              <div style={{marginTop: '24px'}}>\n                <DynamicPartitionRequests requests={dynamicPartitionRequests} />\n              </div>\n            ) : null}\n          </Box>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Evaluating sensor</div>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>Cursor</div>\n          <TextInput\n            value={cursor}\n            onChange={(e) => setCursor(e.target.value)}\n            data-testid={testId('cursor-input')}\n          />\n          {currentCursor === '' || !currentCursor ? (\n            <Box padding={{top: 16, bottom: 32}} flex={{justifyContent: 'center'}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"You're not using a cursor\"\n                description={\n                  <span>\n                    Check our{' '}\n                    <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#idempotence-and-cursors\">\n                      sensor documentation\n                    </a>{' '}\n                    to learn how to use cursors\n                  </span>\n                }\n              />\n            </Box>\n          ) : null}\n        </Box>\n      );\n    }\n  }, [\n    sensorExecutionData,\n    error,\n    submitting,\n    currentCursor,\n    cursorState,\n    onPersistCursorValue,\n    name,\n    jobName,\n    repoAddress,\n    cursor,\n  ]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      <DialogFooter topBorder>{buttons}</DialogFooter>\n    </>\n  );\n};\n\nexport const EVALUATE_SENSOR_MUTATION = gql`\n  mutation SensorDryRunMutation($selectorData: SensorSelector!, $cursor: String) {\n    sensorDryRun(selectorData: $selectorData, cursor: $cursor) {\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          cursor\n          runRequests {\n            ...RunRequestFragment\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n          dynamicPartitionsRequests {\n            ...DynamicPartitionRequestFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment DynamicPartitionRequestFragment on DynamicPartitionRequest {\n    partitionKeys\n    partitionsDefName\n    type\n  }\n\n  ${RUN_REQUEST_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n  margin-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n","import {QueryResult} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  FontFamily,\n  Heading,\n  Icon,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorMonitoredAssets} from './SensorMonitoredAssets';\nimport {SensorResetButton} from './SensorResetButton';\nimport {SensorSwitch} from './SensorSwitch';\nimport {SensorTargetList} from './SensorTargetList';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from './types/SensorRoot.types';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {SensorDryRunDialog} from '../ticks/SensorDryRunDialog';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RepoAddress} from '../workspace/types';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails = ({\n  sensor,\n  repoAddress,\n  daemonHealth,\n  refreshState,\n  selectionQueryResult,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n  selectionQueryResult: QueryResult<SensorAssetSelectionQuery, SensorAssetSelectionQueryVariables>;\n}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    metadata,\n  } = sensor;\n\n  const [isCursorEditing, setCursorEditing] = useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  const [showTestTickDialog, setShowTestTickDialog] = useState(false);\n  const running = status === InstigationStatus.RUNNING;\n\n  const assetSelectionResult = selectionQueryResult.data?.sensorOrError;\n\n  const assetSelectionData =\n    assetSelectionResult?.__typename === 'Sensor' ? assetSelectionResult : null;\n  const selectedAssets = assetSelectionData?.assetSelection;\n\n  return (\n    <>\n      <PageHeader\n        title={<Heading>{name}</Heading>}\n        icon=\"sensors\"\n        tags={\n          <Tag icon=\"sensors\">\n            Sensor in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        right={\n          <Box margin={{top: 4}} flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            {sensor.sensorType === SensorType.STANDARD ? (\n              <Button\n                onClick={() => {\n                  setShowTestTickDialog(true);\n                }}\n              >\n                Test Sensor\n              </Button>\n            ) : null}\n          </Box>\n        }\n      />\n      <SensorDryRunDialog\n        isOpen={showTestTickDialog}\n        onClose={() => {\n          setShowTestTickDialog(false);\n        }}\n        currentCursor={cursor || ''}\n        name={sensor.name}\n        repoAddress={repoAddress}\n        jobName={sensor.targets?.[0]?.pipelineName || ''}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} timeFormat={TIME_FORMAT} />\n                    <TickStatusTag tick={latestTick} />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.nextTick && daemonHealth && running && (\n            <tr>\n              <td>Next tick</td>\n              <td>\n                <TimestampDisplay timestamp={sensor.nextTick.timestamp!} timeFormat={TIME_FORMAT} />\n              </td>\n            </tr>\n          )}\n          {(sensor.targets && sensor.targets.length) || selectedAssets ? (\n            <tr>\n              <td>Target</td>\n              <td>\n                <SensorTargetList\n                  targets={sensor.targets}\n                  repoAddress={repoAddress}\n                  selectionQueryResult={selectionQueryResult}\n                  sensorType={sensor.sensorType}\n                />\n              </td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>\n              <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                Running\n              </Box>\n            </td>\n            <td>\n              <Box\n                flex={{direction: 'row', gap: 12, alignItems: 'center'}}\n                style={{height: '32px'}}\n              >\n                <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n                {sensor.canReset && <SensorResetButton repoAddress={repoAddress} sensor={sensor} />}\n              </Box>\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored assets</td>\n              <td>\n                <SensorMonitoredAssets metadata={metadata} />\n              </td>\n            </tr>\n          ) : null}\n          {sensor.sensorType !== SensorType.AUTO_MATERIALIZE &&\n          sensor.sensorType !== SensorType.AUTOMATION ? (\n            <tr>\n              <td>\n                <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                  Cursor\n                </Box>\n              </td>\n              <td>\n                <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                  <span style={{fontFamily: FontFamily.monospace, fontSize: '14px'}}>\n                    {cursor ? cursor : 'None'}\n                  </span>\n                  <Button icon={<Icon name=\"edit\" />} onClick={() => setCursorEditing(true)}>\n                    Edit\n                  </Button>\n                </Box>\n                <EditCursorDialog\n                  isOpen={isCursorEditing}\n                  sensorSelector={sensorSelector}\n                  cursor={cursor ? cursor : ''}\n                  onClose={() => setCursorEditing(false)}\n                />\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nexport type DaemonStatusForWarning = {\n  healthy: boolean | null;\n  required: boolean | null;\n};\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  sensorDaemonStatus?: DaemonStatusForWarning;\n  assetDaemonStatus?: DaemonStatusForWarning;\n};\n\nexport const SensorInfo = ({sensorDaemonStatus, assetDaemonStatus, ...boxProps}: Props) => {\n  const warnForSensor =\n    sensorDaemonStatus && sensorDaemonStatus.healthy === false && sensorDaemonStatus.required;\n  const warnForAssets =\n    assetDaemonStatus && !assetDaemonStatus.healthy === false && assetDaemonStatus.required;\n\n  if (!warnForAssets && !warnForSensor) {\n    return null;\n  }\n\n  const title = () => {\n    if (warnForSensor) {\n      if (warnForAssets) {\n        return 'The sensor and asset daemons are not running';\n      }\n      return 'The sensor daemon is not running';\n    }\n    return 'The asset daemon is not running';\n  };\n\n  return (\n    <Box {...boxProps}>\n      <Alert\n        intent=\"warning\"\n        title={title()}\n        description={\n          <div>\n            See the{' '}\n            <a\n              href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              dagster-daemon documentation\n            </a>{' '}\n            for more information on how to deploy the dagster-daemon process.\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {gql} from '@apollo/client';\n\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SENSOR_FRAGMENT = gql`\n  fragment SensorFragment on Sensor {\n    id\n    jobOriginId\n    name\n    description\n    minIntervalSeconds\n    sensorType\n    nextTick {\n      timestamp\n    }\n    defaultStatus\n    canReset\n    sensorState {\n      id\n      ...InstigationStateFragment\n    }\n    targets {\n      pipelineName\n      solidSelection\n      mode\n    }\n    metadata {\n      assetKeys {\n        path\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {ASSET_DAEMON_TICK_FRAGMENT} from '../assets/auto-materialization/AssetDaemonTicksQuery';\n\nexport const ASSET_SENSOR_TICKS_QUERY = gql`\n  query AssetSensorTicksQuery(\n    $sensorSelector: SensorSelector!\n    $dayRange: Int\n    $dayOffset: Int\n    $statuses: [InstigationTickStatus!]\n    $limit: Int\n    $cursor: String\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        sensorState {\n          id\n          ticks(\n            dayRange: $dayRange\n            dayOffset: $dayOffset\n            statuses: $statuses\n            limit: $limit\n            cursor: $cursor\n            beforeTimestamp: $beforeTimestamp\n            afterTimestamp: $afterTimestamp\n          ) {\n            id\n            ...AssetDaemonTickFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${ASSET_DAEMON_TICK_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {useCallback, useEffect, useMemo} from 'react';\n\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useBlockTraceOnQueryResult} from '../../performance/TraceContext';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\nimport {ASSET_SENSOR_TICKS_QUERY} from '../../sensors/AssetSensorTicksQuery';\nimport {\n  AssetSensorTicksQuery,\n  AssetSensorTicksQueryVariables,\n} from '../../sensors/types/AssetSensorTicksQuery.types';\nimport {SensorFragment} from '../../sensors/types/SensorFragment.types';\nimport {RepoAddress} from '../../workspace/types';\n\nconst PAGE_SIZE = 15;\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}\n\nexport const SensorAutomaterializationEvaluationHistoryTable = ({\n  repoAddress,\n  sensor,\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: Props) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n              InstigationTickStatus.SKIPPED,\n            ],\n      );\n    }, []),\n    encode: useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetSensorTicksQuery,\n    AssetSensorTicksQueryVariables\n  >({\n    query: ASSET_SENSOR_TICKS_QUERY,\n    variables: {\n      sensorSelector: {\n        sensorName: sensor.name,\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n      },\n      statuses: useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      if (data?.sensorOrError.__typename === 'Sensor') {\n        const ticks = data.sensorOrError.sensorState.ticks;\n        if (ticks.length) {\n          return ticks[PAGE_SIZE - 1]?.id;\n        }\n      }\n      return undefined;\n    },\n    getResultArray: (data) => {\n      if (data?.sensorOrError.__typename === 'Sensor') {\n        return data.sensorOrError.sensorState.ticks;\n      }\n      return [];\n    },\n    pageSize: PAGE_SIZE,\n  });\n\n  useBlockTraceOnQueryResult(queryResult, 'AssetSensorTicksQuery');\n\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  const allTicks =\n    queryResult.data?.sensorOrError?.__typename === 'Sensor'\n      ? queryResult.data.sensorOrError.sensorState.ticks\n      : null;\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      if (allTicks && allTicks.length) {\n        const start = allTicks[allTicks.length - 1]?.timestamp;\n        const end = allTicks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [allTicks, paginationProps.hasPrevCursor, setTimerange]);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <AutomaterializationEvaluationHistoryTable\n      loading={queryResult.loading}\n      ticks={allTicks || []}\n      paginationProps={paginationProps}\n      setSelectedTick={setSelectedTick}\n      setStatuses={setStatuses}\n      setTableView={setTableView}\n      statuses={statuses}\n    />\n  );\n};\n","import {useLazyQuery} from '@apollo/client';\nimport {Alert, Box, Colors, Spinner, Subtitle2} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\n\nimport {ASSET_SENSOR_TICKS_QUERY} from './AssetSensorTicksQuery';\nimport {DaemonStatusForWarning, SensorInfo} from './SensorInfo';\nimport {\n  AssetSensorTicksQuery,\n  AssetSensorTicksQueryVariables,\n} from './types/AssetSensorTicksQuery.types';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {useRefreshAtInterval} from '../app/QueryRefresh';\nimport {AutomaterializationTickDetailDialog} from '../assets/auto-materialization/AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from '../assets/auto-materialization/AutomaterializeRunHistoryTable';\nimport {SensorAutomaterializationEvaluationHistoryTable} from '../assets/auto-materialization/SensorAutomaterializationEvaluationHistoryTable';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../instigation/LiveTickTimeline2';\nimport {isStuckStartedTick} from '../instigation/util';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {DagsterTag} from '../runs/RunTag';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n  loading: boolean;\n  daemonStatus: DaemonStatusForWarning;\n}\n\nexport const SensorPageAutomaterialize = (props: Props) => {\n  const {repoAddress, sensor, loading, daemonStatus} = props;\n\n  const [isPaused, setIsPaused] = useState(false);\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n\n  const getVariables = useCallback(\n    (currentTime = Date.now()) => {\n      if (timeRange || statuses) {\n        return {\n          sensorSelector: {\n            sensorName: sensor.name,\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n          },\n          afterTimestamp: timeRange?.[0],\n          beforeTimestamp: timeRange?.[1],\n          statuses,\n        };\n      }\n      return {\n        sensorSelector: {\n          sensorName: sensor.name,\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n        },\n        afterTimestamp: (currentTime - TWENTY_MINUTES) / 1000,\n      };\n    },\n    [sensor, repoAddress, statuses, timeRange],\n  );\n\n  const [fetch, queryResult] = useLazyQuery<AssetSensorTicksQuery, AssetSensorTicksQueryVariables>(\n    ASSET_SENSOR_TICKS_QUERY,\n  );\n  useBlockTraceOnQueryResult(queryResult, 'AssetSensorTicksQuery');\n\n  const refresh = useCallback(\n    async () => await fetch({variables: getVariables()}),\n    [fetch, getVariables],\n  );\n\n  useRefreshAtInterval({\n    refresh,\n    enabled: !isPaused && !timeRange && !statuses,\n    intervalMs: 2 * 1000,\n    leading: true,\n  });\n\n  const [selectedTick, setSelectedTick] = useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const allTicks = useMemo(() => {\n    if (data?.sensorOrError.__typename === 'Sensor') {\n      return data.sensorOrError.sensorState.ticks;\n    }\n    return [];\n  }, [data]);\n\n  const ticks = useMemo(\n    () => {\n      return (\n        allTicks.map((tick, index) => {\n          const nextTick = allTicks[index - 1];\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (nextTick && isStuckStartedTick(tick, index)) {\n            const copy = {...tick};\n            copy.endTimestamp = nextTick.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // The allTicks array changes every 2 seconds because we query every 2 seconds.\n    // This would cause everything to re-render, to avoid that we memoize the ticks array that we pass around\n    // using the ID and status of the ticks.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(allTicks.map((tick) => `${tick.id}:${tick.status}`))],\n  );\n\n  const onHoverTick = useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  const runTableFilterTags = useMemo(() => {\n    return [\n      {\n        key: DagsterTag.RepositoryLabelTag,\n        value: repoAddressAsTag(repoAddress),\n      },\n      {key: DagsterTag.SensorName, value: sensor.name},\n    ];\n  }, [repoAddress, sensor]);\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}} flex={{direction: 'column', gap: 12}}>\n        <Alert\n          intent=\"info\"\n          title=\"[Experimental] Dagster can automatically materialize assets when criteria are met.\"\n          description={\n            <>\n              Auto-materialization enables a declarative approach to asset scheduling – instead of\n              defining imperative workflows to materialize your assets, you just describe the\n              conditions under which they should be materialized.{' '}\n              <a\n                href=\"https://docs.dagster.io/concepts/assets/asset-auto-execution\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Learn more about auto-materialization here\n              </a>\n              .\n            </>\n          }\n        />\n      </Box>\n      <SensorInfo assetDaemonHealth={daemonStatus} padding={{vertical: 16, horizontal: 24}} />\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!sensor && loading ? (\n        <Box\n          padding={{vertical: 48}}\n          flex={{direction: 'row', justifyContent: 'center', gap: 12, alignItems: 'center'}}\n        >\n          <Spinner purpose=\"body-text\" />\n          <div style={{color: Colors.textLight()}}>Loading evaluations…</div>\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <SensorAutomaterializationEvaluationHistoryTable\n              repoAddress={repoAddress}\n              sensor={sensor}\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable\n              filterTags={runTableFilterTags}\n              setTableView={setTableView}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import {gql} from '@apollo/client';\nimport {CursorHistoryControls} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {\n  PreviousRunsForSensorQuery,\n  PreviousRunsForSensorQueryVariables,\n} from './types/SensorPreviousRuns.types';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {RUN_TABLE_RUN_FRAGMENT, RunTable} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns = ({\n  sensor,\n  repoAddress,\n  highlightedIds,\n  tabs,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PreviousRunsForSensorQuery,\n    PreviousRunsForSensorQueryVariables\n  >({\n    query: PREVIOUS_RUNS_FOR_SENSOR_QUERY,\n    variables: {\n      filter: {\n        tags: [\n          {key: DagsterTag.SensorName, value: sensor.name},\n          {key: DagsterTag.RepositoryLabelTag, value: repoAddressAsTag(repoAddress)},\n        ],\n      },\n    },\n    nextCursorForResult: (data) => {\n      if (data.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return data.pipelineRunsOrError.results[RUNS_LIMIT - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (data?.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    pageSize: RUNS_LIMIT,\n  });\n  useBlockTraceOnQueryResult(queryResult, 'PreviousRunsForSensorQuery');\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, !paginationProps.hasPrevCursor ? 10000 : 60 * 60 * 1000);\n\n  let data = queryResult.data;\n\n  if (!data || data?.pipelineRunsOrError.__typename !== 'Runs') {\n    // Use previous data to stop the screen from flashing while we wait for the next data to load\n    data = queryResult.previousData;\n  }\n  if (!data || data?.pipelineRunsOrError.__typename !== 'Runs') {\n    return null;\n  }\n\n  const runs = data.pipelineRunsOrError.results;\n  return (\n    <>\n      <RunTable\n        actionBarComponents={tabs}\n        runs={runs}\n        highlightedIds={highlightedIds}\n        hideCreatedBy={true}\n      />\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </>\n  );\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: RunsFilter, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit, cursor: $cursor) {\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, ButtonGroup, Colors, NonIdealState, Page, Spinner} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPageAutomaterialize} from './SensorPageAutomaterialize';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n  SensorRootQuery,\n  SensorRootQueryVariables,\n} from './types/SensorRoot.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useMergedRefresh, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {InstigationTickStatus, SensorType} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TickHistoryTimeline, TicksTable} from '../instigation/TickHistory';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const variables = useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {};\n  }, [statuses, timeRange]);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n  useBlockTraceOnQueryResult(queryResult, 'SensorRootQuery');\n  const selectionQueryResult = useQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n  useBlockTraceOnQueryResult(selectionQueryResult, 'SensorAssetSelectionQuery');\n\n  const refreshState1 = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const refreshState2 = useQueryRefreshAtInterval(selectionQueryResult, FIFTEEN_SECONDS);\n  const refreshState = useMergedRefresh(refreshState1, refreshState2);\n\n  const {data, loading} = queryResult;\n\n  const tabs = (\n    <ButtonGroup\n      activeItems={new Set([selectedTab])}\n      buttons={[\n        {id: 'evaluations', label: 'Evaluations'},\n        {id: 'runs', label: 'Runs'},\n      ]}\n      onClick={(id: 'evaluations' | 'runs') => {\n        setSelectedTab(id);\n      }}\n    />\n  );\n\n  if (!data && loading) {\n    return (\n      <Box\n        margin={{top: 32}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'center', gap: 16}}\n      >\n        <Spinner purpose=\"body-text\" />\n        <div style={{color: Colors.textLight()}}>Loading sensor…</div>\n      </Box>\n    );\n  }\n\n  if (!data || data.sensorOrError.__typename === 'SensorNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title={`Could not find sensor \\`${sensorName}\\` in definitions for \\`${repoAddress.name}\\``}\n        />\n      </Box>\n    );\n  }\n\n  const {sensorOrError} = data;\n  if (sensorOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={sensorOrError} />;\n  }\n\n  if (sensorOrError.__typename === 'UnauthorizedError') {\n    return <Redirect to=\"/overview/sensors\" />;\n  }\n\n  const {instance} = data;\n\n  if (\n    sensorOrError.sensorType === SensorType.AUTO_MATERIALIZE ||\n    sensorOrError.sensorType === SensorType.AUTOMATION\n  ) {\n    const assetDaemonStatus = instance.daemonHealth.ampDaemonStatus;\n    return (\n      <Page>\n        <SensorDetails\n          repoAddress={repoAddress}\n          sensor={sensorOrError}\n          daemonHealth={assetDaemonStatus.healthy}\n          refreshState={refreshState}\n          selectionQueryResult={selectionQueryResult}\n        />\n        <SensorPageAutomaterialize\n          repoAddress={repoAddress}\n          sensor={sensorOrError}\n          daemonStatus={assetDaemonStatus}\n          loading={loading}\n        />\n      </Page>\n    );\n  }\n\n  const sensorDaemonStatus = instance.daemonHealth.sensorDaemonStatus;\n\n  return (\n    <Page>\n      <SensorDetails\n        repoAddress={repoAddress}\n        sensor={sensorOrError}\n        daemonHealth={sensorDaemonStatus.healthy}\n        refreshState={refreshState}\n        selectionQueryResult={selectionQueryResult}\n      />\n      <SensorInfo\n        sensorDaemonStatus={sensorDaemonStatus}\n        padding={{vertical: 16, horizontal: 24}}\n      />\n      <TickHistoryTimeline repoAddress={repoAddress} name={sensorOrError.name} {...variables} />\n      <Box margin={{top: 32}} border=\"top\">\n        {selectedTab === 'evaluations' ? (\n          <TicksTable\n            tabs={tabs}\n            repoAddress={repoAddress}\n            name={sensorOrError.name}\n            setParentStatuses={setStatuses}\n            setTimerange={setTimerange}\n          />\n        ) : (\n          <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n        )}\n      </Box>\n    </Page>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      daemonHealth {\n        id\n        sensorDaemonStatus: daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n          required\n        }\n        ampDaemonStatus: daemonStatus(daemonType: \"ASSET\") {\n          id\n          healthy\n          required\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SENSOR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nexport const SENSOR_ASSET_SELECTIONS_QUERY = gql`\n  query SensorAssetSelectionQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        assetSelection {\n          ...SensorAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment SensorAssetSelectionFragment on AssetSelection {\n    assetSelectionString\n    assetsOrError {\n      ... on AssetConnection {\n        nodes {\n          id\n          key {\n            path\n          }\n          definition {\n            id\n            autoMaterializePolicy {\n              __typename\n            }\n          }\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Icon} from './Icon';\nimport {UnstyledButton} from './UnstyledButton';\n\ntype Props = {\n  isOpen: boolean;\n  onToggle: (e: React.MouseEvent<HTMLButtonElement>) => void;\n};\nexport const DisclosureTriangleButton = ({isOpen, onToggle}: Props) => {\n  return (\n    <UnstyledButton\n      onClick={(e) => {\n        onToggle(e);\n      }}\n      style={{cursor: 'pointer', width: 18}}\n    >\n      <Icon\n        name=\"arrow_drop_down\"\n        style={{transform: isOpen ? 'rotate(0deg)' : 'rotate(-90deg)'}}\n      />\n    </UnstyledButton>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  Colors,\n  Dialog,\n  DialogFooter,\n  DisclosureTriangleButton,\n  MiddleTruncate,\n  Subtitle2,\n} from '@dagster-io/ui-components';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  SensorAssetSelectionFragment,\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from './types/SensorRoot.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {displayNameForAssetKey, isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {SensorType} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {VirtualizedItemListForDialog} from '../ui/VirtualizedItemListForDialog';\nimport {numberFormatter} from '../ui/formatters';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorTargetList = ({\n  sensorType,\n  targets,\n  selectionQueryResult,\n  repoAddress,\n}: {\n  sensorType: SensorType;\n  targets: {pipelineName: string}[] | null | undefined;\n  repoAddress: RepoAddress;\n  selectionQueryResult: QueryResult<SensorAssetSelectionQuery, SensorAssetSelectionQueryVariables>;\n}) => {\n  const repo = useRepository(repoAddress);\n  const assetSelectionResult = selectionQueryResult.data?.sensorOrError;\n  const assetSelectionData =\n    assetSelectionResult?.__typename === 'Sensor' ? assetSelectionResult : null;\n\n  if (!targets && !assetSelectionData) {\n    return <span />;\n  }\n\n  const selectedAssets = assetSelectionData?.assetSelection;\n\n  const visibleTargets = targets?.filter((target) => !isHiddenAssetGroupJob(target.pipelineName));\n\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {selectedAssets && (\n        <AssetSelectionLink assetSelection={selectedAssets} sensorType={sensorType} />\n      )}\n      {visibleTargets?.map((target) =>\n        target.pipelineName ? (\n          <PipelineReference\n            key={target.pipelineName}\n            pipelineName={target.pipelineName}\n            pipelineHrefContext={repoAddress}\n            isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n          />\n        ) : null,\n      )}\n    </Box>\n  );\n};\n\nconst AssetSelectionLink = ({\n  assetSelection,\n  sensorType,\n}: {\n  assetSelection: SensorAssetSelectionFragment;\n  sensorType: SensorType;\n}) => {\n  const [showAssetSelection, setShowAssetSelection] = React.useState(false);\n\n  const error =\n    assetSelection.assetsOrError.__typename === 'PythonError' ? assetSelection.assetsOrError : null;\n\n  const sortedAssets = React.useMemo(() => {\n    if (assetSelection.assetsOrError.__typename === 'PythonError') {\n      return [];\n    }\n    return assetSelection.assetsOrError.nodes\n      .slice()\n      .sort((a, b) =>\n        COMMON_COLLATOR.compare(displayNameForAssetKey(a.key), displayNameForAssetKey(b.key)),\n      );\n  }, [assetSelection.assetsOrError]);\n\n  const assetsWithAMP = React.useMemo(\n    () => sortedAssets.filter((asset) => !!asset.definition?.autoMaterializePolicy),\n    [sortedAssets],\n  );\n  const assetsWithoutAMP = React.useMemo(\n    () => sortedAssets.filter((asset) => !asset.definition?.autoMaterializePolicy),\n    [sortedAssets],\n  );\n\n  const assetSelectionString = assetSelection.assetSelectionString || '';\n\n  return (\n    <>\n      <Dialog\n        isOpen={showAssetSelection}\n        title=\"Targeted assets\"\n        onClose={() => setShowAssetSelection(false)}\n        style={{width: '750px', maxWidth: '80vw', minWidth: '500px', transform: 'scale(1)'}}\n        canOutsideClickClose\n        canEscapeKeyClose\n      >\n        <Box flex={{direction: 'column'}}>\n          {sensorType === SensorType.AUTO_MATERIALIZE || sensorType === SensorType.AUTOMATION ? (\n            <>\n              <Section\n                title=\"Assets with a materialization policy\"\n                titleBorder=\"bottom\"\n                assets={assetsWithAMP}\n              />\n              <Section\n                title=\"Assets without a materialization policy\"\n                titleBorder=\"top-and-bottom\"\n                assets={assetsWithoutAMP}\n              />\n            </>\n          ) : (\n            <Section assets={sortedAssets} />\n          )}\n        </Box>\n        <DialogFooter topBorder>\n          <Button\n            intent=\"primary\"\n            onClick={() => {\n              setShowAssetSelection(false);\n            }}\n          >\n            Close\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <ButtonLink\n        onClick={() => {\n          if (error) {\n            showCustomAlert({\n              title: 'Python Error',\n              body: <PythonErrorInfo error={error} />,\n            });\n          } else {\n            setShowAssetSelection(true);\n          }\n        }}\n      >\n        {error ? (\n          <>Error loading asset selection</>\n        ) : (\n          <>\n            {assetSelectionString.slice(0, 1).toUpperCase()}\n            {assetSelectionString.slice(1)}\n          </>\n        )}\n      </ButtonLink>\n    </>\n  );\n};\n\nconst Section = ({\n  assets,\n  title,\n  titleBorder = 'top-and-bottom',\n}: {\n  assets: Extract<\n    SensorAssetSelectionFragment['assetsOrError'],\n    {__typename: 'AssetConnection'}\n  >['nodes'];\n  title?: string;\n  titleBorder?: React.ComponentProps<typeof Box>['border'];\n}) => {\n  const [isOpen, setIsOpen] = React.useState(true);\n  return (\n    <>\n      {title ? (\n        <Box border={titleBorder} padding={{right: 24, vertical: 12}}>\n          <Box\n            flex={{direction: 'row', gap: 4}}\n            style={{cursor: 'pointer'}}\n            onClick={() => {\n              setIsOpen(!isOpen);\n            }}\n          >\n            <DisclosureTriangleButton onToggle={() => {}} isOpen={isOpen} />\n            <Subtitle2>\n              {title} ({numberFormatter.format(assets.length)})\n            </Subtitle2>\n          </Box>\n        </Box>\n      ) : null}\n      {isOpen ? (\n        assets.length ? (\n          <div style={{maxHeight: '300px', overflowY: 'scroll'}}>\n            <VirtualizedItemListForDialog\n              padding={0}\n              items={assets}\n              renderItem={(asset) => <VirtualizedSelectedAssetRow asset={asset} key={asset.id} />}\n              itemBorders\n            />\n          </div>\n        ) : (\n          <Box padding={{horizontal: 24, vertical: 12}}>\n            <Caption color={Colors.textLight()}>0 assets</Caption>\n          </Box>\n        )\n      ) : null}\n    </>\n  );\n};\n\nconst VirtualizedSelectedAssetRow = ({\n  asset,\n}: {\n  asset: Extract<\n    SensorAssetSelectionFragment['assetsOrError'],\n    {__typename: 'AssetConnection'}\n  >['nodes'][0];\n}) => {\n  return (\n    <Box\n      flex={{alignItems: 'center', gap: 4}}\n      style={{cursor: 'pointer'}}\n      padding={{horizontal: 24}}\n    >\n      <Link to={assetDetailsPathForKey(asset.key)} target=\"_blank\">\n        <Box style={{overflow: 'hidden'}}>\n          <MiddleTruncate text={displayNameForAssetKey(asset.key)} />\n        </Box>\n      </Link>\n    </Box>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const makeSensorKey = (repoAddress: RepoAddress, sensorName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${sensorName}`;\n};\n","import {Box, Colors, Icon, Table, Tag} from '@dagster-io/ui-components';\nimport qs from 'qs';\n\nimport {RunRequestFragment} from './types/RunRequestFragment.types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {testId} from '../testing/testId';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  name: string;\n  runRequests: RunRequestFragment[];\n  repoAddress: RepoAddress;\n  isJob: boolean;\n  jobName: string;\n  mode?: string;\n};\n\nexport const RunRequestTable = ({runRequests, isJob, repoAddress, mode, jobName}: Props) => {\n  const repo = useRepository(repoAddress);\n\n  const body = (\n    <tbody data-testid={testId('table-body')}>\n      {runRequests.map((request, index) => {\n        return (\n          <tr key={index} data-testid={testId(request.runKey || '')}>\n            <td>\n              <Box flex={{alignItems: 'center', gap: 8}}>\n                <PipelineReference\n                  pipelineName={request.jobName ?? jobName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isJob}\n                  showIcon\n                  size=\"small\"\n                />\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'row', gap: 8, wrap: 'wrap'}}>\n                {filterTags(request.tags).map(({key, value}) => (\n                  <Tag key={key}>{`${key}: ${value}`}</Tag>\n                ))}\n              </Box>\n            </td>\n            <td>\n              <AnchorButton\n                icon={<Icon name=\"edit\" />}\n                target=\"_blank\"\n                to={workspacePathFromAddress(\n                  repoAddress,\n                  `/pipeline_or_job/${request.jobName ?? jobName}/playground/setup?${qs.stringify({\n                    mode,\n                    config: request.runConfigYaml,\n                    tags: request.tags,\n                    assetSelection: request.assetSelection?.map(({path}) => ({\n                      assetKey: {path},\n                    })),\n                  })}`,\n                )}\n              >\n                Open in Launchpad\n              </AnchorButton>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n  return (\n    <div>\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`, tableLayout: 'fixed'}}>\n        <thead>\n          <tr>\n            <th>{isJob ? 'Job' : 'Pipeline'} name</th>\n            <th>Tags</th>\n            <th>Configuration</th>\n          </tr>\n        </thead>\n        {body}\n      </Table>\n    </div>\n  );\n};\n\n// Filter out tags we already display in other ways\nfunction filterTags(tags: Array<{key: string; value: any}>) {\n  return tags.filter(({key}) => {\n    // Exclude the tag that specifies the schedule if this is a schedule name\n    return !['dagster/schedule_name'].includes(key);\n  });\n}\n","import {gql} from '@apollo/client';\n\nexport const RUN_REQUEST_FRAGMENT = gql`\n  fragment RunRequestFragment on RunRequest {\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n    runKey\n    jobName\n    assetSelection {\n      path\n    }\n  }\n`;\n","import {\n  BaseTag,\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Tag,\n  Tooltip,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\n\nexport const TickStatusTag = ({\n  tick,\n  isStuckStarted,\n}: {\n  tick:\n    | Pick<AssetDaemonTickFragment, 'status' | 'error' | 'requestedAssetMaterializationCount'>\n    | Pick<HistoryTickFragment, 'status' | 'skipReason' | 'runIds' | 'runKeys' | 'error'>;\n  isStuckStarted?: boolean;\n}) => {\n  const [showErrors, setShowErrors] = useState(false);\n  const tag = useMemo(() => {\n    const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n    const requestedItem = isAssetDaemonTick ? 'materialization' : 'run';\n    switch (tick.status) {\n      case InstigationTickStatus.STARTED:\n        return (\n          <Tag intent=\"primary\" icon={isStuckStarted ? undefined : 'spinner'}>\n            {isStuckStarted ? 'In progress' : 'Evaluating'}\n          </Tag>\n        );\n      case InstigationTickStatus.SKIPPED:\n        const tag = (\n          <BaseTag\n            fillColor={Colors.backgroundLighter()}\n            label={isAssetDaemonTick ? '0 materializations requested' : '0 runs requested'}\n          />\n        );\n        if ('runKeys' in tick && tick.runKeys.length) {\n          const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {tag}\n            </Tooltip>\n          );\n        }\n        if ('skipReason' in tick && tick.skipReason) {\n          return (\n            <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n              {tag}\n            </Tooltip>\n          );\n        }\n        return tag;\n      case InstigationTickStatus.FAILURE:\n        return (\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n            <Tag intent=\"danger\">Failure</Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  setShowErrors(true);\n                }}\n              >\n                View\n              </ButtonLink>\n            ) : null}\n          </Box>\n        );\n      case InstigationTickStatus.SUCCESS:\n        const count = isAssetDaemonTick\n          ? tick.requestedAssetMaterializationCount\n          : tick.runIds.length;\n        const successTag = (\n          <Tag intent=\"success\">\n            {count} {requestedItem}\n            {ifPlural(count, '', 's')} requested\n          </Tag>\n        );\n        if ('runKeys' in tick && tick.runKeys.length > tick.runIds.length) {\n          const message = `${tick.runKeys.length} runs requested, but ${\n            tick.runKeys.length - tick.runIds.length\n          } skipped because the runs already exist for those requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {successTag}\n            </Tooltip>\n          );\n        }\n        return successTag;\n    }\n  }, [isStuckStarted, tick]);\n\n  return (\n    <>\n      {tag}\n      {tick.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n","import {Checkbox, Tooltip} from '@dagster-io/ui-components';\n\ninterface Props {\n  checkedCount: number;\n  totalCount: number;\n  onToggleAll: (checked: boolean) => void;\n}\n\nexport const CheckAllBox = ({checkedCount, totalCount, onToggleAll}: Props) => {\n  return (\n    <Tooltip content={`${checkedCount} of ${totalCount} selected`} placement=\"top\">\n      <Checkbox\n        indeterminate={checkedCount > 0 && checkedCount !== totalCount}\n        checked={checkedCount > 0 && checkedCount === totalCount}\n        onChange={(e) => {\n          if (e.target instanceof HTMLInputElement) {\n            onToggleAll(checkedCount !== totalCount);\n          }\n        }}\n      />\n    </Tooltip>\n  );\n};\n","import {useStaticSetFilter} from './useStaticSetFilter';\nimport {InstigationStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\n\nexport const useInstigationStatusFilter = () => {\n  const [state, onStateChanged] = useQueryPersistedState<Set<InstigationStatus>>({\n    encode: (vals) => ({instigationStatus: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.instigationStatus?.split(',') as InstigationStatus[]) || []),\n  });\n  return useStaticSetFilter<InstigationStatus>({\n    name: 'Running state',\n    icon: 'toggle_off',\n    allValues: [\n      {value: InstigationStatus.RUNNING, match: ['on', 'running']},\n      {value: InstigationStatus.STOPPED, match: ['off', 'stopped']},\n    ],\n    getKey: (value) => value,\n    renderLabel: ({value}) => (\n      <span>{value === InstigationStatus.RUNNING ? 'Running' : 'Stopped'}</span>\n    ),\n    state,\n    onStateChanged,\n    getStringValue: (value) => value,\n  });\n};\n","import {useEffect, useState} from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setReady(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return ready;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import {useCallback, useContext, useMemo} from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagster.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = useCallback(\n    (_key: string | RepoAddress) => {\n      const key = typeof _key === 'object' ? repoAddressAsHumanString(_key) : _key;\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {InstigationStatus} from '../graphql/types';\n\nexport const errorDisplay = (status: InstigationStatus, runningScheduleCount: number) => {\n  if (status === InstigationStatus.STOPPED && runningScheduleCount === 0) {\n    return null;\n  } else if (status === InstigationStatus.RUNNING && runningScheduleCount === 1) {\n    return null;\n  }\n\n  const errors = [];\n  if (status === InstigationStatus.RUNNING && runningScheduleCount === 0) {\n    errors.push(\n      'Schedule is set to be running, but either the scheduler is not configured or the scheduler is not running the schedule',\n    );\n  } else if (status === InstigationStatus.STOPPED && runningScheduleCount > 0) {\n    errors.push('Schedule is set to be stopped, but the scheduler is still running the schedule');\n  }\n\n  if (runningScheduleCount > 0) {\n    errors.push('Duplicate cron job for schedule found.');\n  }\n\n  return (\n    <Popover\n      interactionKind=\"hover\"\n      popoverClassName=\"bp4-popover-content-sizing\"\n      position=\"right\"\n      content={\n        <Box flex={{direction: 'column', gap: 8}} padding={12}>\n          <strong>There are errors with this schedule.</strong>\n          <div>Errors:</div>\n          <ul>\n            {errors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </Box>\n      }\n    >\n      <Tag fill interactive intent=\"danger\">\n        Error\n      </Tag>\n    </Popover>\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Caption,\n  Checkbox,\n  Colors,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from './types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT, ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {MenuLink} from '../ui/MenuLink';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = '60px 1fr 1fr 76px 148px 210px 92px';\nconst TEMPLATE_COLUMNS = '1fr 1fr 76px 148px 210px 92px';\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  scheduleState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    scheduleState,\n    start,\n    height,\n  } = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySchedule, queryResult] = useLazyQuery<\n    SingleScheduleQuery,\n    SingleScheduleQueryVariables\n  >(SINGLE_SCHEDULE_QUERY, {\n    variables: {\n      selector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n  useBlockTraceOnQueryResult(queryResult, 'SingleScheduleQuery');\n\n  useDelayedRowQuery(querySchedule);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  const cronString = scheduleData\n    ? humanCronString(scheduleData.cronSchedule, scheduleData.executionTimezone || 'UTC')\n    : '';\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = scheduleState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this schedule'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this schedule'};\n    }\n    return {disabled: false};\n  }, [scheduleState]);\n\n  const tick = scheduleData?.scheduleState.ticks[0];\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            {scheduleData ? (\n              <Caption>\n                <PipelineReference\n                  showIcon\n                  size=\"small\"\n                  pipelineName={scheduleData.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={isJob}\n                />\n              </Caption>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <ScheduleStringContainer style={{maxWidth: '100%'}}>\n                <Tooltip position=\"top-left\" content={scheduleData.cronSchedule} display=\"block\">\n                  <div\n                    style={{\n                      color: Colors.textDefault(),\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                    title={cronString}\n                  >\n                    {cronString}\n                  </div>\n                </Tooltip>\n              </ScheduleStringContainer>\n              {scheduleData.scheduleState.nextTick &&\n              scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                <Caption>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    Next tick:&nbsp;\n                    <TimestampDisplay\n                      timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                      timezone={scheduleData.executionTimezone}\n                      timeFormat={{showSeconds: false, showTimezone: true}}\n                    />\n                  </div>\n                </Caption>\n              ) : null}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : (\n            <span style={{color: Colors.textLight()}}>{'\\u2013'}</span>\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedScheduleHeader = (props: {checkbox: React.ReactNode}) => {\n  const {checkbox} = props;\n  return (\n    <HeaderRow\n      templateColumns={checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS}\n      sticky\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Schedule name</HeaderCell>\n      <HeaderCell>Schedule</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleStringContainer = styled.div`\n  max-width: 100%;\n\n  .bp4-popover2-target {\n    max-width: 100%;\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n\nconst SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Caption,\n  Checkbox,\n  Colors,\n  IconName,\n  MiddleTruncate,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SENSOR_SWITCH_FRAGMENT, SensorSwitch} from '../sensors/SensorSwitch';\nimport {SensorTargetList} from '../sensors/SensorTargetList';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 150px 1fr 76px 120px 148px 180px';\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = `60px ${TEMPLATE_COLUMNS}`;\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  sensorState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    sensorState,\n    start,\n    height,\n  } = props;\n\n  const [querySensor, sensorQueryResult] = useLazyQuery<\n    SingleSensorQuery,\n    SingleSensorQueryVariables\n  >(SINGLE_SENSOR_QUERY, {\n    variables: {\n      selector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        sensorName: name,\n      },\n    },\n  });\n\n  useBlockTraceOnQueryResult(sensorQueryResult, 'SingleSensorQuery');\n\n  const [querySensorAssetSelection, sensorAssetSelectionQueryResult] = useLazyQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {\n      sensorSelector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        sensorName: name,\n      },\n    },\n  });\n\n  useBlockTraceOnQueryResult(sensorAssetSelectionQueryResult, 'SensorAssetSelectionQuery');\n\n  useDelayedRowQuery(\n    React.useCallback(() => {\n      querySensor();\n      querySensorAssetSelection();\n    }, [querySensor, querySensorAssetSelection]),\n  );\n\n  useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n  useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = sensorQueryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = sensorState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this sensor'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this sensor'};\n    }\n    return {disabled: false};\n  }, [sensorState]);\n\n  const tick = sensorData?.sensorState.ticks[0];\n\n  const sensorType = sensorData?.sensorType;\n  const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.textLight(),\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {sensorData?.description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <div>\n            {sensorInfo ? (\n              sensorInfo.description ? (\n                <Tooltip content={sensorInfo.description}>\n                  <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                </Tooltip>\n              ) : (\n                <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n              )\n            ) : null}\n          </div>\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n            {sensorData ? (\n              <SensorTargetList\n                targets={sensorData.targets}\n                repoAddress={repoAddress}\n                selectionQueryResult={sensorAssetSelectionQueryResult}\n                sensorType={sensorData.sensorType}\n              />\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div style={{color: Colors.textDefault()}}>\n              {humanizeSensorInterval(sensorData.minIntervalSeconds)}\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedSensorHeader = ({checkbox}: {checkbox: React.ReactNode}) => {\n  return (\n    <HeaderRow\n      templateColumns={checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS}\n      sticky\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Frequency</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const SENSOR_TYPE_META: Record<\n  SensorType,\n  {name: string; icon: IconName; description: string | null}\n> = {\n  [SensorType.ASSET]: {\n    name: 'Asset',\n    icon: 'asset',\n    description: 'Asset sensors instigate runs when a materialization occurs',\n  },\n  [SensorType.AUTO_MATERIALIZE]: {\n    name: 'Auto-materialize',\n    icon: 'materialization',\n    description:\n      'Auto-materialize sensors trigger runs based on auto-materialize policies defined on assets.',\n  },\n  [SensorType.AUTOMATION]: {\n    name: 'Automation',\n    icon: 'materialization',\n    description: 'Automation sensors trigger runs based on conditions defined on assets.',\n  },\n  [SensorType.FRESHNESS_POLICY]: {\n    name: 'Freshness policy',\n    icon: 'hourglass',\n    description:\n      'Freshness sensors check the freshness of assets on each tick, then perform an action in response to that status',\n  },\n  [SensorType.MULTI_ASSET]: {\n    name: 'Multi-asset',\n    icon: 'multi_asset',\n    description:\n      'Multi asset sensors trigger job executions based on multiple asset materialization event streams',\n  },\n  [SensorType.RUN_STATUS]: {\n    name: 'Run status',\n    icon: 'alternate_email',\n    description: 'Run status sensors react to run status',\n  },\n  [SensorType.STANDARD]: {\n    name: 'Standard',\n    icon: 'sensors',\n    description: null,\n  },\n  [SensorType.UNKNOWN]: {\n    name: 'Standard',\n    icon: 'sensors',\n    description: null,\n  },\n};\n\nconst SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        description\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n"],"names":["ASSET_DAEMON_TICK_FRAGMENT","gql","PYTHON_ERROR_FRAGMENT","ASSET_DAEMON_TICKS_QUERY","AutomaterializationEvaluationHistoryTable","loading","ticks","statuses","setStatuses","setSelectedTick","setTableView","paginationProps","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Box","flex","justifyContent","alignItems","padding","vertical","horizontal","margin","top","border","direction","gap","jsx","ButtonGroup","activeItems","Set","buttons","id","label","onClick","length","Spinner","purpose","StatusCheckbox","status","InstigationTickStatus","STARTED","SUCCESS","FAILURE","SKIPPED","TableWrapper","thead","tr","th","style","width","tbody","map","tick","index","isTickStuckInStartedState","hasPrevCursor","td","Timestamp","timestamp","unix","timeFormat","showTimezone","TickStatusTag","isStuckStarted","TimeElapsed","startUnix","endUnix","endTimestamp","includes","ButtonLink","Body2","requestedAssetMaterializationCount","div","paddingBottom","CursorHistoryControls","StatusLabels","Checkbox","checked","has","onChange","newStatuses","delete","add","styled","Table","TEMPLATE_COLUMNS","AutomaterializationTickDetailDialog","memo","isOpen","close","queryString","setQueryString","useState","filteredAssetKeys","useMemo","requestedAssetKeys","filter","assetKey","path","join","count","parentRef","useRef","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","assetKeyToPartitionsMap","requestedMaterializationsForAssets","forEach","partitionKeys","tokenForAssetKey","content","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","AssetKeysDialogEmptyState","title","description","Fragment","strong","overflow","ref","HeaderRow","templateColumns","sticky","HeaderCell","Inner","$totalHeight","key","size","start","AssetDetailRow","$height","$start","evaluationId","autoMaterializeAssetEvaluationId","Caption","color","Colors","AssetKeysDialog","setIsOpen","height","header","AssetKeysDialogHeader","showSearch","placeholder","display","gridTemplateRows","TickDetailSummary","undefined","Subtitle2","numMaterializations","queryResult","useQuery","ASSET_GROUP_QUERY","fetchPolicy","variables","data","useBlockTraceOnQueryResult","asset","assetOrError","__typename","definition","repoAddress","buildRepoAddress","repository","name","location","Row","RowGrid","RowCell","AssetLink","icon","textStyle","groupName","Link","to","workspacePathFromAddress","concat","Icon","assetDetailsPathForKey","view","evaluation","AutomaterializeRunHistoryTable","filterTags","useCursorPaginatedQuery","nextCursorForResult","runs","pipelineRunsOrError","results","PAGE_SIZE","getResultArray","tags","value","query","RUNS_ROOT_QUERY","pageSize","useQueryRefreshAtInterval","runData","previousData","_this","Wrapper","RunTable","withConfig","backfillCanShowStepStatus","backfill","partitionSet","partitionNames","BackfillStepStatusDialog","onClose","jsx_runtime","Dialog","repositoryOrigin","repositoryName","repositoryLocationName","BackfillStepStatusDialogContent","DialogFooter","topBorder","Button","BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT","setPageSize","offset","setOffset","runsFilter","token","partitions","usePartitionStepQuery","partitionSetName","partitionTagName","DagsterTag","Partition","repositorySelector","repoAddressToSelector","jobName","pipelineName","skipQuery","PartitionPerOpStatus","BackfillTerminationDialog","onComplete","cancelBackfill","useMutation","CANCEL_BACKFILL_MUTATION","SINGLE_BACKFILL_STATUS_DETAILS_QUERY","backfillId","notifyOnNetworkStatusChange","skip","isSubmitting","setIsSubmitting","unfinishedMap","partitionBackfillOrError","unfinishedPartitions","partitionStatuses","partition","runStatus","runId","cancelableStatuses","reduce","accum","numUnscheduled","numCancelable","cancel","BulkActionStatus","CANCELED","isAssetBackfill","DialogBody","intent","disabled","TerminationDialog","Object","keys","selectedRuns","BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT","backfillCanCancelRuns","counts","hasCancelPermission","queuedCount","RunStatus","QUEUED","startedCount","BackfillActionsMenu","canCancelRuns","refetch","history","useHistory","runsUrl","runsPathWithFilters","showTerminateDialog","setShowTerminateDialog","showStepStatus","setShowStepStatus","resumeBackfill","RESUME_BACKFILL_MUTATION","resume","resumePartitionBackfill","showSharedToaster","message","Group","spacing","error","action","text","showCustomAlert","body","PythonErrorInfo","canCancelSubmission","REQUESTED","Popover","position","Menu","MenuItem","push","hasResumePermission","FAILED","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","BackfillRow","props","numPartitions","BackfillRowContent","statusQueryResult","BackfillRowLoader","statusDetails","useLazyQuery","statusCounts","SINGLE_BACKFILL_STATUS_COUNTS_QUERY","statusQueryFn","BACKFILL_PARTITIONS_COUNTS_THRESHOLD","useDelayedRowQuery","FIFTEEN_SECONDS","React","fromEntries","partitionStatusCounts","e","countBy","k","children","allPartitions","showBackfillTarget","onShowPartitionsRequested","Mono","TimestampDisplay","BackfillTarget","BackfillRequestedRange","onExpand","CreatedByTagCell","BackfillStatusTag","isValidSerialization","BackfillRunStatus","p","partitionCounts","entries","health","runStatusForPartitionKey","s","partitionName","NOT_STARTED","PartitionStatus","splitPartitions","entry","find","r","RunStatusTagsWithCounts","succeededCount","inProgressCount","failedCount","repo","useRepository","assetSelection","isHiddenAssetPartitionSet","isHiddenAssetGroupJob","fontWeight","workspacePipelinePath","repoName","repoLocation","isJob","isThisThingAJob","encodeURIComponent","span","fontSize","repoAddressAsHumanString","AssetKeyTagCollection","assetKeys","dialogTitle","PipelineReference","showIcon","pipelineHrefContext","numPartitionsLabel","toLocaleString","TagButton","Tag","interactive","RequestedPartitionStatusBar","all","requested","small","hideStatusTooltip","BackfillStatusTagForPage","bottom","COMPLETED","Array","from","inProgressStatuses","some","CANCELING","button","errorState","COLLATOR","Intl","Collator","navigator","language","sensitivity","numeric","BackfillPartitionsRequestedDialog","fontFamily","FontFamily","monospace","DialogContent","sorted","sort","a","b","compare","VirtualizedItemListForDialog","renderItem","TruncatedTextWithFullTextOnHover","BackfillTable","backfills","partitionsRequestedBackfill","setPartitionsRequestedBackfill","BACKFILL_TABLE_FRAGMENT","dayjs","relativeTime","COLOR_MAP","HoverColorMap","timestampFormat","memoize","DateTimeFormat","hour","minute","second","hourCycle","timeZone","timezone","browserTimezone","timeZoneName","LiveTickTimeline","onHoverTick","onSelectTick","exactRange","timeRange","MINUTE","tickGrid","timeAfter","now","setNow","Date","isPaused","setPaused","useEffect","interval","setInterval","clearInterval","maxX","minX","fullRange","viewport","containerProps","useViewport","ticksReversed","reverse","ticksToDisplay","i","startX","viewportWidth","endX","isStuckStartedTick","Math","max","timeTickGridDelta","tickGridDelta","startTickGridX","ceil","gridTicks","time","x","showLabel","useContext","TimeContext","marginRight","TicksWrapper","GridTick","transform","GridTickLine","GridTickTime","format","isAssetDaemonTick","runIds","Tick","onMouseEnter","onMouseLeave","Tooltip","TickTooltip","NowIndicator","TimeAxisWrapper","ifPlural","startTime","endTime","elapsedTime","as","Chart","register","zoomPlugin","DEFAULT_SHOWN_STATUS_STATE","STATUS_TEXT_MAP","TicksTable","tabs","setTimerange","setParentStatuses","shownStates","setShownStates","useQueryPersistedState","encode","queryState","states","state","toLowerCase","String","decode","instigationSelector","instigationStateOrError","JOB_TICK_HISTORY_QUERY","end","reset","logTick","setLogTick","NonIdealState","instigationType","StatusFilter","target","TickLogDialog","InstigationType","SENSOR","TickRow","marginTop","TickHistoryTimeline","onHighlightRunIds","beforeTimestamp","afterTimestamp","selectedTickId","setSelectedTickId","tickId","qs","Number","pollingPaused","pausePolling","limit","Subheading","onTickClick","TickDetailsDialog","copyToClipboard","useCopyToClipboard","showResults","setShowResults","addedPartitions","deletedPartitions","requests","dynamicPartitionsRequestResults","countPartitionsAddedOrDeleted","DynamicPartitionsRequestType","ADD_PARTITIONS","DELETE_PARTITIONS","showSeconds","cursor","truncate","CopyButton","RunStatusLink","run","RUN_STATUS_FRAGMENT","TICK_TAG_FRAGMENT","HISTORY_TICK_FRAGMENT","IconWrapper","filterPermissionedInstigationState","instigationState","hasStartPermission","InstigationStatus","STOPPED","hasStopPermission","RUNNING","instigationStateSummary","anyOff","anyOn","instigationStates","initialState","step","completion","completed","errors","reducer","prevState","type","useInstigationStateReducer","useReducer","str","slice","TRUNCATION_THRESHOLD","THREE_DAYS","sum","request","OVERVIEW_COLLAPSED_KEY","PartitionRunList","PARTITION_RUN_LIST_QUERY","RUN_TABLE_RUN_FRAGMENT","getVisibleItemCount","BOX_SIZE","timeboundsOfPartitions","minUnix","maxUnix","partitionColumns","steps","min","PartitionPerAssetStatus","assetHealth","rangeDimension","rangeDimensionIdx","assetQueryItems","rest","rangesByAssetKey","dimensions","ranges","rangesForSingleDimension","layoutBoxesWithRangeDimension","layout","buildLayout","nodes","mode","GanttChartMode","FLAT","boxes","node","stepRows","box","totalFailurePercent","finalFailurePercent","partitionKey","partitionKeyIdx","idx","runsLoaded","assetPartitionStatusToSquareColor","partitionStatusAtIndex","PartitionStepStatus","showLatestRun","AssetPartitionStatus","MATERIALIZED","MISSING","pipeline","pipelineSelector","PARTITION_STEP_STATUS_PIPELINE_QUERY","solidHandles","pipelineSnapshotOrError","useMatrixData","stepQuery","hovered","setHovered","focused","setFocused","sortPartitionSteps","stepsByName","stepRow","visibleCount","visibleStart","visibleEnd","visibleColumns","topLabelHeight","topLabelHeightForLabels","PartitionRunMatrixContainer","autoFocus","GridFloatingContainer","floating","GridColumn","flexShrink","TopLabel","LeftLabel","paddingLeft","Divider","paddingRight","data-tooltip","stepName","MiddleTruncate","PagerControl","$direction","right","zIndex","TopLabelTilted","textAlign","PartitionSquare","PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT","TOOLTIP_STYLE","JSON","stringify","left","squareStatus","opened","setOpened","_reverse_find","className","data-tooltip-style","interactionKind","placement","onOpening","onClosed","MenuLink","linkToRunEvent","stepKey","STEP_STATUS_COLORS","SUCCESS_SKIPPED","FAILURE_SKIPPED","IN_PROGRESS","flatGradient","flatGradientStack","colors","multiselectFocused","TopLabelTiltedInner","labels","maxLength","GRID_FLOATING_CONTAINER_WIDTH","ThrottledMemoBatchingContext","createContext","isScheduled","queue","enqueue","update","setTimeout","unstable_batchedUpdates","shift","useThrottledMemo","factory","deps","delay","setState","lastRun","timeoutId","isCancelled","clearTimeout","MISSING_STEP_STATUSES","StepEventStatus","getStartTime","byStartTimeAsc","isStepKeyForNode","nodeName","dynamicRegex","match","options","explodeCompositesInHandleGraph","h","solid","solidsFiltered","filterByQuery","partitionsByName","buildMatrixData","currRun","previousRunStatus","blankState","lastRunStepStatus","stepStats","stats","currRunStatus","partitionsWithARun","totalFailures","finalFailures","endsWith","round","showFailuresAndGapsOnly","ii","splice","every","PARTITION_MATRIX_STEP_RUN_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","InitialDataState","loadingCursorIdx","client","useApolloClient","version","dataState","setDataState","_serializedRunTags","split","RepositoryLabelTag","partitionNamesSet","v","runTags","parse","stopIdx","nextCursorIdx","sliceNames","fetched","Promise","partitionSetTag","PartitionSet","partitionTag","fetchRunsForFilter","timer","recent","pending","relevant","t","updated","o","assemblePartitions","byName","result","PARTITION_STEP_LOADER_QUERY","CONSTANTS","ROW_HEIGHT","DATE_TIME_HEIGHT","TIME_HEADER_HEIGHT","ONE_HOUR_MSEC","EMPTY_STATE_HEIGHT","LEFT_SIDE_SPACE_ALLOTTED","RunTimeline","jobs","rangeMs","measureRef","_","buckets","job","repoKey","repoAddressAsURLString","allKeys","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","flattened","flat","bucketA","bucketB","COMMON_COLLATOR","bucket","repoAddressFromPath","jobCount","repoOrder","localeCompare","expandedJobCount","expandedRepos","SECTION_HEADER_HEIGHT","duplicateRepoNames","findDuplicateRepoNames","anyJobs","TimeDividers","Container","row","TimelineHeaderRow","expanded","isDuplicateRepoName","RunTimelineRow","RunsEmptyOrLoading","includesTicks","RepoRow","showLocation","rightElement","RunStatusTags","failedStatuses","successStatuses","inProgressText","succeededText","failedText","StatusSpan","dateTimeOptions","month","day","year","dateTimeOptionsWithTimezone","timeOnlyOptionsWithMinute","timeOnlyOptions","annotations","_now","formatDateTime","useFormatDateTime","dateMarkers","totalTime","startDateStringWithTimezone","dayBoundaries","valueOf","dayStart","getTime","dayEnd","setDate","getDate","date","startLeftMsec","dayLength","toString","endRight","timeMarkers","startGap","firstMarker","replace","marker","msToLeft","ms","toPrecision","DividerContainer","DividerLabels","DateLabel","TimeLabel","DividerLines","DividerLine","backgroundColor","TimlineMarker","annotation","containerWidth","batched","batchRunsForTimeline","minChunkWidth","minMultipleWidth","TimelineRowContainer","JobName","jobType","RunChunks","batch","runCount","RunChunk","$background","mergeStatusToBackground","$multiple","RunHoverContent","BatchCount","background","AnchorButton","attrs","sliced","remaining","HoverContentJobName","maxHeight","overflowY","RunStatusDot","overlap","config","rangeLength","nowLeft","batches","floor","consolidated","next","canBatch","minLeft","unshift","currentStart","currentEnd","nextStart","nextEnd","minStart","maxEnd","statusToColor","scheduled","queued","inProgress","failed","succeeded","queuedStatuses","statusArr","element","pct","Boolean","colorString","nextPct","pctSoFar","colorForStatus","toFixed","ScheduleStateChangeDialog","openWithIntent","schedules","dispatch","startSchedule","START_SCHEDULE_MUTATION","stopSchedule","STOP_SCHEDULE_MUTATION","schedule","scheduleName","scheduleSelector","stop","scheduleState","scheduleOriginId","scheduleSelectorId","selectorId","stopRunningSchedule","mutate","canQuicklyClose","canEscapeKeyClose","canOutsideClickClose","progressContent","ProgressBar","animate","NavigationBlock","completionContent","errorCount","successCount","ul","li","ScheduleBulkActionMenu","onDone","setOpenWithIntent","aria-disabled","rightIcon","SchedulerInfo","healthy","daemonHealth","boxProps","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","Alert","href","makeScheduleKey","SensorStateChangeDialog","sensors","startSensor","START_SENSOR_MUTATION","stopSensor","STOP_SENSOR_MUTATION","sensor","sensorName","sensorSelector","sensorState","jobOriginId","jobSelectorId","SensorBulkActionMenu","SensorMonitoredAssets","metadata","SensorResetButton","permissions","canStartSensor","canStopSensor","usePermissionsForLocation","resetSensor","toggleOnInFlight","RESET_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","hasPermission","tooltipContent","defaultStatus","DEFAULT_DISABLED_REASON","DynamicPartitionRequests","includeTitle","rows","partitionsDefName","def","grow","borderRight","SensorDryRunDialog","SensorDryRun","sensorExecutionData","currentCursor","sensorDryRun","EVALUATE_SENSOR_MUTATION","setCursor","submitting","setSubmitting","setError","setSensorExecutionData","submitTest","useCallback","selectorData","evaluationResult","assertUnreachable","data-testid","testId","cursorState","setCursorState","setCursorMutation","SET_CURSOR_MUTATION","onPersistCursorValue","setSensorCursor","underline","runRequests","numRunRequests","didSkip","dynamicPartitionRequests","dynamicPartitionsRequests","Grid","pre","skipReason","RunRequestTable","TextInput","minHeight","RUN_REQUEST_FRAGMENT","TIME_FORMAT","humanizeSensorInterval","minIntervalSeconds","SensorDetails","selectionQueryResult","refreshState","isCursorEditing","setCursorEditing","latestTick","typeSpecificData","lastCursor","showTestTickDialog","setShowTestTickDialog","running","assetSelectionResult","sensorOrError","assetSelectionData","selectedAssets","PageHeader","Heading","RepositoryLink","QueryRefreshCountdown","sensorType","SensorType","STANDARD","targets","MetadataTableWIP","nextTick","SensorTargetList","SensorSwitch","canReset","AUTO_MATERIALIZE","AUTOMATION","EditCursorDialog","SensorInfo","sensorDaemonStatus","assetDaemonStatus","warnForSensor","warnForAssets","rel","SENSOR_FRAGMENT","INSTIGATION_STATE_FRAGMENT","ASSET_SENSOR_TICKS_QUERY","SensorAutomaterializationEvaluationHistoryTable","queryKey","raw","allTicks","SensorPageAutomaterialize","daemonStatus","setIsPaused","getVariables","currentTime","TWENTY_MINUTES","fetch","refresh","useRefreshAtInterval","enabled","intervalMs","leading","selectedTick","tableView","copy","runTableFilterTags","repoAddressAsTag","SensorName","assetDaemonHealth","SensorPreviousRuns","highlightedIds","PREVIOUS_RUNS_FOR_SENSOR_QUERY","RUNS_LIMIT","actionBarComponents","hideCreatedBy","SensorRoot","useTrackPageView","useParams","useDocumentTitle","selectedTab","setSelectedTab","SENSOR_ROOT_QUERY","SENSOR_ASSET_SELECTIONS_QUERY","refreshState1","refreshState2","useMergedRefresh","Redirect","instance","ampDaemonStatus","Page","INSTANCE_HEALTH_FRAGMENT","DisclosureTriangleButton","UnstyledButton","visibleTargets","AssetSelectionLink","showAssetSelection","setShowAssetSelection","assetsOrError","sortedAssets","displayNameForAssetKey","assetsWithAMP","autoMaterializePolicy","assetsWithoutAMP","assetSelectionString","maxWidth","minWidth","Section","titleBorder","assets","toUpperCase","numberFormatter","VirtualizedSelectedAssetRow","itemBorders","makeSensorKey","runKey","wrap","runConfigYaml","tableLayout","showErrors","setShowErrors","tag","BaseTag","fillColor","runKeys","targetTagName","successTag","CheckAllBox","checkedCount","totalCount","indeterminate","HTMLInputElement","useInstigationStatusFilter","onStateChanged","instigationStatus","vals","useStaticSetFilter","allValues","getKey","renderLabel","getStringValue","useDelayedState","ready","setReady","delayMsec","SearchInputSpinner","canShow","uniques","duplicates","repoNames","validateExpandedKeys","isArray","parsed","buildStorageKey","basePath","collapsedKey","AppContext","collapsedStorageKey","collapsedKeys","setCollapsedKeys","useStateWithStorage","_key","nextCollapsedKeys","expand","collapsedSet","errorDisplay","runningScheduleCount","popoverClassName","fill","TEMPLATE_COLUMNS_WITH_CHECKBOX","VirtualizedScheduleRow","onToggleChecked","showCheckboxColumn","querySchedule","SINGLE_SCHEDULE_QUERY","selector","scheduleData","scheduleOrError","cronString","humanCronString","cronSchedule","executionTimezone","checkboxState","$showCheckboxColumn","shiftKey","nativeEvent","MouseEvent","getModifierState","ScheduleStringContainer","whiteSpace","textOverflow","LoadingOrNone","ScheduleSwitch","runningCount","LastRunSummary","showButton","showHover","showSummary","VirtualizedScheduleHeader","checkbox","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","VirtualizedSensorRow","querySensor","sensorQueryResult","SINGLE_SENSOR_QUERY","querySensorAssetSelection","sensorAssetSelectionQueryResult","sensorData","sensorInfo","SENSOR_TYPE_META","VirtualizedSensorHeader","ASSET","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","UNKNOWN","SENSOR_SWITCH_FRAGMENT"],"sourceRoot":""}